import{_ as s,c as a,o as n,U as o}from"./chunks/framework.4d5e0f31.js";const C=JSON.parse('{"title":"React 入门学习（十七）-- React 扩展","description":"通过多种方式来优化了 react 的性能，让 react 开发更具有优势","frontmatter":{"title":"React 入门学习（十七）-- React 扩展","date":"2021-09-11T15:38:11.000Z","id":1635583091,"tags":["react"],"categories":["React入门学习"],"keywords":"react,扩展,小丞同学","description":"通过多种方式来优化了 react 的性能，让 react 开发更具有优势"},"headers":[],"relativePath":"pages/react/primary/more.md","lastUpdated":1686714236000}'),l={name:"pages/react/primary/more.md"},p=o(`<p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-%E6%89%A9%E5%B1%95.gif" alt="react-扩展" data-fancybox="gallery"></p><blockquote><p>📢 大家好，我是小丞同学，一名<div color="#2e86de"><strong>大二的前端爱好者</strong></div></p><p>📢 这篇文章是学习 React扩展部分的学习笔记</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <div color="#f368e0"><strong>愿你忠于自己，热爱生活</strong></div></p></blockquote><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>学到这里 React 已经学的差不多了，接下来就学习一些 React 扩展内容，可以帮助我们更好的开发和理解，这部分的知识还有很多的东西可以探寻，比如：网红 React-Hook，就是我们需要注意的地方，打了 100 多集的类式组件，出来一个 hooks ，现在用函数式组件偏多了.............</p><p>所以 Hooks 就需要我们深入的学习一下了，下面我们就一起来看看扩展部分有哪些内容吧</p><h2 id="_1-setstate" tabindex="-1">1. setState <a class="header-anchor" href="#_1-setstate" aria-label="Permalink to &quot;1. setState&quot;">​</a></h2><h3 id="对象式-setstate" tabindex="-1">对象式 setState <a class="header-anchor" href="#对象式-setstate" aria-label="Permalink to &quot;对象式 setState&quot;">​</a></h3><p>首先在我们以前的认知中，<code>setState</code> 是用来更新状态的，我们一般给它传递一个对象，就像这样</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>这样每次更新都会让 <code>count</code> 的值加 1。这也是我们最常做的东西</p><p>这里我们做一个案例，点我加 1，一个按钮一个值，我要在控制台输出每次的 <code>count</code> 的值</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-demo1.gif" alt="react-extension-demo1" data-fancybox="gallery"></p><p>那我们需要在控制台输出，要如何实现呢？</p><p>我们会考虑在 <code>setState</code> 更新之后 <code>log</code> 一下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        count</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>因此可能会写出这样的代码，看起来很合理，在调用完 <code>setState</code> 之后，输出 <code>count</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-demo1-2.gif" alt="react-extension-demo1-2" data-fancybox="gallery"></p><p>我们发现显示的 <code>count</code> 和我们控制台输出的 <code>count</code> 值是不一样的</p><p>这是因为，我们调用的 <code>setState</code> 是同步事件，但是它的作用是让 React 去更新数据，而 React 不会立即的去更新数据，这是一个异步的任务，因此我们输出的 <code>count</code> 值会是状态更新之前的数据。“React <strong>状态更新是异步的</strong>”</p><p>那我们要如何实现同步呢？</p><p>其实在 <code>setState</code> 调用的第二个参数，我们可以接收一个函数，这个函数会在状态更新完毕并且界面更新之后调用，我们可以试试</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        count</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>我们将 <code>setState</code> 填上第二个参数，输出更新后的 <code>count</code> 值</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-demo1-3.gif" alt="react-extension-demo1-3" data-fancybox="gallery"></p><p>这样我们就能成功的获取到最新的数据了，如果有这个需求我们可以在第二个参数输出噢~</p><h3 id="函数式-setstate" tabindex="-1">函数式 setState <a class="header-anchor" href="#函数式-setstate" aria-label="Permalink to &quot;函数式 setState&quot;">​</a></h3><p>这种用法我也是第一次见，函数式的 <code>setState</code> 也是接收两个参数</p><p>第一个参数是 <code>updater</code> ，它是一个能够返回 <code>stateChange</code> 对象的函数</p><p>第二个参数是一个回调函数，用于在状态更新完毕，界面也更新之后调用</p><p>与对象式 <code>setState</code> 不同的是，我们传递的第一个参数 <code>updater</code> 可以接收到2个参数 <code>state</code> 和 <code>props</code></p><p>我们尝试一下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-demo2-1.gif" alt="react-extension-demo2-1" data-fancybox="gallery"></p><p>我们也成功的实现了</p><p>我们在第一个参数中传入了一个函数，这个函数可以接收到 <code>state</code> ，我们通过更新 <code>state</code> 中的 <code>count</code> 值，来驱动页面的更新</p><p>利用函数式 <code>setState</code> 的优势还是很不错的，可以直接获得 <code>state</code> 和 <code>props</code></p><blockquote><p>可以理解为对象式的 <code>setState</code> 是函数式 <code>setState</code> 的语法糖</p></blockquote><h2 id="_2-lazyload" tabindex="-1">2. LazyLoad <a class="header-anchor" href="#_2-lazyload" aria-label="Permalink to &quot;2. LazyLoad&quot;">​</a></h2><p>懒加载在 React 中用的最多的就是路由组件了，页面刷新时，所有的页面都会重新加载，这并不是我们想要的，我们想要实现点击哪个路由链接再加载即可，这样避免了不必要的加载</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-demo2-2.gif" alt="react-extension-demo2-2" data-fancybox="gallery"></p><p>我们可以发现，我们页面一加载时，所有的路由组件都会被加载</p><p>如果我们有 100 个路由组件，但是用户只点击了几个，这就会有很大的消耗，因此我们需要做懒加载处理，<strong>我们点击哪个时，才去加载哪一个</strong></p><p>首先我们需要从 <code>react</code> 库中暴露一个 <code>lazy</code> 函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">lazy</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>然后我们需要更改引入组件的方式</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Home </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lazy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./Home</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> About </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lazy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./About</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span></code></pre></div><p>采用 <code>lazy</code> 函数包裹</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911114307684.png" alt="image-20210911114307684" data-fancybox="gallery"></p><p>我们会遇到这样的错误，提示我们用一个标签包裹</p><p>这里是因为，当我们网速慢的时候，路由组件就会有可能加载不出来，页面就会白屏，它需要我们来指定一个路由组件加载的东西，相对于 loading</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">={&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">loading</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/home</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">Home</span><span style="color:#89DDFF;">}&gt;&lt;/</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">About</span><span style="color:#89DDFF;">}&gt;&lt;/</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>在做这个案例的时候，一定不要设置重定向的东西，所有的路由我们要点击再加载</p></blockquote><p>初次登录页面的时候</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911115542647.png" alt="image-20210911115542647" data-fancybox="gallery"></p><p>注意噢，这些文件都不是路由组件，当我们点击了对应组件之后才会加载</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-lazyload-2.gif" alt="react-extension-lazyload-2" data-fancybox="gallery"></p><p>从上图我们可以看出，每次点击时，才会去请求 <code>chunk</code> 文件</p><p>那我们更改写的 <code>fallback</code> 有什么用呢？它会在页面还没有加载出来的时候显示</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-lazyload-3.gif" alt="react-extension-lazyload-3" data-fancybox="gallery"></p><blockquote><p>注意：因为 loading 是作为一个兜底的存在，因此 loading 是 必须提前引入的，不能懒加载</p></blockquote><h2 id="_3-hooks" tabindex="-1">3. Hooks <a class="header-anchor" href="#_3-hooks" aria-label="Permalink to &quot;3. Hooks&quot;">​</a></h2><h3 id="usestate" tabindex="-1">useState <a class="header-anchor" href="#usestate" aria-label="Permalink to &quot;useState&quot;">​</a></h3><p><code>hooks</code> 解决了函数式组件和类式组件的差异，让函数式组件拥有了类式组件所拥有的 <code>state</code> ，同时新增了一些 API ，让函数式组件，变得更加的灵活</p><p>首先我们需要明确一点，函数式组件<strong>没有</strong>自己的 <code>this</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setCount</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setCount</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">setCount</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">当前求和为：</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">add</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">点我加1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> Demo</span></span>
<span class="line"></span></code></pre></div><p>利用函数式组件完成的 <strong>点我加1</strong> 案例</p><p>这里利用了一个 Hook ：<code>useState</code></p><p>它让函数式组件能够维护自己的 <code>state</code> ，它<strong>接收一个参数</strong>，作为<strong>初始化</strong> <code>state</code> 的值，赋值给 <code>count</code>，因此 <code>useState</code> 的初始值只有<strong>第一次有效</strong>，它所映射出的两个变量 <code>count</code> 和 <code>setCount</code> 我们可以理解为 <code>setState</code> 来使用</p><blockquote><p><strong>useState 能够返回一个数组，第一个元素是 state ，第二个是更新 state 的函数</strong></p></blockquote><p>我们先看看控制台输出的什么</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911123011304.png" alt="image-20210911123011304" data-fancybox="gallery"></p><p><code>count</code> 是初始化的值，而 <code>setCount</code> 就像是一个 <code>action</code> 对象驱动状态更新</p><p>我们可以通过 <code>setCount</code> 来更新 <code>count</code> 的值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setCount</span><span style="color:#A6ACCD;">(count </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-label="Permalink to &quot;useEffect&quot;">​</a></h3><p>在类式组件中，提供了一些声明周期钩子给我们使用，我们可以在组件的特殊时期执行特定的事情，例如 <code>componentDidMount</code> ，能够在组件挂载完成后执行一些东西</p><p>在函数式组件中也可以实现，它采用的是 <code>effectHook</code> ，它的语法更加的简单，同时融合了 <code>componentDidUpdata</code> 生命周期，极大的方便了我们的开发</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">被调用了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>由于函数的特性，我们可以在函数中随意的编写函数，这里我们调用了 <code>useEffect</code> 函数，这个函数有多个功能</p><p>当我们像上面代码那样使用时，它相当于 <code>componentDidUpdata</code> 和 <code>componentDidMount</code> 一同使用，也就是在<strong>组件挂载和组件更新</strong>的时候都会调用这个函数</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-hook-1.gif" alt="react-extension-hook-1" data-fancybox="gallery"></p><p>它还可以接收第二个参数，这个参数表示它要<strong>监测的数据</strong>，也就是他要监视哪个数据的变化</p><p>当我们不需要监听任何状态变化的时候，我们可以就<strong>传递一个空数组</strong>，这样它就能当作 <code>componentMidMount</code> 来使用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">被调用了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [])</span></span>
<span class="line"></span></code></pre></div><p>这样我们只有在组件第一次挂载的时候触发</p><p>当然当页面中有多个数据源时，我们也可以选择个别的数据进行监测以达到我们想要的效果</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">被调用了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [count])</span></span>
<span class="line"></span></code></pre></div><p>这样，我们就只<strong>监视 count 数据的变化</strong></p><p>当我们想要在卸载一个组件之前进行一些<strong>清除定时器</strong>的操作，在类式组件中，我们会调用生命周期钩子 <code>componentDidUnmount</code> 来实现，在函数式组件中，我们的写法更为简单，我们直接在 <code>useEffect</code> 的第一个参数的返回值中实现即可 也就是说，第一个参数的函数体相当于 <code>componentDidMount</code> 返回体相当于 <code>componentDidUnmount</code> ，这样我们就能实现在组件即将被卸载时输出一些东西了</p><p><strong>实现卸载</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unmount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unmountComponentAtNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>卸载前输出</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">被调用了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我要被卸载了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [count])</span></span>
<span class="line"></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-extension-hook-2.gif" alt="react-extension-hook-2" data-fancybox="gallery"></p><p>实现了在组件即将被卸载的时候输出</p><p>因此 <code>useEffect</code> 相当于三个生命周期钩子，<code>componentDidMount</code> 、<code>componentDidUpdata</code> 、<code>componentDidUnmount</code></p><h3 id="useref" tabindex="-1">useRef <a class="header-anchor" href="#useref" aria-label="Permalink to &quot;useRef&quot;">​</a></h3><p>当我们想要获取组件内的信息时，在类式组件中，我们会采用 <code>ref</code> 的方式来获取。在函数式组件中，我们可以采用也可以采用 <code>ref</code> 但是，我们需要采用 <code>useRef</code> 函数来创建一个 ref 容器，这和 <code>createRef</code> 很类似。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">myRef</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"></span></code></pre></div><p>获取 ref 值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">myRef</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>即可成功的获取到 input 框中的值</p><h2 id="_4-fragment" tabindex="-1">4. Fragment <a class="header-anchor" href="#_4-fragment" aria-label="Permalink to &quot;4. Fragment&quot;">​</a></h2><p>我们编写组件的时候每次都需要采用一个 <code>div</code> 标签包裹，才能让它正常的编译，但是这样会引发什么问题呢？我们打开控制台看看它的层级</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911151643934.png" alt="image-20210911151643934" data-fancybox="gallery"></p><p>它包裹了几层无意义的 div 标签，我们可以采用 <code>Fragment</code> 来解决这个问题</p><p>首先，我们需要从 react 中暴露出 <code>Fragment</code> ，将我们所写的内容采用 <code>Fragment</code> 标签进行包裹，当它解析到 <code>Fragment</code> 标签的时候，就会把它去掉</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911152037120.png" alt="image-20210911152037120" data-fancybox="gallery"></p><p>这样我们的内容就直接挂在了 <code>root</code> 标签下</p><blockquote><p>同时采用空标签，也能实现，但是它不能接收任何值，而 <code>Fragment</code> 能够接收 1 个值<code>key</code></p></blockquote><h2 id="_5-context" tabindex="-1">5. Context <a class="header-anchor" href="#_5-context" aria-label="Permalink to &quot;5. Context&quot;">​</a></h2><h4 id="仅适用于类式组件" tabindex="-1">仅适用于类式组件 <a class="header-anchor" href="#仅适用于类式组件" aria-label="Permalink to &quot;仅适用于类式组件&quot;">​</a></h4><p>当我们想要给子类的子类传递数据时，前面我们讲过了 redux 的做法，这里介绍的 Context 我觉得也类似于 Redux</p><p>首先我们需要引入一个 <code>MyContext</code> 组件，我们需要引用<code>MyContext</code> 下的 <code>Provider</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createContext</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> Provider </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MyContext</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>用 <code>Provider</code> 标签包裹 A组件内的 B 组件，并通过 <code>value</code> 值，将数据传递给子组件，这样以 A 组件为父代组件的所有子组件都能够接受到数据</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Provider</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">={{</span><span style="color:#A6ACCD;"> username</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">}}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Provider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>但是我们需要在使用数据的组件中引入 <code>MyContext</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">static contextType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MyContext</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在使用时，直接从 <code>this.context</code> 上取值即可</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">context</span></span>
<span class="line"></span></code></pre></div><h4 id="适用于函数和类式组件" tabindex="-1">适用于函数和类式组件 <a class="header-anchor" href="#适用于函数和类式组件" aria-label="Permalink to &quot;适用于函数和类式组件&quot;">​</a></h4><p>由于函数式组件没有自己 <code>this</code> ，所以我们不能通过 <code>this.context</code> 来获取数据</p><p>这里我们需要从 <code>Context</code> 身上暴露出一个 <code>Consumer</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> Provider </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">Consumer</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MyContext</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>然后通过 <code>value</code> 取值即可</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">C</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h3</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">我是C组件，我从A接收到的数据 </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h3</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Consumer</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">,年龄是</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Consumer</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210911161103300.png" alt="image-20210911161103300" data-fancybox="gallery"></p><blockquote><p>因此想要在函数式组件中使用，需要引入 <code>Consumer</code></p></blockquote><h2 id="_6-purecomponent" tabindex="-1">6. PureComponent <a class="header-anchor" href="#_6-purecomponent" aria-label="Permalink to &quot;6. PureComponent&quot;">​</a></h2><p>在我们之前一直写的代码中，我们一直使用的<code>Component</code> 是有问题存在的</p><ol><li>只要执行 <code>setState</code> ，即使不改变状态数据，组件也会调用 <code>render</code></li><li>当前组件状态更新，也会引起子组件 <code>render</code></li></ol><p>而我们想要的是只有组件的 <code>state</code> 或者 <code>props</code> 数据发生改变的时候，再调用 <code>render</code></p><p>我们可以采用重写 <code>shouldComponentUpdate</code> 的方法，但是这个方法不能根治这个问题，当状态很多时，我们没有办法增加判断</p><p>我们可以采用 <code>PureComponent</code></p><p>我们可以从 <code>react</code> 身上暴露出 <code>PureComponent</code> 而不使用 <code>Component</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PureComponent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>就这~听了半天结果就只一个 <code>PureComponent</code></p><p><code>PureComponent</code> 会对比当前对象和下一个状态的 <code>prop</code> 和 <code>state</code> ，而这个比较属于浅比较，比较基本数据类型是否相同，而对于引用数据类型，<strong>比较的是它的引用地址是否相同，这个比较与内容无关</strong></p><h2 id="_7-render-props" tabindex="-1">7. render props <a class="header-anchor" href="#_7-render-props" aria-label="Permalink to &quot;7. render props&quot;">​</a></h2><p>采用 render props 技术，我们可以像组件内部动态传入带有内容的结构</p><blockquote><p>当我们在一个组件标签中填写内容时，这个内容会被定义为 children props，我们可以通过 <code>this.props.children</code> 来获取</p></blockquote><p>例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hello</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>这个 hello 我们就可以通过 children 来获取</p><p>而我们所说的 render props 就是在组件标签中传入一个 render 方法，又因为属于 props ，因而被叫做了 render props</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">render</span><span style="color:#89DDFF;">={(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">C</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">} /&gt;} /&gt;</span></span>
<span class="line"></span></code></pre></div><p>你可以把 <code>render</code> 看作是 <code>props</code>，只是它有特殊作用，当然它也可以用其他名字来命名</p><p>在上面的代码中，我们需要在 A 组件中预留出 C 组件渲染的位置 在需要的位置上加上<code>{this.props.render(name)}</code></p><p>那我们在 C 组件中，如何接收 A 组件传递的 <code>name</code> 值呢？通过 <code>this.props.name</code> 的方式</p><h2 id="_8-errorboundary" tabindex="-1">8. ErrorBoundary <a class="header-anchor" href="#_8-errorboundary" aria-label="Permalink to &quot;8. ErrorBoundary&quot;">​</a></h2><p>当不可控因素导致数据不正常时，我们不能直接将报错页面呈现在用户的面前，由于我们没有办法给每一个组件、每一个文件添加判断，来确保正常运行，这样很不现实，因此我们要用到<strong>错误边界</strong>技术</p><p><strong>错误边界就是让这块组件报错的影响降到最小，不要影响到其他组件或者全局的正常运行</strong></p><blockquote><p>例如 A 组件报错了，我们可以在 A 组件内添加一小段的提示，并把错误控制在 A 组件内，不影响其他组件</p></blockquote><ul><li>我们要对容易出错的组件的父组件做手脚，而不是组件本身</li></ul><p>我们在父组件中通过 <code> getDerivedStateFromError</code> 来配置<strong>子组件</strong>出错时的处理函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">static </span><span style="color:#82AAFF;">getDerivedStateFromError</span><span style="color:#A6ACCD;">(error) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> hasError</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>我们可以将 <code>hasError</code> 配置到状态当中，当 <code>hasError</code> 状态改变成 <code>error</code> 时，表明有错误发生，我们需要在组件中通过判断 <code>hasError</code> 值，来指定是否显示子组件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hasError</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">出错啦</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Child</span><span style="color:#89DDFF;"> /&gt;}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>在服务器中启动，才能正常看到效果</p></blockquote><p>可以在 <code>componentDidCatch</code> 中统计错误次数，通知编码人员进行 bug 解决</p><h2 id="_9-组件通信方式总结" tabindex="-1">9. 组件通信方式总结 <a class="header-anchor" href="#_9-组件通信方式总结" aria-label="Permalink to &quot;9. 组件通信方式总结&quot;">​</a></h2><ol><li>props <ul><li>children props</li><li>render props</li></ul></li><li>消息发布订阅 <ul><li>利用 pubsub 库来实现</li></ul></li><li>集中式状态管理 <ul><li>redux</li></ul></li><li>conText <ul><li>生成者-消费者</li></ul></li></ol><p><strong>选择方式</strong></p><p>父子组件采用：<code>props</code></p><p>兄弟组件采用：消息的发布订阅、redux</p><p>祖孙组件：消息发布订阅、redux、context</p>`,167),e=[p];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const A=s(l,[["render",t]]);export{C as __pageData,A as default};
