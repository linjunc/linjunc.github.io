import{_ as s,c as a,o,V as n}from"./chunks/framework.3d11d069.js";const l="/assets/layout-effect.3d5a09b8.gif",C=JSON.parse('{"title":"useLayoutEffect 源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"pages/react/hard/hooks/uselayouteffect.md","filePath":"pages/react/hard/hooks/uselayouteffect.md","lastUpdated":1690033496000}'),e={name:"pages/react/hard/hooks/uselayouteffect.md"},p=n(`<h1 id="uselayouteffect-源码解析" tabindex="-1">useLayoutEffect 源码解析 <a class="header-anchor" href="#uselayouteffect-源码解析" aria-label="Permalink to &quot;useLayoutEffect 源码解析&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">提示</p><p>useLayoutEffect 在实现上和 <code>useEffect</code> 基本一致，在 <code>mount</code> 和 <code>update</code> 时，调用的都是同一个方法，因此本部分具体讲 <code>useLayoutEffect</code> 在调度上 和 <code>useEffect</code> 有什么不同，以及使用场景</p></div><p><code>useLayoutEffect</code> 和 <code>useEffect</code> 的实现基本一致，不同之处在于 <code>useLayoutEffect</code> 是被<strong>同步执行</strong>的，<code>useEffect</code> 会被 Scheduler <strong>异步调度</strong>，这也是它们最大的不同</p><h2 id="源码解析" tabindex="-1">源码解析 <a class="header-anchor" href="#源码解析" aria-label="Permalink to &quot;源码解析&quot;">​</a></h2><p>由于 <code>useLayoutEffect</code> 是同步执行的，因此不需要像 <code>useEffect</code> 一样去收集 <code>Effect</code> 对象，而是直接通过 <code>updateQueue</code> 去执行。</p><p><code>useLayoutEffect</code> 的<strong>回调函数执行在 Layout 阶段，销毁函数执行在 Mutation 阶段</strong>。</p><p>在 <code>mutation</code> 阶段，调用 <code>commitHookEffectListUnmount</code> 来卸载上一次的 <code>effect</code></p><blockquote><p>值得注意的是 <code>commitHookEffectListUnmount</code> 这个方法在 <code>mutation</code> 阶段会被调用多次，但是需要注意它的参数，只有是 <code>HookLayout</code> 才代表 <code>useLayoutEffect</code></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">commitMutationEffectsOnFiber</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">finishedWork</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FiberRoot</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">lanes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lanes</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alternate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">flags</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">FunctionComponent</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ForwardRef</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MemoComponent</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SimpleMemoComponent</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">recursivelyTraverseMutationEffects</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lanes</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">commitReconciliationEffects</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">commitHookEffectListUnmount</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">HookLayout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">HookHasEffect</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">return</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在 <code>layout</code> 阶段，调用 <code>commitHookEffectListMount</code> 执行 useLayoutEffect 的 回调函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// commitLayoutEffectOnFiber{}</span></span>
<span class="line"><span style="color:#82AAFF;">commitHookLayoutEffects</span><span style="color:#A6ACCD;">(finishedWork</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> HookLayout </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> HookHasEffect)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><code>commitHookLayoutEffects</code> 最后会调用到 <code>commitHookEffectListMount</code>方法，去执行 <code>useLayoutEffect</code> 的回调函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">commitHookEffectListMount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">flags</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HookFlags</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">finishedWork</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateQueue</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionComponentUpdateQueue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">updateQueue</span><span style="color:#F07178;">: </span><span style="color:#A6ACCD;">any</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateQueue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updateQueue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">lastEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">firstEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastEffect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">effect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">firstEffect</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ((</span><span style="color:#A6ACCD;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flags</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flags</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Mount</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">create</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">create</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">destroy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">create</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">effect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">effect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">firstEffect</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">重要提示</p><p>Effect 对象通过 tag 字段区分是 useEffect 还是 useLayoutEffect，<code>HookPassive</code> 为 <code>useEffect</code>，<code>HookLayout</code> 为 <code>useLayoutEffect</code>， <code>HookHasEffect</code> 标记 Effect 的回调和销毁函数需要执行。</p></div><h2 id="理论" tabindex="-1">理论 <a class="header-anchor" href="#理论" aria-label="Permalink to &quot;理论&quot;">​</a></h2><ul><li><code>useLayoutEffect</code> 的 <strong>create</strong> 以及 <strong>destroy</strong>的执行都会阻塞浏览器渲染。当需要操作真实的 DOM 时，需要放在 <code>useLayoutEffect</code> 的回调函数中执行，同时 <code>useLayoutEffect</code> 的回调尽量避免耗时长的任务</li><li><code>useEffect</code> 的 <strong>create</strong> 以及 <strong>destroy</strong> 的执行都不会阻塞浏览器渲染。<code>useEffect</code> 尽量避免操作真实的 DOM，因为 <code>useEffect</code> 的回调函数的执行时机是在浏览器绘制之后执行。如果此时在 <code>useEffect</code> 的回调里又操作真实的 DOM，会导致浏览器回流重绘。同时可以将耗时长的任务放在 <code>useEffect</code> 的回调中执行。</li></ul><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><p>相比 <code>useEffect</code>，<code>useLayoutEffect</code> 无论销毁函数和回调函数的执行时机都要更早一些，且会在 <code>commit</code> 阶段中同步执行。 因此 <code>useLayoutEffect</code> 中适合进行一些可能影响 dom 的操作，因为在其 create 中可以获取到最新的 dom 树且由于此时浏览器未进行绘制（本轮事件循环尚未结束）， 因此不会有中间状态的产生，可以有效的避免闪动问题。因此当业务中出现需要在 effect 中修改视图，且执行的上一帧中视图变更，就可以考虑是否将逻辑放入 <code>useLayoutEffect</code> 中处理。</p><p>当然，<code>useLayoutEffect</code> 的使用也应当是谨慎的。由于 js 线程和渲染进程是互斥的，因此 <code>useLayoutEffects</code> 中不宜加入很耗时的计算，否则会导致浏览器没有时间重绘而阻塞渲染。</p><p>网上找了个对比图，非常明显，useEffect 会闪动一下，就因为引起了页面的重新渲染嘛</p><p><img src="`+l+'" alt="useEffect" data-fancybox="gallery"></p>',21),t=[p];function c(r,y,F,D,f,i){return o(),a("div",null,t)}const A=s(e,[["render",c]]);export{C as __pageData,A as default};
