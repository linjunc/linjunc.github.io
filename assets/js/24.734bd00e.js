(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{443:function(t,s,a){"use strict";a.r(s);var e=a(62),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/diffing.png",alt:"diffing"}})]),t._v(" "),a("blockquote",[a("p",[t._v("📢 大家好，我是小丞同学，一名"),a("font",{attrs:{color:"#2e86de"}},[t._v("准大二的前端爱好者")])],1),t._v(" "),a("p",[t._v("📢 这篇文章将"),a("strong",[t._v("尽力")]),t._v("说明白 "),a("strong",[t._v("diff 算法")])]),t._v(" "),a("p",[t._v("📢 "),a("font",{attrs:{color:"#f368e0"}},[a("strong",[t._v("愿你忠于自己，热爱生活")])])],1)]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("diff 算法是 React 提升渲染性能的一种优化算法，在 React 中有着很重要的地位，也不止于 React ，在 Vue 中也有 diff 算法，似乎没有差别。在最近的 React 学习中，学到了 diff 算法，感觉视频中的内容有点浅，对 diff 算法不够深入，因此想要深入的了解以下 diff 算法。于是在掘金，知乎，CSDN 等平台上，看了大量的博客，都非常地不错，可惜看不明白，wwww。所以这篇文章只是自己对于 diff 算法的一点理解，有什么问题或者错误的地方，大家"),a("strong",[t._v("一定要指出")]),t._v("！")]),t._v(" "),a("h2",{attrs:{id:"什么是虚拟-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是虚拟-dom"}},[t._v("#")]),t._v(" 什么是虚拟 DOM ？")]),t._v(" "),a("p",[t._v("在谈 diff 算法之前，我们需要先了解虚拟 DOM 。它是一种编程概念，在这个概念里，以一种虚拟的表现形式被保存在内存中。在 React 中，render 执行的结果得到的并不是真正的 DOM 节点，而是 JavaScript 对象")]),t._v(" "),a("blockquote",[a("p",[t._v("虚拟 DOM 只保留了真实 DOM 节点的一些"),a("strong",[t._v("基本属性，和节点之间的层次关系")]),t._v("，它相当于建立在 JavaScript 和 DOM 之间的一层“缓存”")])]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("hello world!"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("上面的这段代码会转化可以转化为虚拟 DOM 结构")]),t._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"div"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    props"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        class"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"span"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        props"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("其中对于一个节点必备的三个属性 "),a("code",[t._v("tag，props，children")])]),t._v(" "),a("ul",[a("li",[t._v("tag 指定元素的"),a("strong",[t._v("标签")]),t._v("类型，如“"),a("code",[t._v("li")]),t._v("，"),a("code",[t._v("div")]),t._v("”")]),t._v(" "),a("li",[t._v("props 指定元素身上的属性，如 "),a("code",[t._v("class")]),t._v(" ，"),a("code",[t._v("style")]),t._v("，自定义属性")]),t._v(" "),a("li",[t._v("children 指定元素是否有"),a("strong",[t._v("子节点")]),t._v("，参数以"),a("strong",[t._v("数组")]),t._v("形式传入")])]),t._v(" "),a("p",[t._v("而我们在 render 中编写的 JSX 代码就是一种虚拟 DOM 结构。")]),t._v(" "),a("h2",{attrs:{id:"什么是-diff-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-diff-算法"}},[t._v("#")]),t._v(" 什么是 diff 算法？")]),t._v(" "),a("p",[t._v("其实刚开始学习 React 的时候，很多人可能都听说过 React 很高效，性能很好这类的话语，这其实就是得益于 diff 算法和 Virturl DOM 的完美结合。")]),t._v(" "),a("p",[t._v("单纯的我刚开始会认为")]),t._v(" "),a("blockquote",[a("p",[t._v("React 也只不过是引入了别人的 diff 算法而已，能有多厉害，又不是原创 ？")])]),t._v(" "),a("p",[t._v("但当我查阅了众多资料后，发现被提及最多的是一个 “传统 diff 算法”")]),t._v(" "),a("p",[t._v("其实 React 针对 diff  算法做出的优化，才是我们应当学习的")]),t._v(" "),a("p",[t._v("React 将原先时间复杂度为 O($n^3$) 的传统算法，优化到了 O(n)")]),t._v(" "),a("p",[a("strong",[t._v("大致执行过程图")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210824173128172.png",alt:"image-20210824173128172"}})]),t._v(" "),a("p",[t._v("那 React 是如何实现的呢？")]),t._v(" "),a("h2",{attrs:{id:"三个策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三个策略"}},[t._v("#")]),t._v(" 三个策略")]),t._v(" "),a("p",[t._v("为了将复杂度降到 O(n)，React 基于这三个策略进行了算法优化")]),t._v(" "),a("ol",[a("li",[t._v("Web UI 中 DOM 节点跨层级的"),a("strong",[t._v("移动操作特别少")]),t._v("，可以忽略不计。")]),t._v(" "),a("li",[t._v("拥有相同类的两个组件将会生成"),a("strong",[t._v("相似")]),t._v("的树形结构，拥有不同类的两个组件将会生成"),a("strong",[t._v("不同")]),t._v("的树形结构。")]),t._v(" "),a("li",[t._v("对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。")])]),t._v(" "),a("p",[t._v("针对这三个策略，React 分别对 "),a("code",[t._v("tree diff")]),t._v("、"),a("code",[t._v("component diff")]),t._v(" 以及 "),a("code",[t._v("element diff")]),t._v(" 进行算法优化")]),t._v(" "),a("h3",{attrs:{id:"tree-diff-分层求异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-diff-分层求异"}},[t._v("#")]),t._v(" tree diff 分层求异")]),t._v(" "),a("p",[t._v("首先会将新旧两个 DOM 树，进行比较，这个比较指的是分层比较。又由于 DOM 节点跨层级的移动操作很少，忽略不计。React 通过 updataDepth 对 虚拟 DOM 树进行层级控制，只会对同层节点进行比较，也就是图中只会对相同颜色方框内的 DOM 节点进行比较。例如：")]),t._v(" "),a("p",[t._v("当对比发现节点消失时，则该节点及其子节点都会被完全删除，不会进行更深层次的比较，这样只需要对树进行一次遍历，便能完成整颗 DOM 树的比较")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210824131810813.png",alt:"image-20210824131810813"}})]),t._v(" "),a("p",[t._v("这里还有一个值得关注的地方："),a("strong",[t._v("DOM 节点跨层级移动")])]),t._v(" "),a("p",[t._v("为什么会提出这样的问题呢，在上面的删除原则中，我们发现当节点不存在了就会删除，那我只是给它换位了，它也会删除整个节点及其子节点吗？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210824155347956.png",alt:"image-20210824155347956"}})]),t._v(" "),a("p",[t._v("如图，我们需要实现这样的移动，你可能会以为它会直接这样移动")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E7%AD%96%E7%95%A51.gif",alt:"策略1"}})]),t._v(" "),a("p",[t._v("但是实际情况，并不是这样的。由于 React 只会简单的进行同层级节点位置变化，对于不同层级的节点，只有创建和删除操作，当发现 B 节点消失时，就会销毁 B，当发现 C 节点上多了 B 节点，就会创建 B 以及它的子节点。")]),t._v(" "),a("p",[t._v("因此这样会非常的复杂，所以 React 官方并不建议我们进行 DOM 节点跨级操作")]),t._v(" "),a("h3",{attrs:{id:"component-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#component-diff"}},[t._v("#")]),t._v(" component diff")]),t._v(" "),a("p",[t._v("在组件层面上，也进行了优化")]),t._v(" "),a("ul",[a("li",[t._v("如果是同一类型的组件，则按照原策略继续比较 虚拟 DOM tree")]),t._v(" "),a("li",[t._v("如果不是，则将这个组件记为 "),a("code",[t._v("dirty component")]),t._v(" ，从而替换整个组件下的所有子节点")])]),t._v(" "),a("p",[t._v("同时对于同一类型的组件，有可能其 "),a("code",[t._v("Virtual DOM")]),t._v(" 没有任何变化，如果能够确切的知道这点就可以节省大量的 "),a("code",[t._v("diff")]),t._v(" 运算的时间，因此 "),a("code",[t._v("React")]),t._v(" 允许用户通过 "),a("code",[t._v("shouldComponentUpdate()")]),t._v(" 判断该组件是否需要进行 "),a("code",[t._v("diff")]),t._v(" 算法分析")]),t._v(" "),a("p",[t._v("总的来说，如果两个组件结构相似，但被认定为了不同类型的组件，则不会比较二者的结构，而是直接删除")]),t._v(" "),a("h3",{attrs:{id:"element-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-diff"}},[t._v("#")]),t._v(" element diff")]),t._v(" "),a("p",[t._v("element diff 是专门针对同一层级的所有节点的策略。当节点在同一层级时，diff 提供了 3个节点操作方法：插入，移动，删除")]),t._v(" "),a("p",[t._v("当我们要完成如图所示操作转化时，会有很大的困难，因为在新老节点比较的过程中，发现每个节点都要"),a("strong",[t._v("删除再重新创建")]),t._v("，但是这只是重新排序了而已，对性能极大的不友好。因此 React 中提出了优化策略：")]),t._v(" "),a("p",[t._v("允许添加"),a("strong",[t._v("唯一值 key 来区分节点")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210824163240354.png",alt:"image-20210824163240354"}})]),t._v(" "),a("p",[t._v("引入 key 的优化策略，让性能上有了翻天覆地的变化")]),t._v(" "),a("p",[a("strong",[t._v("那 key 有什么作用呢？")])]),t._v(" "),a("p",[t._v("当同一层级的节点添加了 key 属性后，当位置发生变化时。react diff 进行新旧节点比较，如果发现有相同的 key 就会进行移动操作，而不会删除再创建")]),t._v(" "),a("p",[a("strong",[t._v("那 key 具体是如何起作用的呢？")])]),t._v(" "),a("p",[t._v("首先在 React 中只允许"),a("strong",[t._v("节点右移")])]),t._v(" "),a("p",[t._v("因此对于上图中的转化，只会进行 A，C 的移动")]),t._v(" "),a("p",[t._v("则只需要对移动的节点进行更新渲染，不移动的则不需要更新渲染")]),t._v(" "),a("p",[a("strong",[t._v("为什么不能用 index 作为 key 值呢？")])]),t._v(" "),a("p",[a("code",[t._v("index")]),t._v(" 作为 "),a("code",[t._v("key")]),t._v(" ，如果我们删除了一个节点，那么数组的后一项可能会前移，这个时候移动的节点和删除的节点就是相同的 "),a("code",[t._v("key")]),t._v("  ，在"),a("code",[t._v("react")]),t._v("中，如果 "),a("code",[t._v("key")]),t._v(" 相同，就会视为"),a("strong",[t._v("相同的组件")]),t._v("，但这两个组件是不同的，这样就会出现很麻烦的事情，例如：序号和文本不对应等问题")]),t._v(" "),a("p",[t._v("所以一定要保证 "),a("code",[t._v("key")]),t._v(" 的唯一性")]),t._v(" "),a("h2",{attrs:{id:"建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建议"}},[t._v("#")]),t._v(" 建议")]),t._v(" "),a("p",[t._v("React 已经帮我们做了很多了，剩下的需要我们多加注意，才能有更好的性能")]),t._v(" "),a("p",[t._v("基于三个策略我们需要注意")]),t._v(" "),a("p",[a("strong",[t._v("tree diff 建议")]),t._v("：开发组件时，需要注意保持 DOM 结构稳定")]),t._v(" "),a("p",[a("strong",[t._v("component diff 建议")]),t._v("：使用 "),a("code",[t._v("shouldComponentUpdate()")]),t._v(" 来减少不要的更新")]),t._v(" "),a("p",[a("strong",[t._v("element diff 建议")]),t._v("：减少最后一个节点移动到头部的操作，这样前面的节点都需要移动")]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000016539430",target:"_blank",rel:"noopener noreferrer"}},[t._v("谈谈React中Diff算法的策略及实现"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000011492275",target:"_blank",rel:"noopener noreferrer"}},[t._v("React diff算法"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6967626390380216334#heading-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈react 虚拟dom，diff算法与key机制"),a("OutboundLink")],1)]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("关于手写实现 diff 算法，还有点难度，这事等学完 React 后再说吧")]),t._v(" "),a("blockquote",[a("p",[t._v("非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈")])])])}),[],!1,null,null,null);s.default=n.exports}}]);