(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{438:function(v,_,e){"use strict";e.r(_);var t=e(62),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"【offer-收割计划】你知道为什么-reducer-最好是一个纯函数吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#【offer-收割计划】你知道为什么-reducer-最好是一个纯函数吗"}},[v._v("#")]),v._v(" 【offer 收割计划】你知道为什么 reducer 最好是一个纯函数吗？")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/offer%E6%94%B6%E5%89%B2%E8%AE%A1%E5%88%92-%E7%AC%AC%E4%B8%80%E5%BC%B9.png",alt:"offer收割计划-第一弹"}})]),v._v(" "),e("blockquote",[e("p",[v._v("📢 大家好，我是小丞同学，一名"),e("strong",[v._v("大二的前端爱好者")])]),v._v(" "),e("p",[v._v("📢 这篇文章将来讲讲最近无意中看到的几道面试题，也希望来看看大家的理解~")]),v._v(" "),e("p",[v._v("📢 非常感谢你的阅读，不对的地方欢迎指正 🙏")]),v._v(" "),e("p",[v._v("📢 "),e("strong",[v._v("愿你忠于自己，热爱生活")])])]),v._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),e("p",[v._v("最近看了看了下一些博主的面试文，自己也跟着思考了一下一些题目，发现有很多简单而又重要的知识点有点拿捏不住，因此决定写一个专栏，来记录这些题目，并写上自己的理解，更重要的是，希望有读者能够分享自己的理解，或者在哪些题目遇到了问题，这样我们可以一起关注一下这些题目，大家共同进步！因此希望在读这篇文章的你，可以自己先思考一下，再看看我的理解，这样也能起到对我的文章正确性的检验。")]),v._v(" "),e("ul",[e("li",[v._v("如果文章内容有什么错误的地方，也请大家务必指出！")]),v._v(" "),e("li",[v._v("如果期待本专栏的新文章，也可以评论留言噢！")]),v._v(" "),e("li",[v._v("如果你是同龄人，或者有什么需求，可以添加我的 vx 和我一起探讨！")])]),v._v(" "),e("h2",{attrs:{id:"💡-知识点抢先看"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#💡-知识点抢先看"}},[v._v("#")]),v._v(" 💡 知识点抢先看")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("for...in")]),v._v(" 和 "),e("code",[v._v("for ... of")]),v._v(" 的区别")]),v._v(" "),e("li",[e("code",[v._v("splice")]),v._v(" 和 "),e("code",[v._v("slice")]),v._v(" 的区别")]),v._v(" "),e("li",[e("code",[v._v("includes")]),v._v(" 和  "),e("code",[v._v("indexOf")]),v._v(" 的差异")]),v._v(" "),e("li",[v._v("伪类的作用")]),v._v(" "),e("li",[e("code",[v._v("ajax")]),v._v(" 状态码")]),v._v(" "),e("li",[e("code",[v._v("redux")]),v._v(" 中的 "),e("code",[v._v("reducer")]),v._v(" 为什么最好是一个纯函数？")])]),v._v(" "),e("h2",{attrs:{id:"一、你能说说-for-in-和-for-of-的区别吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、你能说说-for-in-和-for-of-的区别吗"}},[v._v("#")]),v._v(" 一、你能说说 "),e("code",[v._v("for ... in")]),v._v(" 和 "),e("code",[v._v("for ... of")]),v._v(" 的区别吗？")]),v._v(" "),e("p",[v._v("简单来说 "),e("code",[v._v("for...in")]),v._v(" 和 "),e("code",[v._v("for ... of")]),v._v(" 都是用来遍历的，但是"),e("code",[v._v("for ... in")]),v._v(" 遍历的是数组的索引 "),e("strong",[v._v("index")]),v._v("，而 "),e("code",[v._v("for ... of")]),v._v(" 遍历的是数组的元素值 "),e("strong",[v._v("value")])]),v._v(" "),e("p",[e("strong",[v._v("先说说 "),e("code",[v._v("for ...of")])])]),v._v(" "),e("p",[v._v("✅ 它只能遍历部署了 "),e("code",[v._v("iterator")]),v._v(" 接口的数据结构，对象如果不实现 "),e("code",[v._v("iterator")]),v._v(" 接口，也是无法使用 "),e("code",[v._v("for ... of")]),v._v(" 遍历的")]),v._v(" "),e("p",[v._v("✅ "),e("code",[v._v("for ... of")]),v._v(" 不只是可以遍历元素的 "),e("code",[v._v("value")]),v._v(" 值，你也可以通过下面这种方式来遍历出对象的 "),e("code",[v._v("key, value")]),v._v(" 值，但是这样会相对的麻烦一些，因此不推荐 "),e("code",[v._v("for ... of")]),v._v(" 来遍历对象")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125142848377.png",alt:"image-20211125142848377"}})]),v._v(" "),e("p",[v._v("✅ "),e("code",[v._v("for...of")]),v._v(" 更适合遍历数组，并且它只是遍历数组内的元素，不会遍历原型属性以及自身的属性")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125143447722.png",alt:"image-20211125143447722"}})]),v._v(" "),e("p",[e("strong",[v._v("再来看看 "),e("code",[v._v("for ... in")])])]),v._v(" "),e("p",[e("code",[v._v("for ... in")]),v._v(" 更适合遍历对象，在用来遍历数组的时候，由于 "),e("code",[v._v("for ... in")]),v._v(" 的特性会造成一些问题")]),v._v(" "),e("p",[v._v("✅ "),e("code",[v._v("for ... in")]),v._v(" 会遍历出数组的原型对象，以及数组自身的属性，因此下面的 "),e("code",[v._v("index")]),v._v(" 中会打印出 "),e("code",[v._v("a")])]),v._v(" "),e("p",[e("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125144503702.png",alt:"image-20211125144503702"}})]),v._v(" "),e("p",[v._v("✅ 同时值得注意的是，"),e("code",[v._v("for ... in")]),v._v(" 遍历出来的 "),e("code",[v._v("index")]),v._v(" 并不是一个 "),e("code",[v._v("number")]),v._v(" 类型，而是一个 "),e("code",[v._v("string")]),v._v(" 类型，因此在使用 "),e("code",[v._v("index")]),v._v(" 来进行计算的时候需要注意")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125144901645.png",alt:"image-20211125144901645"}})]),v._v(" "),e("p",[v._v("👉 总结以上，"),e("code",[v._v("for ... in")]),v._v(" 和 "),e("code",[v._v("for ... of")]),v._v(" 的区别有以下几点")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("for ... in")]),v._v(" 循环出的是 "),e("code",[v._v("index")]),v._v("，"),e("code",[v._v("for ... of")]),v._v(" 循环出的是 "),e("code",[v._v("value")])]),v._v(" "),e("li",[e("code",[v._v("for ... of")]),v._v(" "),e("strong",[v._v("不能")]),v._v("循环普通对象，需要实现 "),e("code",[v._v("iterator")]),v._v(" 接口")]),v._v(" "),e("li",[e("code",[v._v("for ... of")]),v._v(" "),e("strong",[v._v("不会")]),v._v("遍历原型以及自身的属性，而 "),e("code",[v._v("for ... in")]),v._v(" 会")]),v._v(" "),e("li",[e("code",[v._v("for ... of")]),v._v(" 是 "),e("code",[v._v("ES6")]),v._v(" 的新语法")])]),v._v(" "),e("h2",{attrs:{id:"二、来说说数组里的-slice-和-splice-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、来说说数组里的-slice-和-splice-方法"}},[v._v("#")]),v._v(" 二、来说说数组里的 "),e("code",[v._v("slice")]),v._v(" 和 "),e("code",[v._v("splice")]),v._v(" 方法")]),v._v(" "),e("p",[e("code",[v._v("slice")]),v._v(" 方法主要是用来截取数组以及字符串，它接收两个参数，一个是截取的起始位置，一个是截取的结束位置，同时它会返回截取元素组成的新数组，并且不会改变原数组")]),v._v(" "),e("p",[v._v("可以看到从索引为 "),e("code",[v._v("1")]),v._v(" 的地方截取到索引为 "),e("code",[v._v("3")]),v._v(" 的地方结束，返回的是一个被截取的数组，同时原数组没有被改变")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125151258884.png",alt:"image-20211125151258884"}})]),v._v(" "),e("p",[e("code",[v._v("splice")]),v._v(" 方法主要用来删除数组，并且可以添加数组元素，它接收的第一个参数是起始的索引，第二个参数是删除的个数，后面的参数都是需要添加的元素")]),v._v(" "),e("p",[v._v("第二个参数以后的参数是需要增加的元素，在起始位置插入，可以理解为，删除了一些元素，然后在这里补上一些新的元素，"),e("code",[v._v("splice")]),v._v(" 会改变原数组")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125150954385.png",alt:"image-20211125150954385"}})]),v._v(" "),e("p",[v._v("可以看到从索引为 1 的地方开始（包括 1），开始删除 2 个元素，也就是 "),e("code",[v._v("b，c")]),v._v(" ，随后在这里补上了 2 个元素，同时也可以看出原数组 "),e("code",[v._v("arr")]),v._v(" 被改变了")]),v._v(" "),e("p",[v._v("👉 总结以上：")]),v._v(" "),e("ol",[e("li",[v._v("两者并没有什么直接的关联，"),e("code",[v._v("splice")]),v._v(" 用来增删数组，"),e("code",[v._v("slice")]),v._v(" 用来截取数组或字符串")]),v._v(" "),e("li",[e("code",[v._v("splice")]),v._v(" 会改变原数组，"),e("code",[v._v("slice")]),v._v(" 不会改变原数组")])]),v._v(" "),e("h2",{attrs:{id:"三、为什么有了-indexof-方法-在-es7-中还要新增-includes-方法呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、为什么有了-indexof-方法-在-es7-中还要新增-includes-方法呢"}},[v._v("#")]),v._v(" 三、为什么有了 "),e("code",[v._v("indexOf")]),v._v(" 方法，在 ES7 中还要新增 "),e("code",[v._v("includes")]),v._v(" 方法呢？")]),v._v(" "),e("p",[v._v("在之前的 "),e("code",[v._v("indexOf")]),v._v(" 方法中存在着一些问题，主要是在于 "),e("code",[v._v("NaN")]),v._v(" 的判断上，"),e("code",[v._v("indexOf")]),v._v(" 没有办法去判断数组中是否存在 "),e("code",[v._v("NaN")]),v._v(" 值，当我们需要判断数组中是否存在 "),e("code",[v._v("NaN")]),v._v(" 值的时候，我们需要采用 "),e("code",[v._v("includes")]),v._v(" 来判断")]),v._v(" "),e("p",[v._v("采用 "),e("code",[v._v("indexOf")]),v._v(" 就会出现下面这样的差异")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125152557654.png",alt:"image-20211125152557654"}})]),v._v(" "),e("p",[v._v("同时当数组有空值的时候， "),e("code",[v._v("includes")]),v._v(" 会认为空值为 "),e("code",[v._v("undefined")]),v._v(" ，而 "),e("code",[v._v("indexOf")]),v._v(" 不会，再来看段代码")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125152831294.png",alt:"image-20211125152831294"}})]),v._v(" "),e("p",[v._v("因此，"),e("code",[v._v("includes")]),v._v(" 的出现就是为了解决 "),e("code",[v._v("indexOf")]),v._v(" 遗留的一些问题")]),v._v(" "),e("p",[v._v("👉 总结以上：")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("includes")]),v._v(" 能够判断数组中有无 "),e("code",[v._v("NaN")]),v._v(" 值")]),v._v(" "),e("li",[e("code",[v._v("includes")]),v._v(" 会把空值默认成 "),e("code",[v._v("undefined")])]),v._v(" "),e("li",[v._v("如果想要判断数组中是否存在某个值，可以采用 "),e("code",[v._v("includes")]),v._v(" ，查找数组中某个值的位置可以采用 "),e("code",[v._v("indexOf")])])]),v._v(" "),e("h2",{attrs:{id:"四、伪元素有哪些作用呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、伪元素有哪些作用呢"}},[v._v("#")]),v._v(" 四、伪元素有哪些作用呢？")]),v._v(" "),e("p",[v._v("在谈作用之前，先来区分一下"),e("strong",[v._v("伪元素和伪类")])]),v._v(" "),e("p",[e("strong",[v._v("伪类")]),v._v("：从字面上来看，可以理解为一个 CSS 类，它就是用来选择处于特定状态的元素的选择器，比如处于 "),e("code",[v._v("hover")]),v._v(" 状态的元素，某个 "),e("code",[v._v("class")]),v._v(" 的第几个元素，它和普通的类不一样。此外伪类一般是单冒号，例如 "),e("code",[v._v(":hover")])]),v._v(" "),e("p",[e("strong",[v._v("伪元素")]),v._v("：从字面上看，它是一个假的元素，我也是这么理解的，它类似添加一个新的 "),e("code",[v._v("DOM")]),v._v(" 节点到 "),e("code",[v._v("DOM")]),v._v(" 树上，而不是改变元素的状态。但是这里值得注意的是，这里不是真的添加一个节点，实际上这个元素被创建在文档之外。")]),v._v(" "),e("p",[v._v("为了从写法上区分伪类和位元素，一般伪元素采用双冒号，例如 "),e("code",[v._v("::after")]),v._v(" ，但是对于伪元素来说，单冒号，双冒号都可以，建议规范")]),v._v(" "),e("p",[e("strong",[v._v("回归正题")])]),v._v(" "),e("p",[v._v("伪元素的作用")]),v._v(" "),e("ol",[e("li",[v._v("伪元素能够减少页面中的 "),e("code",[v._v("DOM")]),v._v(" 节点，伪元素不属于 HTML 页面，能够减小 "),e("code",[v._v("JS")]),v._v(" 查找 "),e("code",[v._v("DOM")]),v._v(" 的负担，因此可以说，使用伪元素能够优化性能")]),v._v(" "),e("li",[v._v("伪元素能够用来清除浮动，经典三件套 "),e("code",[v._v("content")]),v._v(" ,"),e("code",[v._v("display")]),v._v(" "),e("code",[v._v("clear")])]),v._v(" "),e("li",[v._v("加快浏览器加载 HTML 文件")])]),v._v(" "),e("h2",{attrs:{id:"五、500-http-状态码是什么异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、500-http-状态码是什么异常"}},[v._v("#")]),v._v(" 五、500 HTTP 状态码是什么异常？")]),v._v(" "),e("p",[v._v("500 是"),e("strong",[v._v("服务器内部错误")])]),v._v(" "),e("p",[v._v("常见的HTTP 状态码")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("code",[v._v("HTTP")]),v._v(" 状态码")]),v._v(" "),e("th",{staticStyle:{"text-align":"center"}},[v._v("means")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("200")]),v._v(" "),e("td",{staticStyle:{"text-align":"center"}},[v._v("服务器"),e("code",[v._v("成功返回")]),v._v("网页")])]),v._v(" "),e("tr",[e("td",[v._v("301")]),v._v(" "),e("td",{staticStyle:{"text-align":"center"}},[v._v("对象"),e("code",[v._v("永久")]),v._v("移动")])]),v._v(" "),e("tr",[e("td",[v._v("302")]),v._v(" "),e("td",{staticStyle:{"text-align":"center"}},[v._v("对象"),e("code",[v._v("临时")]),v._v("移动")])]),v._v(" "),e("tr",[e("td",[v._v("304")]),v._v(" "),e("td",{staticStyle:{"text-align":"center"}},[v._v("请求的网页"),e("code",[v._v("未修改")])])]),v._v(" "),e("tr",[e("td",[v._v("401")]),v._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[v._v("未授权")]),v._v("，请求要求身份验证")])]),v._v(" "),e("tr",[e("td",[v._v("404")]),v._v(" "),e("td",{staticStyle:{"text-align":"center"}},[v._v("请求的"),e("code",[v._v("网页不存在")])])]),v._v(" "),e("tr",[e("td",[v._v("500")]),v._v(" "),e("td",{staticStyle:{"text-align":"center"}},[v._v("服务器"),e("code",[v._v("内部错误")])])]),v._v(" "),e("tr",[e("td",[v._v("503")]),v._v(" "),e("td",{staticStyle:{"text-align":"center"}},[v._v("服务"),e("code",[v._v("不可用")])])])])]),v._v(" "),e("h2",{attrs:{id:"六、redux-中的-reducer-要求是一个纯函数呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、redux-中的-reducer-要求是一个纯函数呢"}},[v._v("#")]),v._v(" 六、"),e("code",[v._v("redux")]),v._v(" 中的 "),e("code",[v._v("reducer")]),v._v(" 要求是一个纯函数呢？")]),v._v(" "),e("p",[v._v("首先如果 "),e("code",[v._v("redux")]),v._v(" 中的 "),e("code",[v._v("reducer")]),v._v(" 如果不是一个 纯函数的话会造成什么后果呢？")]),v._v(" "),e("p",[v._v("如果我们在 "),e("code",[v._v("reducer")]),v._v(" 中，在原来 "),e("code",[v._v("state")]),v._v(" 的基础上进行操作的话，并不会让 "),e("code",[v._v("React")]),v._v(" 组件重新渲染，"),e("strong",[v._v("并不会有任何改变")]),v._v("，这是由于 "),e("code",[v._v("Redux")]),v._v(" 的底层实现决定的")]),v._v(" "),e("p",[v._v("在这里我们看看 "),e("code",[v._v("redux")]),v._v(" 的源码，来看看它到底是什么原因造成的，"),e("code",[v._v("Redux")]),v._v(" 接收一个 "),e("code",[v._v("state")]),v._v(" 对象，然后通过 "),e("code",[v._v("for")]),v._v(" 循环，将 "),e("code",[v._v("state")]),v._v(" 的每一部分传递给对于的 "),e("code",[v._v("reducer")]),v._v(" ，如果发生任何改变， "),e("code",[v._v("reducer")]),v._v(" 将返回一个新的对象，也就是这里的 "),e("code",[v._v("hasChanged")]),v._v(" 判断，我们可以发现，它只是通过了 "),e("code",[v._v("!==")]),v._v(" 来进行判断前后的 "),e("code",[v._v("state")]),v._v(" 是否相等，这是一种浅比较的方法，我的理解就是"),e("strong",[v._v("地址有没有变化")])]),v._v(" "),e("p",[v._v("因此如果我们传入的 "),e("code",[v._v("state")]),v._v(" 是在旧的基础上更改的，那么它的"),e("strong",[v._v("地址是不会发生变化")]),v._v("的，因此是不会通过这层浅比较的，因此 "),e("code",[v._v("hasChanged")]),v._v(" 返回 "),e("code",[v._v("false")]),v._v(" ，"),e("code",[v._v("state")]),v._v(" 没有被更新")]),v._v(" "),e("p",[v._v("那为什么 "),e("code",[v._v("redux")]),v._v(" 要这样设计呢？")]),v._v(" "),e("p",[v._v("如果这里改成深比较不就没有这种问题了吗？")]),v._v(" "),e("p",[v._v("原因是，如果这里采用了深比较的方式，当比较的次数很多时，性能消耗特别大，因此 "),e("code",[v._v("redux")]),v._v(" 对 "),e("code",[v._v("reducer")]),v._v(" 做了一个规定，无论发生什么变化时，都需要返回一个新的对象；没有变化时，返回旧的对象。这样就能继续沿用浅比较的方式，很好的减少了性能的损耗")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125161432173.png",alt:"image-20211125161432173"}})]),v._v(" "),e("p",[v._v("同时在 "),e("code",[v._v("redux")]),v._v(" 的英文官网中给 "),e("code",[v._v("reducers")]),v._v(" 定制了一套规则："),e("a",{attrs:{href:"https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers#rules-of-reducers",target:"_blank",rel:"noopener noreferrer"}},[v._v("对应地址"),e("OutboundLink")],1)]),v._v(" "),e("blockquote",[e("p",[v._v("We said earlier that "),e("strong",[v._v("reducers must always follow some special rules")]),v._v(":")]),v._v(" "),e("ul",[e("li",[v._v("They should only calculate the new state value based on the "),e("code",[v._v("state")]),v._v(" and "),e("code",[v._v("action")]),v._v(" arguments")]),v._v(" "),e("li",[v._v("They are not allowed to modify the existing "),e("code",[v._v("state")]),v._v(". Instead, they must make "),e("em",[v._v("immutable updates")]),v._v(", by copying the existing "),e("code",[v._v("state")]),v._v(" and making changes to the copied values.")]),v._v(" "),e("li",[v._v('They must not do any asynchronous logic or other "side effects"')])]),v._v(" "),e("p",[v._v("蹩脚翻译")]),v._v(" "),e("p",[v._v("我们之前说过，"),e("strong",[v._v("reducer 必须始终遵循一些特殊规则")])]),v._v(" "),e("ul",[e("li",[v._v("它们应该只根据 "),e("code",[v._v("state")]),v._v(" 和 "),e("code",[v._v("action")]),v._v(" 参数计算新的状态值")]),v._v(" "),e("li",[v._v("它们不允许修改当前的 "),e("code",[v._v("state")]),v._v("。相反，它们必须通过复制现在的 "),e("code",[v._v("state")]),v._v("，并对复制的值进行更改来进行 "),e("code",[v._v("state")]),v._v(" 更新")]),v._v(" "),e("li",[v._v("它们不能做任何异步逻辑以及其他”副作用“")])])]),v._v(" "),e("p",[v._v("遵循这些规则的函数也被称为**“纯”函数**，因此 "),e("code",[v._v("reducer")]),v._v(" 需要一个纯函数由此而来")]),v._v(" "),e("p",[v._v("👉 总结以下")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("redux")]),v._v(" 底层采用了浅比较的方式来判断 "),e("code",[v._v("state")]),v._v(" 改变，来优化性能")]),v._v(" "),e("li",[v._v("采用纯函数，保证新旧 "),e("code",[v._v("state")]),v._v(" 不是同一个对象引用")]),v._v(" "),e("li",[v._v("为了保证返回新的 "),e("code",[v._v("state")]),v._v(" 是确定的，不会因为副作用返回不确定的 "),e("code",[v._v("state")])])]),v._v(" "),e("hr"),v._v(" "),e("h2",{attrs:{id:"📖-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#📖-总结"}},[v._v("#")]),v._v(" 📖 总结")]),v._v(" "),e("p",[v._v("通过这几道面试题，我们复习了 "),e("code",[v._v("JavaScript")]),v._v(" 中的循环语句，也区分了 "),e("code",[v._v("splice")]),v._v(" 和 "),e("code",[v._v("slice")]),v._v(" 而又深入理解 "),e("code",[v._v("redux")]),v._v(" 中 "),e("code",[v._v("reducer")]),v._v(" 的工作原理，这对我自己来说提升还是很大的，不知道看到这里的你有没有什么收获呢？可能文中有理解不到位的地方，欢迎在评论区指出，我们一起进步，共同成长！")]),v._v(" "),e("p",[v._v("最后，我是小丞同学，欢迎大家关注本专栏，持续关注最新文章~祝愿大家拿到心仪的 "),e("code",[v._v("offer")])]),v._v(" "),e("blockquote",[e("p",[v._v("最后，可能在很多地方讲诉的不够清晰，请见谅")]),v._v(" "),e("p",[v._v("💌 如果文章有什么错误的地方，或者有什么疑问，欢迎留言，也欢迎私信交流")])])])}),[],!1,null,null,null);_.default=o.exports}}]);