(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{474:function(s,t,a){"use strict";a.r(t);var n=a(62),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("📢 大家好，我是小丞同学，本文主要写 JavaScript 中的 7 种继承方式，深入理解每种方式所存在的问题同时新的方式是如何解决问题的")]),s._v(" "),a("p",[s._v("📢 非常感谢你的阅读，不对的地方欢迎指正 🙏")]),s._v(" "),a("p",[s._v("📢 "),a("font",{attrs:{color:"#e84393"}},[s._v("愿你生活明朗，万物可爱")])],1)]),s._v(" "),a("h2",{attrs:{id:"💌-前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#💌-前言"}},[s._v("#")]),s._v(" 💌 前言")]),s._v(" "),a("p",[s._v("在上一篇文章中我们讲解了原型链的机制以及原型相关的一些属性，而与原型链息息相关的就是继承了，为什么这么说呢？")]),s._v(" "),a("p",[s._v("在《JavaScript 高级程序设计》上，有这么一句话")]),s._v(" "),a("p",[s._v("“实现继承是 "),a("code",[s._v("ECMAScript")]),s._v(" 唯一支持的继承方式，且这主要通过"),a("strong",[s._v("原型链")]),s._v("来实现。”")]),s._v(" "),a("p",[s._v("可想而知，原型链在继承中起着至关重要的主要")]),s._v(" "),a("p",[s._v("在全文开始之前，不妨先来看看本文纲要")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816230355022.png",alt:"image-20210816230355022"}})]),s._v(" "),a("h2",{attrs:{id:"💟息息相关的-6-种继承方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#💟息息相关的-6-种继承方式"}},[s._v("#")]),s._v(" 💟息息相关的 6 种继承方式")]),s._v(" "),a("p",[s._v("在 ES6 到来之前，基于 ES5 实现的继承，在每一代中都优化了上一代带来的问题，这也是 JavaScript 语言中值得我们学习的一点，遇到问题，解决问题，不断优化，接下来我们来看看它们是如何一步步实现的")]),s._v(" "),a("h3",{attrs:{id:"🍏-一、原型链继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🍏-一、原型链继承"}},[s._v("#")]),s._v(" 🍏 一、原型链继承")]),s._v(" "),a("h4",{attrs:{id:"_1-基本思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本思想"}},[s._v("#")]),s._v(" 1. 基本思想")]),s._v(" "),a("blockquote",[a("p",[s._v("原型链继承的基本思想是通过"),a("strong",[s._v("原型")]),s._v("来继承多个引用类型的属性和方法")])]),s._v(" "),a("p",[s._v("实现的"),a("strong",[s._v("基本思路")]),s._v("是利用构造函数实例化对象，通过 "),a("code",[s._v("new")]),s._v(" 关键字，将"),a("strong",[s._v("构造函数的实例对象")]),s._v("作为子类函数的原型对象")]),s._v(" "),a("h4",{attrs:{id:"_2-实现方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现方法"}},[s._v("#")]),s._v(" 2. 实现方法")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义父类函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义父类属性")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'father'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 给父类的原型添加方法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'我是爸爸'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建子类函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实现继承")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印参考")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// Father {name: "father"}')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("我们来解释一下上面的代码，首先定义了一个父函数和子函数，添加了一些属性和方法")]),s._v(" "),a("p",[s._v("而实现继承的关键在于 "),a("code",[s._v("Son.prototype = new Father()")]),s._v(" 。那它怎么理解呢")]),s._v(" "),a("p",[s._v("首先我们需要了解一下 "),a("code",[s._v("new")]),s._v(" 操作符的执行过程")]),s._v(" "),a("ol",[a("li",[s._v("创建一个空对象")]),s._v(" "),a("li",[s._v("继承函数原型，将这个新对象的 "),a("code",[s._v("__proto__")]),s._v(" 属性赋值为构造函数的原型对象")]),s._v(" "),a("li",[s._v("构造函数内部的 "),a("code",[s._v("this")]),s._v(" 指向新对象")]),s._v(" "),a("li",[s._v("执行函数体")]),s._v(" "),a("li",[s._v("返回这个新对象")])]),s._v(" "),a("p",[s._v("明白了 "),a("code",[s._v("new")]),s._v(" 的过程后，我们可以知道当我们在 "),a("code",[s._v("new Father()")]),s._v(" 操作时，这一步将 "),a("code",[s._v("Father")]),s._v(" 构造函数的原型对象打包给了 "),a("code",[s._v("Father")]),s._v(" 的实例对象，也就是 "),a("code",[s._v("father.__proto__ = Father.prototype")]),s._v("，换到这里也就是 "),a("code",[s._v("Son.prototype.__proto__ = Father.prototype")]),s._v("，这样一来也就是"),a("strong",[s._v("将父类的实例对象作为了子类的原型")]),s._v("，这也一来就在子类与父类实现了连接")]),s._v(" "),a("p",[s._v("关键性代码："),a("code",[s._v("son.prototype = new Father()")])]),s._v(" "),a("h4",{attrs:{id:"_3-存在的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-存在的问题"}},[s._v("#")]),s._v(" 3. 存在的问题")]),s._v(" "),a("p",[s._v("通过上面的分析，整体上感觉不出什么问题，但是我们来看一下这个例子")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义父类属性为引用数据类型")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("我们将上面的代码中 "),a("code",[s._v("a")]),s._v(" 的值改成引用数据类型，我们知道对于引用数据类型只会保存对它的引用，也就是内存地址。")]),s._v(" "),a("p",[s._v("我们先创建两个继承这个父类的子类 "),a("code",[s._v("son1 ，son2")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" son1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" son2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("接着我们想向 "),a("code",[s._v("son1")]),s._v(" 中的 "),a("code",[s._v("a")]),s._v(" 数组添加一个值 5 ，我们会这么操作")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("son1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("不用多想"),a("code",[s._v("son1")]),s._v("肯定成功添加了，但是我们再打印一下此时的"),a("code",[s._v("son2")]),s._v("，我们会发现它的 "),a("code",[s._v("a")]),s._v(" 数组也被改变了")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210817083710044.png",alt:"image-20210817083710044"}})]),s._v(" "),a("p",[s._v("而这就是原型链继承方式带来的引用数据类型被子类共享的问题")]),s._v(" "),a("h4",{attrs:{id:"_4-优点与不足"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-优点与不足"}},[s._v("#")]),s._v(" 4. 优点与不足")]),s._v(" "),a("h5",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[s._v("#")]),s._v(" 优点：")]),s._v(" "),a("ul",[a("li",[s._v("父类的方法可以复用")]),s._v(" "),a("li",[s._v("操作简单")])]),s._v(" "),a("h5",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("对于引用数据类型数据会被子类共享，也就是改一个其他都会改")]),s._v(" "),a("li",[s._v("创建子类实例时，无法向父类构造函数传参，不够灵活。")])]),s._v(" "),a("h3",{attrs:{id:"🍉-二、盗用构造函数继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🍉-二、盗用构造函数继承"}},[s._v("#")]),s._v(" 🍉 二、盗用构造函数继承")]),s._v(" "),a("p",[s._v("为了解决原型链继承方式带来的引用值无法共享的问题，从而兴起了一种“盗用构造函数继承”的方式")]),s._v(" "),a("h4",{attrs:{id:"_1-基本思想-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本思想-2"}},[s._v("#")]),s._v(" 1. 基本思想")]),s._v(" "),a("p",[s._v("为了想要实现"),a("strong",[s._v("引用值共享")]),s._v("的问题，我们就不能给子类直接使用原型对象上的引用值。")]),s._v(" "),a("p",[s._v("因此，可以在子类构造函数中调用父类构造函数。")]),s._v(" "),a("p",[s._v("我们从一段简易的代码入手")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果我们将子类的代码改写成这样，会发生什么呢？")]),s._v(" "),a("p",[s._v("当我们通过 "),a("code",[s._v("Son")]),s._v(" 构造函数实例化实例对象时，每个实例对象中变量 "),a("code",[s._v("a")]),s._v(" 都是独立的，属于自身的，当我们修改一个时，不会影响另一个的值")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210817092755942.png",alt:"image-20210817092755942"}})]),s._v(" "),a("p",[s._v("这也就是盗用构造函数继承的原理")]),s._v(" "),a("h4",{attrs:{id:"_2-实现方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现方法-2"}},[s._v("#")]),s._v(" 2. 实现方法")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" son1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" son2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nson1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("son1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" son2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("我们可以看到，在上面的实现方式中，并没有直接采用 "),a("code",[s._v("this.a...")]),s._v(" 而是采用了 "),a("code",[s._v("Father.call(this)")])]),s._v(" "),a("p",[s._v("如果直接采用 "),a("code",[s._v("this.a")]),s._v(" 的话，这还叫做继承吗？是吧")]),s._v(" "),a("p",[s._v("那么采用 "),a("code",[s._v("Father.call(this)")]),s._v(" 又是什么道理呢？")]),s._v(" "),a("p",[s._v("我们原先直接将 "),a("code",[s._v("this.a")]),s._v(" 直接的写在了子类函数里面，这和直接在子类中调用 "),a("code",[s._v("Father")]),s._v(" 方法是类似的，唯一的差别就是 "),a("code",[s._v("this")]),s._v(" 指向问题")]),s._v(" "),a("p",[s._v("如果直接的在子类中调用 "),a("code",[s._v("Father()")]),s._v(" ，那么它的 "),a("code",[s._v("this")]),s._v(" 将指向 "),a("code",[s._v("window")]),s._v(" ，这样就无法将数据绑定到实例身上，因此我们需要改变 "),a("code",[s._v("this")]),s._v(" 的指向，指向当前的子类构造函数")]),s._v(" "),a("p",[s._v("这样一来就能将数据绑定到了每个实例对象身上")]),s._v(" "),a("p",[s._v("同时由于我们的关键语句采用的是 "),a("code",[s._v("call")]),s._v("，因此我们可以给父类构造函数传递参数，实现传递参数")]),s._v(" "),a("h4",{attrs:{id:"_3-存在的问题-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-存在的问题-2"}},[s._v("#")]),s._v(" 3. 存在的问题")]),s._v(" "),a("p",[s._v("从上面的实现代码中，相信大家都能看出来，我有意的忽略了原型的操作，没有在父类构造函数的原型上添加方法，而这个就是这种方法存在的问题")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210817095321861.png",alt:"image-20210817095321861"}})]),s._v(" "),a("p",[s._v("无法在子类上找到 "),a("code",[s._v("say")]),s._v(" 方法")]),s._v(" "),a("h4",{attrs:{id:"_4-优点与不足-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-优点与不足-2"}},[s._v("#")]),s._v(" 4. 优点与不足")]),s._v(" "),a("h5",{attrs:{id:"优点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[s._v("#")]),s._v(" 优点：")]),s._v(" "),a("ul",[a("li",[s._v("解决了无法共享引用值的问题")]),s._v(" "),a("li",[s._v("能够传递参数")])]),s._v(" "),a("h5",{attrs:{id:"缺点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[s._v("#")]),s._v(" 缺点：")]),s._v(" "),a("ul",[a("li",[s._v("只能继承父类的实例属性和方法，不能继承父类的"),a("strong",[s._v("原型")]),s._v("属性和方法")]),s._v(" "),a("li",[s._v("父类方法无法复用。每次实例化子类，都要执行父类函数。重新声明父类所定义的方法，无法复用。")])]),s._v(" "),a("h3",{attrs:{id:"🍊-三、组合继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🍊-三、组合继承"}},[s._v("#")]),s._v(" 🍊 三、组合继承")]),s._v(" "),a("p",[s._v("在前面两种方法中，都存在着一定的缺陷，所以很少会将它们单独使用。为此一种新的继承方式就诞生了：组合继承（伪经典继承），组合继承结合了原型链与盗用构造函数继承的方式，将两者的优点结合在一起。")]),s._v(" "),a("h4",{attrs:{id:"_1-基本思想-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本思想-3"}},[s._v("#")]),s._v(" 1. 基本思想")]),s._v(" "),a("p",[s._v("通过原型链继承方式继承父类原型上的属性和方法，再使用盗用构造函数的方式继承实例上的属性")]),s._v(" "),a("p",[s._v("这样，实现了把方法定义在原型上以实现复用，又保证了让每个实例都有自己的属性")]),s._v(" "),a("h4",{attrs:{id:"_2-实现方法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现方法-3"}},[s._v("#")]),s._v(" 2. 实现方法")]),s._v(" "),a("p",[s._v("将两种方法和并在一起")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" son1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" son2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("其实只是在盗用构造函数的基础上添加了原型链继承的关键性代码")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在上面的代码中，通过盗用构造函数的方法继承了父类实例上的属性 "),a("code",[s._v("a")]),s._v(" ，通过原型链的方式，继承了父类的原型对象")]),s._v(" "),a("p",[s._v("关于具体过程也只是两个的结合，可以翻翻前面的解释")]),s._v(" "),a("h4",{attrs:{id:"_3-存在的问题-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-存在的问题-3"}},[s._v("#")]),s._v(" 3. 存在的问题")]),s._v(" "),a("p",[s._v("首先我们来打印一下 "),a("code",[s._v("son1和son2")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210817114337643.png",alt:"image-20210817114337643"}})]),s._v(" "),a("p",[s._v("输出了这样的结果，我们发现在它的原型对象上也有一个属性 "),a("code",[s._v("a")]),s._v(" ，但是这个似乎是初始值，我们来想一想这是为什么？")]),s._v(" "),a("p",[s._v("我们将 "),a("code",[s._v("Father")]),s._v(" 的实例绑定在了 "),a("code",[s._v("Son")]),s._v(" 的原型上，但是我们又通过盗用构造函数的方法")]),s._v(" "),a("p",[s._v("将 "),a("code",[s._v("Father")]),s._v(" 自身的属性手动添加到了 "),a("code",[s._v("Son")]),s._v(" 的身上，因此在 "),a("code",[s._v("Son")]),s._v(" 实例化出来的对象上，会有一个 "),a("code",[s._v("a")]),s._v(" 属性，原型上也会有一个 "),a("code",[s._v("a")]),s._v(" 属性")]),s._v(" "),a("p",[s._v("那这样会造成什么问题呢？")]),s._v(" "),a("p",[s._v("回答这个问题之前，我们先来数数调用了几次 "),a("code",[s._v("Father")]),s._v(" 构造函数，")]),s._v(" "),a("ol",[a("li",[s._v("在 "),a("code",[s._v("new")]),s._v(" 的时候")]),s._v(" "),a("li",[s._v("在 "),a("code",[s._v("call")]),s._v(" 的时候")])]),s._v(" "),a("p",[s._v("因此一方面会有一定的性能问题，还有一方面就是会出现 2 个属性")]),s._v(" "),a("h4",{attrs:{id:"_4-优点和不足"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-优点和不足"}},[s._v("#")]),s._v(" 4. 优点和不足")]),s._v(" "),a("h5",{attrs:{id:"优点-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-3"}},[s._v("#")]),s._v(" 优点：")]),s._v(" "),a("ul",[a("li",[s._v("解决原型链继承中属性被共享的问题")]),s._v(" "),a("li",[s._v("解决借用构造函数解决不能继承父类原型对象的问题")])]),s._v(" "),a("h5",{attrs:{id:"缺点-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-3"}},[s._v("#")]),s._v(" 缺点：")]),s._v(" "),a("ul",[a("li",[s._v("调用了两次的父类函数，有性能问题")]),s._v(" "),a("li",[s._v("由于两次调用，会造成实例和原型上有相同的属性或方法")])]),s._v(" "),a("h3",{attrs:{id:"🍋-四、原型式继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🍋-四、原型式继承"}},[s._v("#")]),s._v(" 🍋 四、原型式继承")]),s._v(" "),a("p",[s._v("我似乎找不到这种继承方式的存在意义，不知道它解决了组合模式的什么问题？")]),s._v(" "),a("h4",{attrs:{id:"_1-基本思想-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本思想-4"}},[s._v("#")]),s._v(" 1. 基本思想")]),s._v(" "),a("p",[s._v("原型式继承实现的思路是：直接将对象赋值给构造函数的原型")]),s._v(" "),a("h4",{attrs:{id:"_2-实现方法-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现方法-4"}},[s._v("#")]),s._v(" 2. 实现方法")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("obj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将对象赋值给构造函数的原型")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回 new 期间创建的新对象")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这个 "),a("code",[s._v("object")]),s._v(" 函数会创建一个临时构造函数，将传入的对象赋值给构造函数的原型，然后返回这个临时构造函数的实例")]),s._v(" "),a("p",[s._v("那我们怎么用呢")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" student "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" another "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("我们需要先准备好一个父类对象，也就是要被继承的对象，然后作为参数传入"),a("code",[s._v("object")]),s._v("函数，返回的对象就是一个以这个父类对象为原型对象的对象")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210817124252511.png",alt:"image-20210817124252511"}})]),s._v(" "),a("h4",{attrs:{id:"_3-存在的问题-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-存在的问题-4"}},[s._v("#")]),s._v(" 3. 存在的问题")]),s._v(" "),a("p",[s._v("其实它存在的问题和原型链继承的问题相同，属性和方法被共享")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" student "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ljc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" one "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" two "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\none"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aaa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ntwo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'bbb'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("我们分别给"),a("code",[s._v("one,two")]),s._v("对象中的"),a("code",[s._v("name")]),s._v("数组添加属性，再来打印一下"),a("code",[s._v("one.name")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210817125947227.png",alt:"image-20210817125947227"}})]),s._v(" "),a("p",[s._v("这样又造成了被共享的问题")]),s._v(" "),a("h4",{attrs:{id:"_4-优点和不足-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-优点和不足-2"}},[s._v("#")]),s._v(" 4. 优点和不足")]),s._v(" "),a("h5",{attrs:{id:"优点-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-4"}},[s._v("#")]),s._v(" 优点：")]),s._v(" "),a("ul",[a("li",[s._v("兼容性好，简单")]),s._v(" "),a("li",[s._v("不需要单独创建构造函数")])]),s._v(" "),a("h5",{attrs:{id:"缺点-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-4"}},[s._v("#")]),s._v(" 缺点：")]),s._v(" "),a("ul",[a("li",[s._v("多个实例共享被继承的属性，存在被篡改的情况")]),s._v(" "),a("li",[s._v("不能传递参数")])]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("ES5")]),s._v(" 中增加的 "),a("code",[s._v("Object.create()")]),s._v(" 的方法，能够代替上面的 "),a("code",[s._v("object")]),s._v(" 方法。也为原型式继承提供了规范")])]),s._v(" "),a("h3",{attrs:{id:"🍌-五、寄生式继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🍌-五、寄生式继承"}},[s._v("#")]),s._v(" 🍌 五、寄生式继承")]),s._v(" "),a("h4",{attrs:{id:"_1-基本思想-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本思想-5"}},[s._v("#")]),s._v(" 1. 基本思想")]),s._v(" "),a("p",[s._v("创建一个仅用于封装继承过程的函数，该函数在内部已某种方式来增强对象，最后返回对象。")]),s._v(" "),a("p",[s._v("也就是在原型式继承的基础上进行"),a("strong",[s._v("增强对象")]),s._v("。")]),s._v(" "),a("h4",{attrs:{id:"_2-实现方法-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现方法-5"}},[s._v("#")]),s._v(" 2. 实现方法")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createAnother")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("original")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" clone "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("original"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 继承一个对象 返回新函数")]),s._v("\n    clone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("sayHi")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" clone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回这个对象")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("在这段代码中，似乎只是在原有对象的基础上，给对象添加了一个方法，并封装成了一个函数，供我们直接使用")]),s._v(" "),a("h4",{attrs:{id:"_3-优点和不足"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-优点和不足"}},[s._v("#")]),s._v(" 3. 优点和不足")]),s._v(" "),a("h5",{attrs:{id:"优点-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-5"}},[s._v("#")]),s._v(" 优点：")]),s._v(" "),a("ul",[a("li",[s._v("只需要关注对象本身，不在乎类型和构造函数的场景")])]),s._v(" "),a("h5",{attrs:{id:"缺点-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-5"}},[s._v("#")]),s._v(" 缺点：")]),s._v(" "),a("ul",[a("li",[s._v("函数难以重用")]),s._v(" "),a("li",[s._v("多个实例共享被继承的属性，存在被篡改的情况")]),s._v(" "),a("li",[s._v("无法传递参数")])]),s._v(" "),a("h3",{attrs:{id:"🍑-六、寄生式组合继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🍑-六、寄生式组合继承"}},[s._v("#")]),s._v(" 🍑 六、寄生式组合继承")]),s._v(" "),a("p",[s._v("组合继承仍然着效率的问题，最主要的问题是，父类构造函数始终会被调用 2 次")]),s._v(" "),a("h4",{attrs:{id:"_1-基本思想-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本思想-6"}},[s._v("#")]),s._v(" 1. 基本思想")]),s._v(" "),a("p",[s._v("结合组合继承和寄生式继承结合来实现减少对父类的调用次数，从而达到目的")]),s._v(" "),a("h4",{attrs:{id:"_2-实现方法-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现方法-6"}},[s._v("#")]),s._v(" 2. 实现方法")]),s._v(" "),a("p",[s._v("在组合继承的方法中我们 "),a("code",[s._v("call")]),s._v(" 了一次，又 "),a("code",[s._v("new")]),s._v(" 了一次，导致调用了2次父类，而在寄生式继承中，我们可以调用 API 来实现继承父类的原型")]),s._v(" "),a("p",[s._v("我们将两者结合在一起")]),s._v(" "),a("p",[s._v("不再采用 "),a("code",[s._v("new")]),s._v(" 关键字来给改变原型")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Father"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" son1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" son2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("采用 "),a("code",[s._v("Object.create")]),s._v(" 来重写子类的原型，这样就减少了对父类的调用")]),s._v(" "),a("p",[s._v("这时我们在控制台打印 "),a("code",[s._v("son1")]),s._v(" 会发现问题解决了")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210817174003097.png",alt:"image-20210817174003097"}})]),s._v(" "),a("h4",{attrs:{id:"_3-存在的问题-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-存在的问题-5"}},[s._v("#")]),s._v(" 3. 存在的问题")]),s._v(" "),a("p",[s._v("在这种方法中，同样存在着一些问题，当我们的子类原型上有方法时")]),s._v(" "),a("p",[s._v("会因为原型被重写而丢失了这些方法")]),s._v(" "),a("p",[s._v("我们在代码最上方添加上一个 "),a("code",[s._v("sayHi")]),s._v(" 方法")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("sayHi")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210817174246873.png",alt:"image-20210817174246873"}})]),s._v(" "),a("p",[s._v("要想解决这个问题，其实可以在"),a("strong",[s._v("原型被重写之后")]),s._v("再添加子类原型的方法")]),s._v(" "),a("h4",{attrs:{id:"_4-优点和不足-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-优点和不足-3"}},[s._v("#")]),s._v(" 4. 优点和不足")]),s._v(" "),a("h5",{attrs:{id:"优点-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-6"}},[s._v("#")]),s._v(" 优点：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("基本上是最佳的继承方案了，当然还有圣杯继承")])]),s._v(" "),a("li",[a("p",[s._v("只调用了父类构造函数一次，节约了性能。")])]),s._v(" "),a("li",[a("p",[s._v("避免生成了不必要的属性")])])]),s._v(" "),a("h5",{attrs:{id:"缺点-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-6"}},[s._v("#")]),s._v(" 缺点：")]),s._v(" "),a("ul",[a("li",[s._v("子类原型被重写")])]),s._v(" "),a("blockquote",[a("p",[s._v("以上就是介绍的ES5中的6种继承方式")])]),s._v(" "),a("h2",{attrs:{id:"es6-中的继承🎭"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-中的继承🎭"}},[s._v("#")]),s._v(" ES6 中的继承🎭")]),s._v(" "),a("p",[s._v("由于 ES6 之前的继承过于复杂，代码太多，再 ES6 中引入了一种新的继承方式 "),a("code",[s._v("extends")]),s._v(" 继承")]),s._v(" "),a("p",[s._v("采用 "),a("code",[s._v("extends")]),s._v(" 关键字来实现继承")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Son")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Father")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这样就实现了子类继承父类，这里的关键是需要在子类的 "),a("code",[s._v("constructor")]),s._v(" 中添加一个 "),a("code",[s._v("super")]),s._v(" 关键字")]),s._v(" "),a("p",[a("strong",[s._v("需要注意的是")])]),s._v(" "),a("p",[s._v("子类中"),a("code",[s._v("constructor")]),s._v("方法中必须引用"),a("code",[s._v("super")]),s._v("方法，否则新建实例会报错，这是因为子类自己的 "),a("code",[s._v("this")]),s._v(" 对象，必须"),a("strong",[s._v("先通过")]),s._v("父类构造函数完成塑性，得到父类的属性和方法")]),s._v(" "),a("p",[s._v("然后再加上子类自己的属性和方法")]),s._v(" "),a("p",[s._v("如果没有 "),a("code",[s._v("super")]),s._v(" 方法，子类就没有 "),a("code",[s._v("this")]),s._v(" 对象，就会报错")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210817194042644.png",alt:"image-20210817194042644"}})]),s._v(" "),a("p",[s._v("关于 class 的东西还有很多，这里就不多说了")]),s._v(" "),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[s._v("#")]),s._v(" 参考文献")]),s._v(" "),a("p",[s._v("《JavaScript 高级程序设计》")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6844903696111763470#heading-7",target:"_blank",rel:"noopener noreferrer"}},[s._v("《JavaScript常见八种继承方案》"),a("OutboundLink")],1)]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("以上就是关于 JS 实现继承的 7 种方法了，当然还会有一些其他的继承方法，圣杯模式继承，拷贝继承等等一大堆就不多说了")]),s._v(" "),a("blockquote",[a("p",[s._v("以上就是本文的全部内容了，希望你能喜欢💛，有什么问题可以评论区留言噢~")])])])}),[],!1,null,null,null);t.default=e.exports}}]);