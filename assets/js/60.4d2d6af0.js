(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{480:function(s,t,a){"use strict";a.r(t);var n=a(62),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("📢 大家好，我是小丞同学，一名"),a("font",{attrs:{color:"#2e86de"}},[s._v("准大二的前端爱好者")])],1),s._v(" "),a("p",[s._v("📢 这篇文章将带你了解 V8 是如何执行 JS 代码的")]),s._v(" "),a("p",[s._v("📢 "),a("font",{attrs:{color:"#f368e0"}},[a("strong",[s._v("愿你忠于自己，热爱生活")])])],1)]),s._v(" "),a("h2",{attrs:{id:"引言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[s._v("#")]),s._v(" 引言")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210822113055041.png",alt:"image-20210822113055041"}})]),s._v(" "),a("p",[s._v("源代码首先通过解析器解析成 AST ，然后 AST 再通过解释器解释成最终的字节码")]),s._v(" "),a("p",[s._v("下面我们来聊聊解析器解析成 AST 的这个过程")]),s._v(" "),a("p",[s._v("首先我们先了解一下什么是 AST")]),s._v(" "),a("h2",{attrs:{id:"🍉-1-生成-ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🍉-1-生成-ast"}},[s._v("#")]),s._v(" 🍉 1. 生成 AST")]),s._v(" "),a("p",[s._v("AST 中文名叫抽象语法树，它是源代码语法结构的一种抽象表示")]),s._v(" "),a("p",[s._v("它以树状的形式表现编程语言的语法结构，书上的每个节点都表示源代码中的一种结构")]),s._v(" "),a("p",[s._v("下面我们来一个例子看看 "),a("strong",[s._v("AST 是如何产生的")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ljc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("我们定义了一个 "),a("code",[s._v("name")]),s._v(" 变量")]),s._v(" "),a("p",[s._v("解析器第一步要做的就是把这个语句拆分成最小的不可拆分的单元")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210822114441105.png",alt:"image-20210822114441105"}})]),s._v(" "),a("p",[s._v("生成 token 流，即语法单元成的数组")]),s._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Keyword"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"let"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Identifier"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Punctuator"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"="')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"String"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ljc"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Punctuator"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('";"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("第二步就是语法分析")]),s._v(" "),a("p",[s._v("将上一步的 token 数据，转为 AST，得到一个树状结构")]),s._v(" "),a("p",[s._v("因此 AST 也被称为抽象语法树")]),s._v(" "),a("p",[s._v("在生成 AST 的同时，V8 还会生成相关的"),a("strong",[s._v("作用域")]),s._v("，作用域中存放相关变量")]),s._v(" "),a("h2",{attrs:{id:"🍏-2-生成字节码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🍏-2-生成字节码"}},[s._v("#")]),s._v(" 🍏 2. 生成字节码")]),s._v(" "),a("p",[s._v("在有了 AST 和作用域之后，就可以生成字节码了，字节码是介于 AST 和机器码之间的一种代码，"),a("strong",[s._v("可以不需要")]),s._v("将其转换成机器码后再执行，字节码可以理解为是机器码的一种抽象。Ignition 解释器除了可以快速生成没有优化的字节码外，还可以执行部分字节码。")]),s._v(" "),a("p",[s._v("那为什么需要生成字节码呢？直接转换为机器代码不是更好吗？")]),s._v(" "),a("ul",[a("li",[s._v("直接转换会带来内存占用过大的问题，因为如果抽象语法树全部生成机器代码，而机器代码相比于字节码，占用的内存要多的多")])]),s._v(" "),a("p",[s._v("这是网上的一张对比图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210822122453665.png",alt:"image-20210822122453665"}})]),s._v(" "),a("ul",[a("li",[s._v("某些 JavaScript 使用场景使用解释器更为合适，解析成字节码，有些没有必要的代码就可以不生产机器代码，这样可以尽可能的减少占用内存过大的问题")])]),s._v(" "),a("h2",{attrs:{id:"🍒-3-执行代码及优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🍒-3-执行代码及优化"}},[s._v("#")]),s._v(" 🍒 3. 执行代码及优化")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210822135634964.png",alt:"image-20210822135634964"}})]),s._v(" "),a("p",[s._v("在上一步生成的字节码，直接被解释器执行，在代码不断地运行过程中，解释器会收到很多可以用来优化代码的信息，比如变量的类型，哪些函数执行的"),a("strong",[s._v("频率较高")]),s._v("，这些信息会被发生个编译器 "),a("code",[s._v("TruboFan")]),s._v(" ，它会根据这些"),a("strong",[s._v("信息和字节码")]),s._v("来编译出经过优化的机器代码。")]),s._v(" "),a("p",[s._v("运行时几个优化策略")]),s._v(" "),a("ol",[a("li",[s._v("函数只声明"),a("strong",[s._v("未被调用")]),s._v("，不会被解析生成 AST")]),s._v(" "),a("li",[s._v("函数只被调用"),a("strong",[s._v("一次")]),s._v("，字节码会"),a("strong",[s._v("直接")]),s._v("被解释执行")]),s._v(" "),a("li",[s._v("函数被调用"),a("strong",[s._v("多次")]),s._v("，可能会被标记为"),a("strong",[s._v("热点函数")]),s._v("，可能会被编译成机器代码")])]),s._v(" "),a("p",[a("strong",[s._v("关于热点函数")])]),s._v(" "),a("p",[s._v("编译器 "),a("code",[s._v("TurboFan")]),s._v(" 会将这些热点代码编译成更高效的机器代码储存起来，等到下次再执行时，会用现在的机器代码替换原来的字节码进行执行，这样就会大大的提示代码的执行效率。同时当 "),a("code",[s._v("TurboFan")]),s._v(" 判断一段代码不再为热点代码的时候，会执行"),a("strong",[s._v("去优化")]),s._v("的过程，把优化的机器码丢掉，然后执行过程回到"),a("strong",[s._v("解释器")]),s._v("。")]),s._v(" "),a("p",[s._v("有时候解释器收集到的一些信息会是错误的，这就会导致 "),a("code",[s._v("TurboFan")]),s._v(" 生成机器代码后，会被逆向还原成字节码")]),s._v(" "),a("p",[s._v("例如：当我们定义一个 "),a("code",[s._v("sum")]),s._v(" 函数，在后面的多次调用中，它接收的两个参数我们都传的是整形，"),a("code",[s._v("sum")]),s._v(" 函数被识别为热点函数，解释器将收集到的类型信息发送给编译器，编译器生成优化后的机器代码，此时当中的类型被定义为"),a("strong",[s._v("整型")]),s._v("，在下次的调用中，直接执行机器代码。")]),s._v(" "),a("p",[s._v("而如果在下次的调用中，传入的参数是"),a("strong",[s._v("字符串型")]),s._v("，机器代码不知道如何处理，就会返回给解释器解释执行")]),s._v(" "),a("p",[s._v("因此我们尽量"),a("strong",[s._v("不要把一个变量的类型变来变去")]),s._v("，这样会对 V8 引擎带来一些影响，损失一定的性能")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("以上就是 V8 执行 JS 代码的具体流程")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/v8.jpg",alt:"v8"}})]),s._v(" "),a("p",[s._v("在网上看到的一张图（侵删），很形象，excalidraw 上不去，不然我一定自己做了")]),s._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://blog.csdn.net/React_Community/article/details/107344321?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162960012416780357221106%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=162960012416780357221106&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v29_ecpm-6-107344321.first_rank_v2_pc_rank_v29&utm_term=v8%E6%89%A7%E8%A1%8CJS%E4%BB%A3%E7%A0%81&spm=1018.2226.3001.4187",target:"_blank",rel:"noopener noreferrer"}},[s._v("《V8 是如何执行一段 JS 代码的？》"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.bilibili.com/video/BV1zV411z7RX?from=search&seid=11844131633111646720",target:"_blank",rel:"noopener noreferrer"}},[s._v("《【干货】8 分钟带你了解 V8 引擎是如何运行 JS！》"),a("OutboundLink")],1)])]),s._v(" "),a("blockquote",[a("p",[s._v("非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈")])])])}),[],!1,null,null,null);t.default=r.exports}}]);