(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{504:function(t,s,a){"use strict";a.r(s);var n=a(65),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/React%20-%20%E4%BB%A3%E7%90%86.gif",alt:"React - 代理"}})]),t._v(" "),a("blockquote",[a("p",[t._v("📢 大家好，我是小丞同学，一名"),a("font",{attrs:{color:"#2e86de"}},[a("strong",[t._v("准大二的前端爱好者")])])],1),t._v(" "),a("p",[t._v("📢 这篇文章是学习 React 中"),a("strong",[t._v("脚手架配置代理")]),t._v("的学习笔记")]),t._v(" "),a("p",[t._v("📢 非常感谢你的阅读，不对的地方欢迎指正 🙏")]),t._v(" "),a("p",[t._v("📢 "),a("font",{attrs:{color:"#f368e0"}},[a("strong",[t._v("愿你忠于自己，热爱生活")])])],1)]),t._v(" "),a("h1",{attrs:{id:"引言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),a("p",[t._v("React 本身只关注于页面，并不包含发送 Ajax 请求的代码，所以一般都是集成第三方的包，或者自己封装的")]),t._v(" "),a("p",[t._v("自己封装的话，比较麻烦，而且也可能考虑不全")]),t._v(" "),a("p",[t._v("常用的有两个库，一个是JQuery，一个是 axios")]),t._v(" "),a("ol",[a("li",[t._v("JQuery 这个比较重，因为 Ajax 服务也只是它这个库里的一小块功能，它主要做的还是 DOM 操作，而这不利于 React ，不推荐使用")]),t._v(" "),a("li",[t._v("axios 这个就比较轻，而且采用 Promise 风格，代码的逻辑会相对清晰，"),a("strong",[t._v("推荐使用")])])]),t._v(" "),a("p",[t._v("因此我们这里采用 axios 来发送客户端请求")]),t._v(" "),a("p",[t._v("以前，我们在发送请求的时候，经常会遇到一个很重要的问题：跨域！")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210827091119837.png",alt:"image-20210827091119837"}})]),t._v(" "),a("p",[t._v("在我以前的学习中，基本上都需要操作后端服务器代码才能解决跨域的问题，配置请求头，利用 script，这些都需要后端服务器的配合，因此我们前端需要自己解决这个问题的话，就需要这个技术了："),a("strong",[t._v("代理")]),t._v("。")]),t._v(" "),a("p",[t._v("在说代理之前，先谈谈为什么会出现跨域？")]),t._v(" "),a("p",[t._v("这个应该是源于浏览器的同源策略。所谓同源（即指在同一个域）就是两个页面具有相同的协议，主机和端口号， 当一个请求 URL 的"),a("strong",[t._v("协议、域名、端口")]),t._v("三者之间任意一个与当前页面 URL 不同即为跨域 。")]),t._v(" "),a("p",[t._v("也就是说 "),a("code",[t._v("xxx:3000")]),t._v("和 "),a("code",[t._v("xxx:4000")]),t._v(" 会有跨域问题，"),a("code",[t._v("xxx:3000")]),t._v(" 与 "),a("code",[t._v("abc:3000")]),t._v(" 有跨域问题")]),t._v(" "),a("p",[t._v("那接下来我们采用"),a("strong",[t._v("配置代理")]),t._v("的方式去解决这个问题")]),t._v(" "),a("blockquote",[a("p",[t._v("关于跨域的问题解决方案，在之后的文章会有总结 ~")])]),t._v(" "),a("h2",{attrs:{id:"_1-全局代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局代理"}},[t._v("#")]),t._v(" 1. 全局代理")]),t._v(" "),a("p",[t._v("第一种方法，我把它叫做全局代理，因为它直接将代理配置在了配置文件 "),a("code",[t._v("package.json")]),t._v(" 中")]),t._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"proxy"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:5000"')]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "proxy":"请求的地址"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("这样配置代理时，首先会在抓原请求地址上访问，如果访问不到文件，就会转发到这里配置的地址上去请求")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E8%BD%AC%E5%8F%91.png",alt:"转发"}})]),t._v(" "),a("p",[t._v("我们需要做的就是在我们的请求代码中，将请求的地址改到转发的地址，即可")]),t._v(" "),a("p",[t._v("但是这样会有一些问题，它会先向我们请求的地址，也就是这里的 "),a("code",[t._v("3000")]),t._v(" 端口下请求数据，如果在 "),a("code",[t._v("3000")]),t._v(" 端口中存在我们需要访问的文件，会直接返回，"),a("strong",[t._v("不会再去转发")])]),t._v(" "),a("p",[t._v("因此这就会出现问题，同时因为这种方式采用的是全局配置的关系，导致"),a("strong",[t._v("只能转发到一个地址")]),t._v("，不能配置多个代理")]),t._v(" "),a("h2",{attrs:{id:"_2-单独配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-单独配置"}},[t._v("#")]),t._v(" 2. 单独配置")]),t._v(" "),a("p",[t._v("这也是我自己起的名字，这种配置方式，可以给多个请求配置代理，非常不错")]),t._v(" "),a("p",[t._v("它的工作原理和全局配置是一样的，但是写法不同")]),t._v(" "),a("p",[a("strong",[t._v("首先")]),t._v("我们需要在 "),a("code",[t._v("src")]),t._v(" 目录下，创建代理配置文件 "),a("code",[t._v("setupProxy.js")])]),t._v(" "),a("p",[t._v("注意：这个文件只能叫这个名字，脚手架在启动的时候，会自动执行这些文件")]),t._v(" "),a("p",[a("strong",[t._v("第二步")])]),t._v(" "),a("p",[t._v("配置具体的代理规则，我们大致讲讲这些是什么意思")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("首先我们需要引入这个 "),a("code",[t._v("http-proxy-middleware")]),t._v(" 中间件，然后需要导出一个对象，这里建议使用函数，使用对象的话兼容性不大好")])]),t._v(" "),a("li",[a("p",[t._v("然后我们需要在 "),a("code",[t._v("app.use")]),t._v(" 中配置，我们的代理规则，首先 "),a("code",[t._v("proxy")]),t._v("  接收的第一个参数是需要转发的请求，我的理解是一个标志的作用，当有这个标志的时候，预示着我们需要采用代理，例如 "),a("code",[t._v("/api1")]),t._v(" ，我们就需要在我们 "),a("code",[t._v("axios")]),t._v(" 的请求路径中，加上 "),a("code",[t._v("/api1")]),t._v(" ，这样所有添加了 "),a("code",[t._v("/api1")]),t._v(" 前缀的请求都会转发到这")])]),t._v(" "),a("li",[a("p",[t._v("第二个参数接受的是一个对象，用于配置代理。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("target")]),t._v(" 属性用于配置转发目标地址，也就是我们数据的地址")]),t._v(" "),a("li",[a("code",[t._v("changeOrigin")]),t._v(" 属性用于控制服务器收到的请求头中 "),a("code",[t._v("host")]),t._v(" 字段，可以理解为一个伪装效果，为 "),a("code",[t._v("true")]),t._v(" 时，收到的 "),a("code",[t._v("host")]),t._v(" 就为请求数据的地址")]),t._v(" "),a("li",[a("code",[t._v("pathRewrite")]),t._v(" 属性用于去除请求前缀，因为我们通过代理请求时，需要在请求地址前添加一个标志，但是实际的地址是不存在这个标志的，所以我们"),a("strong",[t._v("一定要去除")]),t._v("这个前缀，这里采用的有点类似于正则替换的方式")])])])]),t._v(" "),a("p",[t._v("配置一个代理的完整代码如下")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" proxy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http-proxy-middleware'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("proxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("target")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:5000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//配置转发目标地址")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("changeOrigin")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//控制服务器接收到的请求头中host字段的值")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("pathRewrite")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'^/api1'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//去除请求前缀址(必须配置)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("hr"),t._v(" "),a("p",[t._v("关于脚手架配置代理的内容就到这里啦！")]),t._v(" "),a("blockquote",[a("p",[t._v("非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈")])])])}),[],!1,null,null,null);s.default=e.exports}}]);