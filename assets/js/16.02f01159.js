(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{436:function(_,v,o){"use strict";o.r(v);var t=o(62),s=Object(t.a)({},(function(){var _=this,v=_.$createElement,o=_._self._c||v;return o("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[o("h1",{attrs:{id:"【offer-收割计划】你能说说使用-hooks-的好处吗"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#【offer-收割计划】你能说说使用-hooks-的好处吗"}},[_._v("#")]),_._v(" 【offer 收割计划】你能说说使用 hooks 的好处吗？")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/offer%E6%94%B6%E5%89%B2%E8%AE%A1%E5%88%92-%E7%AC%AC%E4%B8%89%E5%BC%B9.png",alt:"offer收割计划-第三弹"}})]),_._v(" "),o("blockquote",[o("p",[_._v("📢 大家好，我是小丞同学，一名"),o("strong",[_._v("大二的前端爱好者")])]),_._v(" "),o("p",[_._v("📢 这篇文章将来讲讲几道常见的面试题")]),_._v(" "),o("p",[_._v("📢 非常感谢你的阅读，不对的地方欢迎指正 🙏")]),_._v(" "),o("p",[_._v("📢 "),o("strong",[_._v("愿你忠于自己，热爱生活")])])]),_._v(" "),o("h2",{attrs:{id:"💡-知识点抢先看"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#💡-知识点抢先看"}},[_._v("#")]),_._v(" 💡 知识点抢先看")]),_._v(" "),o("ol",[o("li",[o("code",[_._v("link")]),_._v(" 与 "),o("code",[_._v("@import")]),_._v(" 的区别")]),_._v(" "),o("li",[_._v("多种方式实现数组去重")]),_._v(" "),o("li",[_._v("说说你对闭包的了解")]),_._v(" "),o("li",[_._v("JavaScript 中解决跨域问题的方法")]),_._v(" "),o("li",[_._v("Hooks 好处")])]),_._v(" "),o("h2",{attrs:{id:"一、能说说-link-和-import-两种方式引入-css-的区别吗"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#一、能说说-link-和-import-两种方式引入-css-的区别吗"}},[_._v("#")]),_._v(" 一、能说说 link 和 @import 两种方式引入 CSS 的区别吗")]),_._v(" "),o("p",[_._v("在我们刚开始学习前端的时候，我们都是通过 "),o("code",[_._v("link")]),_._v(" 来引入 "),o("code",[_._v("CSS")]),_._v(" 文件，但是后来发现我们也可以通过 "),o("code",[_._v("@import")]),_._v(" 去引入")]),_._v(" "),o("p",[_._v("首先它们在用法上存在着区别")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128212500226.png",alt:"image-20211128212500226"}})]),_._v(" "),o("p",[_._v("从它们的用法上，我们可以很清晰的看出它们之间的区别")]),_._v(" "),o("ol",[o("li",[o("code",[_._v("link")]),_._v(" 是 "),o("code",[_._v("html")]),_._v(" 标签，它不仅可以加载 "),o("code",[_._v("CSS")]),_._v(" 文件，还可以定义 "),o("code",[_._v("rel")]),_._v(" 连接属性等，而 "),o("code",[_._v("@import")]),_._v(" 是 "),o("code",[_._v("CSS")]),_._v(" 的语法，只有导入样式表的作用")]),_._v(" "),o("li",[_._v("浏览器在加载页面时，同步加载 "),o("code",[_._v("link")]),_._v(" 引入的 "),o("code",[_._v("CSS")]),_._v(" 文件，"),o("strong",[_._v("页面加载完成后")]),_._v("，再加载 "),o("code",[_._v("@import")]),_._v(" 引入的 "),o("code",[_._v("CSS")]),_._v(" 样式")]),_._v(" "),o("li",[o("code",[_._v("@import")]),_._v(" 只有 "),o("code",[_._v("IE5")]),_._v(" 以上才能使用，而 "),o("code",[_._v("link")]),_._v(" 的兼容性更好")]),_._v(" "),o("li",[o("code",[_._v("JavaScript")]),_._v(" 只能控制 "),o("code",[_._v("dom")]),_._v(" 改变 "),o("code",[_._v("link")]),_._v(" 的引入的样式，而不能控制 "),o("code",[_._v("@import")]),_._v(" 的样式")]),_._v(" "),o("li",[o("code",[_._v("link")]),_._v(" 的样式权重高于 "),o("code",[_._v("@import")]),_._v(" 的权重")])]),_._v(" "),o("h2",{attrs:{id:"二、实现数组去重你有多少种方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#二、实现数组去重你有多少种方法"}},[_._v("#")]),_._v(" 二、实现数组去重你有多少种方法")]),_._v(" "),o("p",[_._v("数组去重在前端的应用中还是很多的，虽然我现在一时半会想不起来，但是真的很重要")]),_._v(" "),o("p",[_._v("在这里将介绍几种简单一点的去重方法，双循环检验这种就不介绍了")]),_._v(" "),o("p",[o("strong",[_._v("第一种：indexOf 去重")])]),_._v(" "),o("p",[_._v("这个方法的核心在于：利用 "),o("code",[_._v("indexOf")]),_._v(" 来判断这个元素在数组中首次出现的未知下标和当前的下标是否相等，不相等则说明没有有重复的，删除掉")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128214735820.png",alt:"image-20211128214735820"}})]),_._v(" "),o("p",[o("strong",[_._v("第二种：filter")])]),_._v(" "),o("p",[_._v("利用 "),o("code",[_._v("filter")]),_._v(" 来过滤数组")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128215521939.png",alt:"image-20211128215521939"}})]),_._v(" "),o("p",[o("strong",[_._v("第三种：Set")])]),_._v(" "),o("p",[_._v("利用 "),o("code",[_._v("Set")]),_._v(" 集合的独一特性来去重，这个方法就书写起来最方便的")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128215726707.png",alt:"image-20211128215726707"}})]),_._v(" "),o("p",[_._v("去重的方法数不胜数，其他的就不介绍了，平时我用的多的是 "),o("code",[_._v("Set")]),_._v(" 去重")]),_._v(" "),o("h2",{attrs:{id:"三、说说你对闭包的理解"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#三、说说你对闭包的理解"}},[_._v("#")]),_._v(" 三、说说你对闭包的理解")]),_._v(" "),o("p",[_._v("对于闭包这个概念，每个人都会有不一样的理解，我们先看看几本书上的解释")]),_._v(" "),o("blockquote",[o("p",[_._v("闭包是指有权访问另一个函数作用域中的变量的函数；")])]),_._v(" "),o("blockquote",[o("p",[_._v("从技术的角度讲，所有的JavaScript函数都是闭包：它们都是对象，它们都关联到作用域链。")])]),_._v(" "),o("blockquote",[o("p",[_._v("当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。")])]),_._v(" "),o("p",[_._v("以上是三本前端经典书籍的描述，从上面的描述来看，我们总结不出啥来。")]),_._v(" "),o("p",[_._v("谈谈我的理解吧")]),_._v(" "),o("p",[_._v("一个函数，能够记住并访问它范围外的变量，这个函数和这个变量就形成闭包，用个例子来说的话就是：在函数 A 内定义一个变量 B，想在函数 A 外去访问，这时候在函数 A 内定义一个 函数 C ，把 B 作为函数 C 的返回值，然后在函数 A 中返回函数 C")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128221900875.png",alt:"image-20211128221900875"}})]),_._v(" "),o("h2",{attrs:{id:"四、解决跨域问题你能想到几种方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#四、解决跨域问题你能想到几种方法"}},[_._v("#")]),_._v(" 四、解决跨域问题你能想到几种方法？")]),_._v(" "),o("p",[_._v("在前后端交互的过程中，经常会遇到跨域的问题，在我们使用 "),o("code",[_._v("React")]),_._v(" 、"),o("code",[_._v("Vue")]),_._v(" 这些脚手架来搭建项目时，我们可以很方便的通过配置代理来解决跨域的问题，但是在我们初学前端时，这个问题真的是非常棘手的，就我来说，我还没有使用过原生 "),o("code",[_._v("JS")]),_._v(" 来解决过跨域的问题，我想很多人都是这样的，接下来来了解一下如何来解决跨域问题")]),_._v(" "),o("p",[_._v("首先跨域是由于浏览器的同源策略引起的，它是浏览器的安全功能，为了防止 "),o("code",[_._v("XSS")]),_._v("、"),o("code",[_._v("CSRF")]),_._v(" 攻击。所谓的同源指的是 "),o("strong",[_._v("协议、域名、端口")]),_._v("三者的相同，即使"),o("strong",[_._v("两个域名指向同一台服务器")]),_._v("这也属于非同源")]),_._v(" "),o("p",[_._v("首先我们讲讲")]),_._v(" "),o("h3",{attrs:{id:"_1-jsonp-解决跨域"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-jsonp-解决跨域"}},[_._v("#")]),_._v(" 1. "),o("code",[_._v("Jsonp")]),_._v(" 解决跨域")]),_._v(" "),o("p",[_._v("这其实利用的是 "),o("code",[_._v("HTML")]),_._v(" 标签的一个漏洞来解决的")]),_._v(" "),o("p",[_._v("有三个标签是允许跨域加载资源的 "),o("code",[_._v("Img")]),_._v(" 、"),o("code",[_._v("link")]),_._v(" 、"),o("code",[_._v("script")]),_._v(" 标签")]),_._v(" "),o("p",[o("code",[_._v("Jsonp")]),_._v(" 就是利用 "),o("code",[_._v("script")]),_._v(" 标签来跨域加载资源，但是这种方法需要后端服务器的配合才能实现，同时只支持 "),o("code",[_._v("Get")]),_._v(" 请求")]),_._v(" "),o("ol",[o("li",[_._v("首先我们在前端中需要声明一个回调函数")]),_._v(" "),o("li",[_._v("通过 "),o("code",[_._v("params")]),_._v(" 传参的方式，将我们的请求参数拼接在 "),o("code",[_._v("url")]),_._v(" 路径上")]),_._v(" "),o("li",[_._v("将 "),o("code",[_._v("url")]),_._v(" 加到 "),o("code",[_._v("script")]),_._v(" 标签的 "),o("code",[_._v("src")]),_._v(" 属性上")]),_._v(" "),o("li",[_._v("服务器也需要专门针对于这种请求方式进行接收和特殊的处理，才能得到结果")])]),_._v(" "),o("p",[_._v("因此如果纯前端的话，是无法通过 "),o("code",[_._v("Jsonp")]),_._v(" 来解决跨域问题的")]),_._v(" "),o("h3",{attrs:{id:"_2-实现-cors"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现-cors"}},[_._v("#")]),_._v(" 2. 实现 CORS")]),_._v(" "),o("p",[_._v("这种方法是最简单的，只需要后端服务器中配置 "),o("code",[_._v("Access-Control-Allow-Origin")]),_._v(" 就可以开启 "),o("code",[_._v("CORS")]),_._v(" ，可以设置哪些域名可以访问资源，这样就没有前端什么事了，")]),_._v(" "),o("h3",{attrs:{id:"_3-nginx-反向代理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-nginx-反向代理"}},[_._v("#")]),_._v(" 3. Nginx 反向代理")]),_._v(" "),o("p",[_._v("如果是前后端分离的项目，我们可以在前端服务器的 "),o("code",[_._v("Nginx")]),_._v(" 配置中，配置代理")]),_._v(" "),o("p",[_._v("前端先在配置 "),o("code",[_._v("baseUrl")]),_._v(" 时，请求前端服务器，并且添加一个可标识的后缀，例如 "),o("code",[_._v("/api")])]),_._v(" "),o("p",[_._v("在前端服务器上配置")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128224442518.png",alt:"image-20211128224442518"}})]),_._v(" "),o("h3",{attrs:{id:"_4-浏览器开启跨域"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器开启跨域"}},[_._v("#")]),_._v(" 4. 浏览器开启跨域")]),_._v(" "),o("p",[_._v("这种方法还是不建议了，由于跨域问题是浏览器的策略引起的，因此我们可以想办法"),o("strong",[_._v("关闭浏览器跨域的限制")])]),_._v(" "),o("p",[_._v("怎么关闭，自己找找，关了难免会出什么问题，日后可能忘记开回来啥的，不大好")]),_._v(" "),o("hr"),_._v(" "),o("p",[_._v("我能想到的，有了解过的就这些了，还有很多解决跨域的方法，但是我还不是很了解，就不误导大家了")]),_._v(" "),o("h2",{attrs:{id:"五、你能说说使用-hooks-有什么好处吗"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#五、你能说说使用-hooks-有什么好处吗"}},[_._v("#")]),_._v(" 五、你能说说使用 Hooks 有什么好处吗？")]),_._v(" "),o("p",[_._v("首先最明显的好处就是代码写起来更加流畅了，相比于类式组件来说， "),o("code",[_._v("hooks")]),_._v(" 不需要使用像 "),o("code",[_._v("componentWillMount")]),_._v(" 等这类生命周期钩子，代码写起来更加自由了，没有那么多的限制，通过一个 "),o("code",[_._v("useEffect")]),_._v(" hook 就能一次实现 3 个生命周期的功能，这对开发者来说十分的友好。")]),_._v(" "),o("p",[_._v("再从应用上来说，采用 "),o("code",[_._v("hooks")]),_._v(" 不再需要时刻关注 "),o("code",[_._v("this")]),_._v(" 指向的问题，在类式组件中，我们需要时时刻刻地关注着 "),o("code",[_._v("this")]),_._v(" 的指向，生怕哪里指错了导致出了问题")]),_._v(" "),o("p",[o("code",[_._v("hooks")]),_._v(" 最大的好处就是组件的复用，对于每一个使用该组件的地方，就会开辟一个独立的内存空间，就像是在调用函数一样，十分的简单")]),_._v(" "),o("p",[_._v("代码的可读性强，我们不需要专门使用生命周期函数就能实现功能的聚合，更加方便阅读和代码的维护")]),_._v(" "),o("p",[o("code",[_._v("hooks")]),_._v(" 底层实现已经帮助我们优化了很多的代码，我们只需要在使用 "),o("code",[_._v("hooks")]),_._v(" 时，避免组件的重复渲染，适当控制渲染次数即可做到很好的优化，同时 "),o("code",[_._v("hooks")]),_._v(" 也提供了类似于 "),o("code",[_._v("useMemo")]),_._v(" "),o("code",[_._v("useCallback")]),_._v(" 这样的 "),o("code",[_._v("hook")]),_._v(" 来给我们做性能优化")]),_._v(" "),o("p",[_._v("因此我觉得 "),o("code",[_._v("hooks")]),_._v(" 在写法上、可读性上、可复用性、性能上（大部分情况）都优于类式组件")]),_._v(" "),o("hr"),_._v(" "),o("h2",{attrs:{id:"📖-总结"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#📖-总结"}},[_._v("#")]),_._v(" 📖 总结")]),_._v(" "),o("p",[_._v("通过这几道面试题，自己也思考了很多，关于闭包关于 hooks ，都有一个我的认识和理解，每个人的理解各有千秋，也想听听你们的看法~")]),_._v(" "),o("p",[_._v("最后，我是小丞同学，欢迎大家关注本专栏，持续关注最新文章~祝愿大家拿到心仪的 "),o("code",[_._v("offer")])]),_._v(" "),o("blockquote",[o("p",[_._v("最后，可能在很多地方讲诉的不够清晰，请见谅")]),_._v(" "),o("p",[_._v("💌 如果文章有什么错误的地方，或者有什么疑问，欢迎留言，也欢迎私信交流")])])])}),[],!1,null,null,null);v.default=s.exports}}]);