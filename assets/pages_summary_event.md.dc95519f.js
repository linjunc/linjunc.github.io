import{_ as s,c as a,o as n,U as l}from"./chunks/framework.4d5e0f31.js";const e="/assets/event.ba335e7e.png",d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/summary/event.md","lastUpdated":1681435613000}'),p={name:"pages/summary/event.md"},o=l('<p><img src="'+e+`" alt="head" data-fancybox="gallery"></p><p>还记得上一次使用 event 对象是什么场景吗？<br>我猜一定是用来获取 target 或者用来阻止事件冒泡吧</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stopPropagation</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>最近在看了一些代码和文章之后，发现 Event 对象并没有想象的那么简单，当然还是很简单，它还有更多丰富的用法！</p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>Event 对象就是事件对象，它是在事件发生之后产生的，作为参数传给监听函数。它是浏览器原生支持的一个构造函数，所有的事件都是这个对象的实例</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> event </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Event</span><span style="color:#A6ACCD;">(type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span>
<span class="line"></span></code></pre></div><p>Event 构造函数接收两个参数，第一个参数是事件的名称，第二个参数是一个配置对象，主要有三个属性</p><ul><li>bubbles：是否冒泡</li><li>cancelable，事件是否可以被取消，也就是能不能被 <code>preventDefault</code>取消这个事件</li><li>composed，是否会在 DOM 根节点之外触发侦听器</li></ul><p>以上几个属性的默认值都是 false<br>下面就通过<strong>构造函数</strong>的方式创建了一个事件，我们可以用 <code>dispatchEvent</code> 来触发这个事件</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> event </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Event</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">watch</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">bubbles</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">cancelable</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispatchEvent</span><span style="color:#A6ACCD;">(event)</span></span>
<span class="line"></span></code></pre></div><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><h3 id="event-eventphase" tabindex="-1">Event.eventPhase <a class="header-anchor" href="#event-eventphase" aria-label="Permalink to &quot;Event.eventPhase&quot;">​</a></h3><p>Event.eventPhase 属性返回一个整数常量，表示事件<strong>目前所处的阶段</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> phase </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">eventPhase</span></span>
<span class="line"></span></code></pre></div><p>返回值有 4 个状态</p><ul><li>0 事件没有发生</li><li>1 事件处于捕获阶段、</li><li>2 事件到达目标节点</li><li>3 事件处于冒泡阶段</li></ul><h3 id="event-cancelable-event-cancelbubble" tabindex="-1">Event.cancelable &amp; Event.cancelBubble <a class="header-anchor" href="#event-cancelable-event-cancelbubble" aria-label="Permalink to &quot;Event.cancelable &amp; Event.cancelBubble&quot;">​</a></h3><p>Event.cancelable 返回布尔值，表示事件是否可以被取消<br>大多数事件都是可以被取消的，但是使用 Event 构造函数生成的事件，默认是不可以取消的</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> evt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Event</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">evt</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cancelable  </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre></div><p>值得一提的是，当 cancelable 返回 false 时，使用 <code>event.preventDefault()</code> 会没有任何效果<br>Event.cancelBubble 也是返回当前是否阻止冒泡，设置为 true 和执行 stopPropagation 一样</p><h3 id="event-currenttarget-event-target" tabindex="-1">Event.currentTarget &amp; Event.target <a class="header-anchor" href="#event-currenttarget-event-target" aria-label="Permalink to &quot;Event.currentTarget &amp; Event.target&quot;">​</a></h3><p>在事件发生以后，会经过捕获和冒泡两个阶段，依次通过多个 DOM 节点。</p><ul><li>event.target 表示触发事件的那个节点最初发生的节点，不会随事件的传播而变化</li><li>event.currentTarget 表示事件当前正在通过的节点，也就是当前监听函数所在的节点，值会变化</li></ul><blockquote><p>事件传播过程中，不同节点的监听函数内部的Event.target与Event.currentTarget属性的值是不一样的。</p></blockquote><h3 id="event-type" tabindex="-1">Event.type <a class="header-anchor" href="#event-type" aria-label="Permalink to &quot;Event.type&quot;">​</a></h3><p>返回事件的类型，在生成事件的时候就指定的，只读属性</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> event </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Event</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ljc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type </span><span style="color:#676E95;font-style:italic;">// &#39;ljc&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="event-timestamp" tabindex="-1">Event.timeStamp <a class="header-anchor" href="#event-timestamp" aria-label="Permalink to &quot;Event.timeStamp&quot;">​</a></h3><p>返回事件发生的时间戳，相对于页面加载成功开始计算的</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> evt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Event</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ljc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">evt</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">timeStamp </span><span style="color:#676E95;font-style:italic;">// 111.11</span></span>
<span class="line"></span></code></pre></div><p>返回值的精度取决于浏览器的设置<br>我们可以利用这个属性来计算鼠标移动的速度，每秒移动多少的像素</p><h3 id="event-detail" tabindex="-1">Event.detail <a class="header-anchor" href="#event-detail" aria-label="Permalink to &quot;Event.detail&quot;">​</a></h3><p>这个属性是浏览器事件才具有的，返回一个数值。具体和事件类型有关，比如</p><ul><li>点击事件，detail 返回的就是鼠标按下的次数（1表示单击，2表示双击，3表示三击)</li><li>滚轮事件，detail 返回的是滚轮正向滚动的距离，或负向滚动的距离，返回值是 3 的倍数</li></ul><h3 id="event-istrusted" tabindex="-1">Event.isTrusted <a class="header-anchor" href="#event-istrusted" aria-label="Permalink to &quot;Event.isTrusted&quot;">​</a></h3><p>表示当前事件是否为真实用户行为产生，比如 click 事件是用户产生的，会返回 true<br>Event 构造函数生成的事件，会返回 false</p><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="preventdefault-stoppropagation" tabindex="-1">preventDefault &amp; stopPropagation <a class="header-anchor" href="#preventdefault-stoppropagation" aria-label="Permalink to &quot;preventDefault &amp; stopPropagation&quot;">​</a></h3><p>阻止默认事件<br>阻止冒泡</p><h3 id="stopimmediateprapagation" tabindex="-1">stopImmediatePrapagation <a class="header-anchor" href="#stopimmediateprapagation" aria-label="Permalink to &quot;stopImmediatePrapagation&quot;">​</a></h3><p>Event.stopImmediatePropagation 方法<strong>阻止同一个事件的其他监听函数被调用</strong>，不管监听函数定义在当前节点还是其他节点。也就是说，该方法阻止事件的传播，比 Event.stopPropagation() 更彻底。<br>如果同一个节点对于<strong>同一个事件指定了多个监听函数</strong>，这些函数会根据添加的顺序<strong>依次调用</strong>。只要其中有一个监听函数调用了 Event.stopImmediatePropagation 方法，其他的监听函数就不会再执行了。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">l1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stopImmediatePropagation</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">l2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> l1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> l2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上面代码在 el 节点上，为 click 事件添加了两个监听函数 l1 和 l2 。由于 l1 调用了event.stopImmediatePropagation 方法，所以 l2 不会被调用。</p><h3 id="composedpath" tabindex="-1">composedPath <a class="header-anchor" href="#composedpath" aria-label="Permalink to &quot;composedPath&quot;">​</a></h3><p>返回一个数组，成员是事件的最深层节点和依次冒泡经过的所有上层节点</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> div </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">composedPath</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [a, div, body, html, document, window]</span></span>
<span class="line"></span></code></pre></div><p>click 节点的最深处是 a 节点，最上层是 window，因此 path 是从 a 到 window</p><hr><p>以上就是本文的全部内容啦，希望能让你对 Event 对象有更多的认识！</p>`,50),t=[o];function c(r,i,D,y,F,A){return n(),a("div",null,t)}const v=s(p,[["render",c]]);export{d as __pageData,v as default};
