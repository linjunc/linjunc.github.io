import{_ as s,c as a,o as n,U as l}from"./chunks/framework.4d5e0f31.js";const o="/assets/1.f38b4b33.png",e="/assets/2.84dcfeb6.png",p="/assets/3.0b68d92b.png",t="/assets/4.cd402739.png",r="/assets/5.0a8c86db.png",c="/assets/6.6903e7ea.png",i="/assets/7.95130d05.png",y="/assets/8.df666fd6.png",F="/assets/9.140ee577.png",E=JSON.parse('{"title":"React Fiber 架构","description":"","frontmatter":{},"headers":[],"relativePath":"pages/react/hard/constructure.md","lastUpdated":1682694591000}'),D={name:"pages/react/hard/constructure.md"},C=l('<h1 id="react-fiber-架构" tabindex="-1">React Fiber 架构 <a class="header-anchor" href="#react-fiber-架构" aria-label="Permalink to &quot;React Fiber 架构&quot;">​</a></h1><p>在 React 16 版本中采用了<strong>新的 Reconciler</strong> 来实现 异步可中断的更新， Reconciler 内部采用了全新的 Fiber 架构来实现。这节来谈谈 Fiber 架构</p><h2 id="fiber-架构的起源" tabindex="-1">Fiber 架构的起源 <a class="header-anchor" href="#fiber-架构的起源" aria-label="Permalink to &quot;Fiber 架构的起源&quot;">​</a></h2><p>在 React15 及以前，Reconciler 采用<strong>递归</strong>的方式创建虚拟 DOM，递归过程是<strong>不能中断</strong>的。如果组件树的<strong>层级很深</strong>，递归会占用线程很多时间，造成卡顿，因为浏览器所有的时间都交给了 js 执行，并且 js 的执行时单线程的，导致无法在一帧内执行完毕。同时 React 15 采用了调用堆栈的方式，造成了调用栈过深难以执行等问题<br><img src="'+o+'" alt="image.png" data-fancybox="gallery"><br>为了解决这些问题，React 16 就引入了<strong>Scheduler调度器</strong>进行时间片的调度，给每个 task 工作单元分配一定的时间，如果在这个时间内任务没有执行完，也要交出执行权给浏览器进行回流和重绘，因此实现异步可中断的更新需要一定的数据结构在内存中保存工作单元的信息，曾经的虚拟 DOM 数据结构已经无法满足需要，于是有了新的数据结构，也就是 Fiber <br><strong>React Fiber 的目标是提高它在动画、布局和手势等领域的适用性。最重要的功能就是增量渲染：能够将渲染工作分成块，并将其分散到多个帧上</strong><br>其他关键功能有以下</p><ul><li>在新更新到来时<strong>暂停、中止或重用工作的能力</strong></li><li>能够为不同类型的更新分配优先级</li><li>新的并发原语</li></ul><p><strong>React Fiber 是调用堆栈的重新实现，专门用于 React 组件，也就是一种 虚拟堆栈帧，这样的优点是将堆栈帧保存在内存中，并随行所欲的执行他们。</strong><br><img src="'+e+'" alt="image.png" data-fancybox="gallery"></p><h2 id="认识-fiber" tabindex="-1">认识 Fiber <a class="header-anchor" href="#认识-fiber" aria-label="Permalink to &quot;认识 Fiber&quot;">​</a></h2><p>首先需要弄清楚 React.element 、Fiber 和 真实 DOM 节点三者间的关系<br><img src="'+p+`" alt="image.png" data-fancybox="gallery"></p><ul><li>element 是 React 视图层在代码的表象，也就是我们写的 JSX ，这些都会被创建成 element 对象的形式，上面保存了 props、children 等信息</li><li>DOM 就很纯粹了就是浏览器真实渲染的</li><li>Fiber 可以说是 elmenet 和真实 DOM 的桥梁，每一个类型的 element 都会有一个对应类型的 Fiber，element 变化引起更新流程都是通过 Fiber 做一次调和改变，然后通知渲染器形成新的 DOM 渲染</li></ul><p>在 Fiber 结构中 element 和 Fiber 之间的对应关系</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> FunctionComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// 对应函数组件</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ClassComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// 对应的类组件</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> IndeterminateComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 初始化时不知道是函数组件还是类组件 </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> HostRoot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// Root Fiber 可以理解为跟元素</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> HostPortal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">              </span><span style="color:#676E95;font-style:italic;">// 对应  ReactDOM.createPortal 产生的 Portal </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> HostComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;font-style:italic;">// dom 元素 比如 &lt;div&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> HostText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// 文本节点</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Fragment </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// 对应 &lt;React.Fragment&gt; </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Mode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;font-style:italic;">// 对应 &lt;React.StrictMode&gt;   </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ContextConsumer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// 对应 &lt;Context.Consumer&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ContextProvider </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// 对应 &lt;Context.Provider&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ForwardRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">             </span><span style="color:#676E95;font-style:italic;">// 对应 React.ForwardRef</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Profiler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">               </span><span style="color:#676E95;font-style:italic;">// 对应 &lt;Profiler/ &gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SuspenseComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 对应 &lt;Suspense&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MemoComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">14</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// 对应 React.memo 返回的组件</span></span>
<span class="line"></span></code></pre></div><h2 id="fiber-的作用" tabindex="-1">Fiber 的作用 <a class="header-anchor" href="#fiber-的作用" aria-label="Permalink to &quot;Fiber 的作用&quot;">​</a></h2><p>那么有了 Fiber 这种数据结构后，能完成哪些事情呢，</p><ul><li><strong>工作单元 任务分解</strong> ：Fiber 最重要的功能就是<strong>作为工作单元</strong>，保存原生节点或者组件节点对应信息（包括优先级），这些节点通过<strong>链表</strong>的形似形成 Fiber 树</li><li><strong>增量渲染</strong>：通过 jsx 对象和 <code>current Fiber</code> 的对比，生成最小的差异补丁，应用到真实节点上</li><li><strong>根据优先级暂停、继续、排列优先级</strong>：Fiber 节点上保存了<strong>优先级</strong>，能通过不同节点优先级的对比，达到任务的暂停、继续、排列优先级等能力，也为上层实现批量更新、Suspense 提供了基础</li><li><strong>保存状态</strong>：因为 Fiber 能保存状态和更新的信息，所以就能<strong>实现函数组件的状态更新</strong>，也就是 hooks</li></ul><h2 id="fiber-的含义" tabindex="-1">Fiber 的含义 <a class="header-anchor" href="#fiber-的含义" aria-label="Permalink to &quot;Fiber 的含义&quot;">​</a></h2><ol><li>作为架构来说，React15 的 Reconciler 采用递归的方式进行，<strong>数据保存在调用堆栈中</strong>，因此也叫做 <code>stack Reconciler</code>，React16 的 Reconciler 基于 Fiber 节点实现，被称为 <code>Fiber Reconciler</code></li><li>作为静态数据结构来说，每个 Fiber 节点对应一个 React Element，保存该组件的相关信息</li><li>作为动态的工作单元，每个 Fiber 节点保存了本次更新中该组件改变的状态，要执行的工作（effectList）</li></ol><h2 id="fiber-的结构" tabindex="-1">Fiber 的结构 <a class="header-anchor" href="#fiber-的结构" aria-label="Permalink to &quot;Fiber 的结构&quot;">​</a></h2><p>Fiber 是一个 JS 对象，Fiber 的创建是根据 React 元素来创建的，在整个 React 构建的虚拟 DOM 树中，每一个元素都有对应的 Fiber，从而构建一个 Fiber 树，每个 Fiber 不仅仅包含每个元素的信息，还包含更多的信息，以方便 Scheduler 来进行调度<br>我们分成几个部分来看</p><h3 id="静态数据结构的属性" tabindex="-1">静态数据结构的属性 <a class="header-anchor" href="#静态数据结构的属性" aria-label="Permalink to &quot;静态数据结构的属性&quot;">​</a></h3><p><strong>作为一种静态的数据结构，保存了组件相关的信息：</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{|</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 作为静态数据结构的属性</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 标记不同的组件类型</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WorkTag</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ReactElement 里面的key</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 唯一标识，如果出现列表的时候，需要为每一个 item 指定 key</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ReactElement.type，createElement 的第一个参数</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">elementType</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 异步组件resolved之后返回的内容，一般是 function 或者 class</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 当前组件实例的引用,比如浏览器环境就是DOM节点</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">stateNode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">|}</span></span>
<span class="line"></span></code></pre></div><h3 id="用来形成-fiber-树的属性" tabindex="-1">用来形成 Fiber 树的属性 <a class="header-anchor" href="#用来形成-fiber-树的属性" aria-label="Permalink to &quot;用来形成 Fiber 树的属性&quot;">​</a></h3><p>作为架构来说，这些属性用来形成 Fiber Tree</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{|</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 指向他在 Fiber 节点树中的 parent，用来在处理完这个节点之后向上返回</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">return</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 指向自己的第一个子节点</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">child</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 指向自己的兄弟结构</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sibling</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">index</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">|}</span></span>
<span class="line"></span></code></pre></div><p>我们知道了 <code>Fiber</code> 可以保存真实的 DOM ，真实的 DOM 对应在内存中的 Fiber 节点会形成 Fiber 树<br>Fiber 树通过 return、child、slibing 指针形成，连接父子兄弟节点以构成一颗单链表 fiber 树，其扁平化的单链表结构的特点将以往递归遍历改为了<strong>循环遍历</strong>，实现深度优先遍历。<br><img src="`+t+'" alt="image.png" data-fancybox="gallery"><br>同时，这颗由真实DOM 构建成的 Fiber 树也就是 <code>current Fiber Tree</code>，而正在构建的 Fiber 树叫做 <code>WIP Fiber</code>，这两颗树的节点通过 <code>alternate</code> 指针相连，这也是 Fiber 架构的双缓存机制，下面会讲到<br><img src="'+r+`" alt="image.png" data-fancybox="gallery"></p><h3 id="作为动态的工作单元的属性" tabindex="-1">作为动态的工作单元的属性 <a class="header-anchor" href="#作为动态的工作单元的属性" aria-label="Permalink to &quot;作为动态的工作单元的属性&quot;">​</a></h3><p><strong>作为动态的工作单元，Fiber中如下参数保存了本次更新相关的信息，</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{|</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 新的变动带来的新的props</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">pendingProps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 上一次渲染完成之后的props</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">memoizedProps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 该 Fiber 对应的组件产生的 Update 会存放在这个队列里面</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">updateQueue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UpdateQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 上一次渲染的时候的 state</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 用来存放某个组件内所有的 Hook 状态</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">memoizedState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 一个列表，存放这个 Fiber 依赖的 context</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">firstContextDependency</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ContextDependency</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">mixed</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//用来描述fiber是处于何种模式。用二进制位来表示</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TypeOfMode</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">flags</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Flags</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">// fiber 节点包含的副作用标识</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">subtreeFlags</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Flags</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">// 子树包含的副作用标识，避免深度遍历</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">deletions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Fiber</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">// 删除的节点，用于执行 unmount 钩子</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 用来记录Side Effect具体的执行的工作的类型：比如Placement，Update等等</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">effectTag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SideEffectTag</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 单链表用来快速查找下一个 side effect</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">nextEffect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 子树中第一个side effect</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">firstEffect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 子树中最后一个side effect</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">lastEffect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">|}</span></span>
<span class="line"></span></code></pre></div><h3 id="优先级相关的属性" tabindex="-1">优先级相关的属性 <a class="header-anchor" href="#优先级相关的属性" aria-label="Permalink to &quot;优先级相关的属性&quot;">​</a></h3><p>保存调度的优先级相关的信息</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{|</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 调度优先级相关</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">this</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">lanes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> NoLanes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">this</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">childLanes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> NoLanes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">|}</span></span>
<span class="line"></span></code></pre></div><p>React 原先采用的是 <code>expiration</code>的概念，在后来被 <code>lane</code> 模型取代了</p><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ref指向，ref函数，或者ref对象。</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">ref </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//current和workInProgress的指针</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">alternate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span></code></pre></div><h2 id="fiber-的更新机制" tabindex="-1">Fiber 的更新机制 <a class="header-anchor" href="#fiber-的更新机制" aria-label="Permalink to &quot;Fiber 的更新机制&quot;">​</a></h2><p>我们以及知道了 Fiber 有哪些属性，以及 Fiber 之间是如何建立关联的，那么接下来就要看看 Fiber 是如何工作的</p><h3 id="双缓存机制" tabindex="-1">双缓存机制 <a class="header-anchor" href="#双缓存机制" aria-label="Permalink to &quot;双缓存机制&quot;">​</a></h3><p>当我们使用 <code>canvas</code> 绘制动画时，如果上一帧计算量比较大，导致清除上一帧画面到绘制当前帧画面之间有较长间隙，就会出现白屏。<br>为了解决这个问题，<code>canvas</code> <strong>在内存中绘制当前动画，绘制完毕后直接用当前帧替换上一帧画面</strong>，由于省去了两帧替换间的计算时间，不会出现从白屏到出现画面的闪烁情况。<br>这种<strong>在内存中构建并直接替换</strong>的技术叫做<strong>双缓存</strong>。</p><h3 id="双缓存-fiber-树" tabindex="-1">双缓存 Fiber 树 <a class="header-anchor" href="#双缓存-fiber-树" aria-label="Permalink to &quot;双缓存 Fiber 树&quot;">​</a></h3><p>React 也践行了这一理念，在 React 中最多会同时存在两颗 Fiber 树。当前真正显示的一颗 Fiber 树，也叫做 current Fiber Tree，正在内存中构建的 Fiber 树称为 workInProgress Fiber 树<br>current Fiber 和 workInProgress Fiber 通过 alternate 指针相互连接</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">currentFiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alternate </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> workInProgressFiber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">workInProgressFiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alternate </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> currentFiber</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在下一次渲染时，React 会直接复用 workInProgress Fiber 树作为下一次的渲染树，上一次的渲染树又作为缓存树，这样不仅防止只有一棵树容易状态丢失的问题，又加快了 DOM 节点的更新和替换</p><h3 id="mount-时" tabindex="-1">mount 时 <a class="header-anchor" href="#mount-时" aria-label="Permalink to &quot;mount 时&quot;">​</a></h3><h4 id="第一步-创建-fiberroot-和-rootfiber" tabindex="-1">第一步：创建 FiberRoot 和 RootFiber <a class="header-anchor" href="#第一步-创建-fiberroot-和-rootfiber" aria-label="Permalink to &quot;第一步：创建 FiberRoot 和 RootFiber&quot;">​</a></h4><p>首次执行 <code>ReactDOM.render</code> 会创建 <code>fiberRoot</code> 和 <code>rootFiber</code>，<strong>其中 <code>fiberRoot</code></strong> 是整个应用的根节点，<strong><code>rootFiber</code></strong> 是组件树的根节点，一个 React 应用可以有多个 <code>rootFiber</code>，但是只能有一个 <code>fiberRoot</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Index</span><span style="color:#89DDFF;">/&gt;,</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>第一次挂载时，会将 <code>fiberRoot</code> 和 <code>rootFiber</code> 建立起关联，也就是 current 指针</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createFiberRoot</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">containerInfo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">tag</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* 创建一个root */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">FiberRootNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">containerInfo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rootFiber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createHostRootFiber</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rootFiber</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><img src="`+c+`" alt="image.png" data-fancybox="gallery"><br>因为是首屏渲染，页面中还没有挂载任何的 DOM，所以 <code>fiberRoot.current</code> 指向的 rootFiber 没有任何的 子 Fiber 节点</p><h4 id="第二步-workinprogress-和-current" tabindex="-1">第二步：workInProgress 和 current <a class="header-anchor" href="#第二步-workinprogress-和-current" aria-label="Permalink to &quot;第二步：workInProgress 和 current&quot;">​</a></h4><p>接下来进入了 <code>render</code> 阶段，会进入 <code>beginWork</code> 的流程，会根据组件返回的 JSX 在内存中依次创建 Fiber 节点，并连接在一起构建形成 Fiber 树，被称为 <code>workInProgress Fiber</code> 树</p><blockquote><ul><li>workInProgress：正在内存中构建的 Fiber 树称为 <code>workInProgress Fiber</code>树。在一次更新中，所有的更新都是发生在 workInProgress 树上。在一次更新之后，workInProgress 树上的状态是最新的状态，那么它将变成 current 树用于渲染视图。</li><li>current：正在视图层渲染的树叫做 current 树。</li></ul></blockquote><p>在构建 WIP Fiber 树的时候会尝试复用 current Fiber 树，中已有的 Fiber 节点内的属性，也就是 alternate。在首屏渲染中初始化的 rootFiber 是没有 alternate 的，那么会创建一个 Fiber 作为 WIP，会用 alternate 指针将 WIP 和 current 树建立关联</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">currentFiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alternate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> workInProgressFiber</span></span>
<span class="line"><span style="color:#A6ACCD;">workInProgressFiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alternate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> currentFiber</span></span>
<span class="line"></span></code></pre></div><h4 id="第三步-深度调和子节点-渲染视图" tabindex="-1"><img src="`+i+'" alt="image.png" data-fancybox="gallery"><br>第三步：深度调和子节点，渲染视图 <a class="header-anchor" href="#第三步-深度调和子节点-渲染视图" aria-label="Permalink to &quot;![image.png](/img/constructure/7.png)&lt;br /&gt;第三步：深度调和子节点，渲染视图&quot;">​</a></h4><p>接下来会按照上一步的方法，在 WIP 下完成整个 Fiber 的遍历及创建，生成一颗完整的 WIP Tree<br>最后会以 workInProgress 作为最新的渲染树，<strong>fiberRoot 的 current 指针指向 workInProgress 使其变为 current Fiber 树。到此完成初始化流程。</strong><br><img src="'+y+'" alt="image.png" data-fancybox="gallery"></p><h3 id="update-时" tabindex="-1">update 时 <a class="header-anchor" href="#update-时" aria-label="Permalink to &quot;update 时&quot;">​</a></h3><p>接着上面的结构，当我们点击一次按钮触发更新时，首先会创建一颗 <code>workInProgress</code> 树，复用当前 <code>current</code> 树上的 <code>alternate</code> ，作为新的 WIP，由于初始化 <code>rootFiber</code> 有 <code>alternate</code> ，所以对于剩余的子节点，React 还需要创建一份，和 <code>current</code> 树上的 <code>Fiber</code> 建立起 <code>alternate</code>关联。渲染完毕后，<code>workInProgress</code> 再次变成 <code>current</code> 树<br><img src="'+F+'" alt="image.png" data-fancybox="gallery"></p><h3 id="整体更新流程" tabindex="-1">整体更新流程 <a class="header-anchor" href="#整体更新流程" aria-label="Permalink to &quot;整体更新流程&quot;">​</a></h3><ol><li>初始化渲染，根据 React Element 生成对应的 Fiber 树</li><li>进行 setState 等操作，触发更新</li><li>创建 workInProgress 副本，进入 Reconciliation 执行对应的 render 更新。</li><li>记录有副作用的 fiber 节点，放入一个队列</li><li>完成 Reconciliation，进入 Commit 阶段，取出有副作用的 fiber 节点，通过 fiber 节点的 nextEffect 属性访问有副作用的节点，进行更新</li></ol><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://react.iamkasong.com/process/doubleBuffer.html#update%E6%97%B6" target="_blank" rel="noreferrer">React 技术揭秘</a> -- Fiber 架构的工作原理</li><li><a href="https://www.youtube.com/watch?v=ZCuYPiUIONs&amp;t=801s" target="_blank" rel="noreferrer">React Conf 2017</a> -- 关于 Fiber 架构</li></ul>',62),A=[C];function d(b,g,f,u,h,m){return n(),a("div",null,A)}const k=s(D,[["render",d]]);export{E as __pageData,k as default};
