import{_ as e,c as t,o as a,U as i}from"./chunks/framework.4d5e0f31.js";const T=JSON.parse('{"title":"面试被问到的计网","description":"","frontmatter":{},"headers":[],"relativePath":"pages/network/interview-network.md","lastUpdated":1681612715000}'),o={name:"pages/network/interview-network.md"},l=i('<h1 id="面试被问到的计网" tabindex="-1">面试被问到的计网 <a class="header-anchor" href="#面试被问到的计网" aria-label="Permalink to &quot;面试被问到的计网&quot;">​</a></h1><h2 id="前端缓存-如果是你-你会怎么配置各种资源文件的缓存呢" tabindex="-1">前端缓存？如果是你，你会怎么配置各种资源文件的缓存呢？ <a class="header-anchor" href="#前端缓存-如果是你-你会怎么配置各种资源文件的缓存呢" aria-label="Permalink to &quot;前端缓存？如果是你，你会怎么配置各种资源文件的缓存呢？&quot;">​</a></h2><h2 id="tcp-ip-是如何实现可靠传输的-有哪些具体的做法" tabindex="-1">TCP/IP 是如何实现可靠传输的？有哪些具体的做法？ <a class="header-anchor" href="#tcp-ip-是如何实现可靠传输的-有哪些具体的做法" aria-label="Permalink to &quot;TCP/IP 是如何实现可靠传输的？有哪些具体的做法？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>1、应用数据被分割成 TCP 认为最适合发送的数据块。</li><li>2、超时重传：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li><li>3、TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li><li>4、校验和：TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li><li>5、TCP 的接收端会丢弃重复的数据。</li><li>6、流量控制：TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的我数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。</li><li>7、拥塞控制：当网络拥塞时，减少数据的发送。</li></ul></div>',4),r=[l];function s(n,c,_,d,p,h){return a(),t("div",null,r)}const u=e(o,[["render",s]]);export{T as __pageData,u as default};
