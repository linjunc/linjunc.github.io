import{_ as s,c as a,o as n,U as l}from"./chunks/framework.aca69e55.js";const A=JSON.parse('{"title":"【化解数据结构】详解图结构，并实现一个图结构","description":"图结构，你知道是什么吗？在这篇文章我们将详解图结构，通过学习图结构，我们可以解决道路，航班规划等实际问题","frontmatter":{"title":"【化解数据结构】详解图结构，并实现一个图结构","date":"2021-11-02T14:06:40.000Z","id":1635833200,"photos":"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE.png","tags":["数据结构","图"],"categories":["化解数据结构"],"keywords":"数据结构,图,小丞同学","description":"图结构，你知道是什么吗？在这篇文章我们将详解图结构，通过学习图结构，我们可以解决道路，航班规划等实际问题"},"headers":[],"relativePath":"pages/structure/graph.md","lastUpdated":1679675504000}'),o={name:"pages/structure/graph.md"},p=l(`<blockquote><p>📢 大家好，我是小丞同学，一名<strong>大二的前端爱好者</strong></p><p>📢 这篇文章将讲解数据结构中的图</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <strong>愿你忠于自己，热爱生活</strong></p></blockquote><h2 id="💡-知识点抢先看" tabindex="-1">💡 知识点抢先看 <a class="header-anchor" href="#💡-知识点抢先看" aria-label="Permalink to &quot;💡 知识点抢先看&quot;">​</a></h2><ul><li>什么是图结构？</li><li>图结构有什么应用场景？</li><li>图结构有什么方法？</li><li>如何实现一个图结构？</li><li>LeetCode 实战</li></ul><p>📢 碎碎念</p><blockquote><p>太棒了，这篇文章是数据结构部分的最后一篇文章了，敲键盘都累了，呼呼~，图结构是一个我认为非常有意思的结构，它能表示我们生活中很常见的场景，也能解决很多的问题，一起来探寻一下吧</p></blockquote><h2 id="一、什么是图结构" tabindex="-1">一、什么是图结构？ <a class="header-anchor" href="#一、什么是图结构" aria-label="Permalink to &quot;一、什么是图结构？&quot;">​</a></h2><p>图结构是一种<strong>网络结构</strong>的抽象模型，是一组<strong>由边连接而成的节点</strong></p><p>同时图可以表示任何二元关系，比如道路、航班...</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102192517588.png" alt="image-20211102192517588" data-fancybox="gallery"></p><p>那为什么可以表示二元关系呢？</p><ul><li>因为图中的每一条边都是由两个节点相连而成的，因此图可以表示任何二元关系</li></ul><p>在我们生活中，每天使用的微信等社交软件，我们的好友关系网也能被形象成一种图结构，如图，图能表示各种丰富的关系结构</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102192828986.png" alt="image-20211102192828986" data-fancybox="gallery"></p><p>在 <code>JS</code> 中没有图结构，我们可以用<strong>对象或者数组</strong>来构建一个图结构</p><p>如此抽象的图结构，我们该如何来表示它们呢，我们这里会讲到 3 中方法</p><ul><li>邻接矩阵</li><li>邻接表</li><li>关联矩阵</li></ul><h2 id="二、图的相关术语" tabindex="-1">二、图的相关术语 <a class="header-anchor" href="#二、图的相关术语" aria-label="Permalink to &quot;二、图的相关术语&quot;">​</a></h2><p>一个图由 <code>G = (V,E)</code> 组成，<code>V</code> 表示一组顶点， <code>E</code> 表示一组边，连接 <code>V</code> 中的顶点</p><p>就例如，下面这个图结构，<code>key</code> 表示顶点，<code>value</code> 表示与这个顶点相连的节点</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> graph </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>术语</th><th>含义</th></tr></thead><tbody><tr><td>顶点</td><td>图的基本单元，也就是图中的节点</td></tr><tr><td>边</td><td>顶点之间的关联关系，被称为边</td></tr><tr><td>相邻顶点</td><td>由一条边连接在一起的顶点</td></tr><tr><td>度</td><td>一个顶点包含的相邻顶点的数量</td></tr></tbody></table><p>如何来理解这些术语呢？我们来结合图结构解释一下</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102201009820.png" alt="image-20211102201009820" data-fancybox="gallery"></p><p>还是这个图，我们对节点 <code>A</code> 分析一下</p><ul><li><code>A</code>节点和 <code>B</code> 节点相邻，<code>A</code> 和 <code>D</code> 是相邻的，<code>A</code> 和 <code>C</code> 是相邻的，<code>A</code> 和 <code>E</code> 不是相邻的，因此 <code>A</code> 节点和 <code>B,C,D</code> 是相邻节点</li><li>图中的每一个节点都能作为顶点存在</li><li><code>A</code> 节点的度，由于 <code>A</code> 与其他三个节点相连，因此 <code>A</code> 节点的度为 <code>3</code> ，图中的 <code>D</code> 节点和其他 <code>4</code> 个节点相连，因此它的度为 <code>4</code></li><li>可以看到图中 <code>CDG</code> 形成了一个环，因此这个图也称为有环的</li><li>如果图中每两个顶点间存在路径，则图是连通的</li></ul><h3 id="有向图" tabindex="-1">有向图 <a class="header-anchor" href="#有向图" aria-label="Permalink to &quot;有向图&quot;">​</a></h3><p>图中节点之间边线是单向的</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102201858038.png" alt="image-20211102201858038" data-fancybox="gallery"></p><h3 id="无向图" tabindex="-1">无向图 <a class="header-anchor" href="#无向图" aria-label="Permalink to &quot;无向图&quot;">​</a></h3><p>图中节点之间的边线是双向的，或者没有方向，称为无向图</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102202015298.png" alt="image-20211102202015298" data-fancybox="gallery"></p><h2 id="三、如何表示一个图" tabindex="-1">三、如何表示一个图？ <a class="header-anchor" href="#三、如何表示一个图" aria-label="Permalink to &quot;三、如何表示一个图？&quot;">​</a></h2><p>图的表示有很多种方法，不存在绝对的方法，需要根据待解决的问题来确定图的类型</p><h3 id="_1-邻接矩阵" tabindex="-1">1. 邻接矩阵 <a class="header-anchor" href="#_1-邻接矩阵" aria-label="Permalink to &quot;1. 邻接矩阵&quot;">​</a></h3><p>我们可以采用一个二维数组来确定顶点间的连接关系，如果 <code>A</code> 能连接到 <code>B</code> 那么我们就置为 <code>1</code> ，如果连不到就是 <code>0</code></p><p>如图 <code>A</code> 连接 <code>B</code> 节点，因此 第一行第二列为 <code>1</code>，表示 <code>A</code> 连接 <code>B</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102203156931.png" alt="image-20211102203156931" data-fancybox="gallery"></p><h3 id="_2-邻接表" tabindex="-1">2. 邻接表 <a class="header-anchor" href="#_2-邻接表" aria-label="Permalink to &quot;2. 邻接表&quot;">​</a></h3><p>采用邻接表来表示一个图更形象更容易理解</p><p>它直接就表示哪个顶点和哪个顶点连接，十分清晰</p><p>如图 <code>B</code> 节点连接 <code>C,D</code> 节点，<code>C</code>节点连接 <code>E</code> 节点，十分的方便，推荐使用</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102203755850.png" alt="image-20211102203755850" data-fancybox="gallery"></p><h2 id="四、图的操作" tabindex="-1">四、图的操作 <a class="header-anchor" href="#四、图的操作" aria-label="Permalink to &quot;四、图的操作&quot;">​</a></h2><p>接下来的操作基于这个图结构来进行，这是用一个邻接表来表示的一个图结构</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> graph </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_1-深度优先遍历-dfs" tabindex="-1">1. 深度优先遍历（DFS） <a class="header-anchor" href="#_1-深度优先遍历-dfs" aria-label="Permalink to &quot;1. 深度优先遍历（DFS）&quot;">​</a></h3><p>尽可能深的搜索图的分支，类似于树的前序遍历</p><ul><li>先访问根节点</li><li>对根节点的<strong>没访问过的相邻节点</strong>挨个进行深度优先遍历</li></ul><p><strong>代码实现</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 记录访问过的节点</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> visited </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 深度优先遍历</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dfs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">visited</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取所有相邻节点</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">graph</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果没有访问过</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">visited</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">dfs</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 根节点</span></span>
<span class="line"><span style="color:#82AAFF;">dfs</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"></span></code></pre></div><p>输出结果 ：<code>2 0 1 3</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/%E5%9B%BE-1-%E5%8A%A8%E5%9B%BE.gif" alt="图-1-动图" data-fancybox="gallery"></p><h3 id="_2-广度优先遍历-bfs" tabindex="-1">2. 广度优先遍历（BFS） <a class="header-anchor" href="#_2-广度优先遍历-bfs" aria-label="Permalink to &quot;2. 广度优先遍历（BFS）&quot;">​</a></h3><p>先访问离根节点<strong>最近</strong>的节点，类似于树的层序遍历</p><p>遍历的方法</p><ol><li>新建一个队列，把根节点入队并访问</li><li>把对头没有访问过的相邻节点入队</li><li>重复，直至队列为空</li></ol><p>代码实现</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 广度优先遍历</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bfs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">visited</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">visited</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">q</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">q</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">q</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">graph</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">visited</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">q</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">visited</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>输出结果：<code>2 0 3 1</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/%E5%9B%BE-%E5%B9%BF%E5%BA%A6-%E5%8A%A8%E5%9B%BE.gif" alt="图-广度-动图" data-fancybox="gallery"></p><p>还有很多类似于最短路径、拓扑排序、关键路径等问题，难度有点大，就不讨论了有兴趣的自己去研究吧~</p><h2 id="五、图结构有哪些方法" tabindex="-1">五、图结构有哪些方法？ <a class="header-anchor" href="#五、图结构有哪些方法" aria-label="Permalink to &quot;五、图结构有哪些方法？&quot;">​</a></h2><p>根据上面的介绍，我们对图结构有了一定的了解，接下来我们封装一个图结构，首先，先了解图结构有哪些方法</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>addVertex(value)</code></td><td>向图中添加一个顶点</td></tr><tr><td><code>addEdge(a,b)</code></td><td>向图中添加两点之间的边</td></tr><tr><td><code>getVertices()</code></td><td>返回图的顶点列表</td></tr><tr><td><code>toString()</code></td><td>以字符串的形式输出</td></tr></tbody></table><h2 id="六、手写实现无向图结构" tabindex="-1">六、手写实现无向图结构 <a class="header-anchor" href="#六、手写实现无向图结构" aria-label="Permalink to &quot;六、手写实现无向图结构&quot;">​</a></h2><h3 id="_1-创建-graph-类" tabindex="-1">1. 创建 Graph 类 <a class="header-anchor" href="#_1-创建-graph-类" aria-label="Permalink to &quot;1. 创建 Graph 类&quot;">​</a></h3><p>首先我们需要创建一个 <code>Graph</code> 构造函数，用来存放图中的属性和方法</p><p>在这里我们添加了两个属性，一个 <code>vertices</code> 用来保存顶点， <code>edgs</code> 表示邻接表</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Graph</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vertices</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [] </span><span style="color:#676E95;font-style:italic;">// 保存顶点</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">edges</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [] </span><span style="color:#676E95;font-style:italic;">// 保存边，相当于邻接表</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-实现-addvertex-方法" tabindex="-1">2. 实现 addVertex 方法 <a class="header-anchor" href="#_2-实现-addvertex-方法" aria-label="Permalink to &quot;2. 实现 addVertex 方法&quot;">​</a></h3><p>添加这个顶点，我们先判断一下图中有没有这个顶点，有的话我们就不添加了，没有的话，添加到顶点列表中，同时添加到邻接表中来建立边关系</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">addVertex</span><span style="color:#A6ACCD;">(value) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果没有这个顶点</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!this.</span><span style="color:#A6ACCD;">vertices</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vertices</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 添加到顶点列表中</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">edges</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []    </span><span style="color:#676E95;font-style:italic;">// 添加到邻接表中</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-实现-addedge-方法" tabindex="-1">3. 实现 addEdge 方法 <a class="header-anchor" href="#_3-实现-addedge-方法" aria-label="Permalink to &quot;3. 实现 addEdge 方法&quot;">​</a></h3><p>我们通过这个方法来建立边连接的关系，接收两个参数，表示需要进行连接的两个节点，当这两个节点都存在，并且没有进行连接时，我们再进行邻接表的修改操作，具体实现就是，将 <code>a</code> 放到 <code>b</code> 的连接数组中，<code>b</code> 放到 <code>a</code> 的连接数组中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">addEdge</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vertices</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vertices</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!this.</span><span style="color:#A6ACCD;">edges</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">edges</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">edges</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-实现-getvertices-方法" tabindex="-1">4. 实现 getVertices 方法 <a class="header-anchor" href="#_4-实现-getvertices-方法" aria-label="Permalink to &quot;4. 实现 getVertices 方法&quot;">​</a></h3><p>只需要返回我们的顶点数组即可</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">getVertices</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vertices</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_5-实现-tostring-方法" tabindex="-1">5. 实现 toString 方法 <a class="header-anchor" href="#_5-实现-tostring-方法" aria-label="Permalink to &quot;5. 实现 toString 方法&quot;">​</a></h3><p>实现这个方法的关键在于，理清每一个层级之间的关系</p><blockquote><p>采用数组来实现邻接表，会造成遍历是时间复杂度变高，个人认为后期可以采用 <code>map</code> 或者 <code>set</code> 类进行实现</p></blockquote><p>实现思路</p><ul><li>先遍历顶点列表</li><li>在邻接表中找到顶点列表对应的对象</li><li>拼接字符串，实现输出</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 遍历图的顶点列表</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vertices</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 采用模板字符串进行拼接</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vertices[i]</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> -&gt; </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取顶点对应的邻接表数组</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">neighbors</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">edges</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vertices</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]]</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//遍历该邻接表数组，解构数组成字符串</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">neighbors</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">neighbors[j]</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 每一个顶点单独成行</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这样一个简单的图结构，我们就实现了</p><h3 id="_6-演示" tabindex="-1">6. 演示 <a class="header-anchor" href="#_6-演示" aria-label="Permalink to &quot;6. 演示&quot;">​</a></h3><p>基于上面的代码我们进行操作演示</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> graph </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Graph</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addVertex</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addVertex</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addVertex</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addVertex</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEdge</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEdge</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEdge</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEdge</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>输出结果战术</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102214518613.png" alt="image-20211102214518613" data-fancybox="gallery"></p><p>符合我们的预期，完成封装</p><h2 id="七、leetcode-实战" tabindex="-1">七、LeetCode 实战 <a class="header-anchor" href="#七、leetcode-实战" aria-label="Permalink to &quot;七、LeetCode 实战&quot;">​</a></h2><p>推荐几道 <code>LeetCode</code> 中关于图结构的题目</p><h4 id="_65-有效数字" tabindex="-1"><a href="https://leetcode-cn.com/problems/valid-number/" target="_blank" rel="noreferrer">65. 有效数字</a> <a class="header-anchor" href="#_65-有效数字" aria-label="Permalink to &quot;[65. 有效数字](https://leetcode-cn.com/problems/valid-number/)&quot;">​</a></h4><h4 id="_417-太平洋大西洋水流问题" tabindex="-1"><a href="https://leetcode-cn.com/problems/pacific-atlantic-water-flow/" target="_blank" rel="noreferrer">417. 太平洋大西洋水流问题</a> <a class="header-anchor" href="#_417-太平洋大西洋水流问题" aria-label="Permalink to &quot;[417. 太平洋大西洋水流问题](https://leetcode-cn.com/problems/pacific-atlantic-water-flow/)&quot;">​</a></h4><h4 id="_133-克隆图" tabindex="-1"><a href="https://leetcode-cn.com/problems/clone-graph/" target="_blank" rel="noreferrer">133. 克隆图</a> <a class="header-anchor" href="#_133-克隆图" aria-label="Permalink to &quot;[133. 克隆图](https://leetcode-cn.com/problems/clone-graph/)&quot;">​</a></h4><h4 id="_207-课程表" tabindex="-1"><a href="https://leetcode-cn.com/problems/course-schedule/" target="_blank" rel="noreferrer">207. 课程表</a> <a class="header-anchor" href="#_207-课程表" aria-label="Permalink to &quot;[207. 课程表](https://leetcode-cn.com/problems/course-schedule/)&quot;">​</a></h4><h4 id="_997-找到小镇的法官" tabindex="-1"><a href="https://leetcode-cn.com/problems/find-the-town-judge/" target="_blank" rel="noreferrer">997. 找到小镇的法官</a> <a class="header-anchor" href="#_997-找到小镇的法官" aria-label="Permalink to &quot;[997. 找到小镇的法官](https://leetcode-cn.com/problems/find-the-town-judge/)&quot;">​</a></h4><h2 id="📖-总结" tabindex="-1">📖 总结 <a class="header-anchor" href="#📖-总结" aria-label="Permalink to &quot;📖 总结&quot;">​</a></h2><p>在这篇文章中我们详细讲解了图结构，如何表示一个图结构，如何手写一个图结构，博主在自己写博客的时候，也能学到很多东西，从理解到实现，都需要站在另一个角度去思考，如何能清晰的将内容输出，也希望各位读者能从这个系列的文章中真正的学习到一些东西~</p><p>本文关于<strong>图</strong>的内容就到这里结束了，相信你一定能从中学到很多东西。接下来我们将开启算法之路，可能这段时间还不会更新这部分的内容，还请耐心等待</p><p>欢迎大家关注本专栏，持续关注最新文章~</p><h2 id="🐣-彩蛋" tabindex="-1">🐣 彩蛋 <a class="header-anchor" href="#🐣-彩蛋" aria-label="Permalink to &quot;🐣 彩蛋&quot;">​</a></h2><p>数据结构和算法之路还没有结束，这篇文章的结束，也只是基础数据结构告一段落了，在数据结构当中，还有相对多的高级内容没有涉及，例如哈希表的实现、单调栈、红黑树、AVL 树等等等...这些内容都需要我们在未来的日子中不断学习，不断积累，才能有更多的收获，在未来的日子里，希望和大家一起学习，交流，共同进步~</p><p>在这里非常感谢大家近几天来的阅读和交流</p><p>同时也非常感谢<a href="https://juejin.cn/user/3131845139247960" target="_blank" rel="noreferrer">周一姐姐</a>对我的帮助和鼓励，很庆幸能在前端路上遇见 🌹</p><blockquote><p>最后，可能在很多地方讲诉的不够清晰，请见谅</p><p>💌 如果文章有什么错误的地方，或者有什么疑问，欢迎留言，也欢迎私信交流</p></blockquote>`,107),e=[p];function t(c,r,y,F,i,D){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
