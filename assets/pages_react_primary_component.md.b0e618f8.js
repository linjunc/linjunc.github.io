import{_ as s,c as a,o as l,U as o}from"./chunks/framework.4d5e0f31.js";const C=JSON.parse('{"title":"React 入门学习（二）-- 面向组件编程","description":"本文主要介绍了 React 世界中的三大属性 props，state，ref，它们是实现组件式编程的关键","frontmatter":{"title":"React 入门学习（二）-- 面向组件编程","date":"2021-08-16T16:08:02.000Z","id":1635581282,"tags":["react"],"categories":["React入门学习"],"keywords":"react,state,props,ref,react基础,小丞同学","description":"本文主要介绍了 React 世界中的三大属性 props，state，ref，它们是实现组件式编程的关键"},"headers":[],"relativePath":"pages/react/primary/component.md","lastUpdated":1686994616000}'),n={name:"pages/react/primary/component.md"},p=o(`<p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-study-%E9%9D%A2%E5%90%91%E7%BB%84%E4%BB%B6%E7%BC%96%E7%A8%8B.png" alt="react-study-面向组件编程" data-fancybox="gallery"></p><blockquote><p>📢 大家好😪 ，我是小丞同学，最近在学习 React、小程序、阅读 JS 高程，以及整理 Node 的笔记，这是关于 React 的<strong>第二篇</strong>文章，也是我学习的第一个框架，内容如有错误，欢迎大家指正</p><p>📢 愿你生活明朗，万物可爱</p></blockquote><h2 id="一、组件的使用" tabindex="-1">一、组件的使用 <a class="header-anchor" href="#一、组件的使用" aria-label="Permalink to &quot;一、组件的使用&quot;">​</a></h2><p>当应用是以多组件的方式实现，这个应用就是一个组件化的应用</p><blockquote><p><strong>注意：</strong></p><ol><li><p>组件名必须是首字母大写</p></li><li><p>虚拟DOM元素只能有一个根元素</p></li><li><p>虚拟DOM元素必须有结束标签 <code>&lt; /&gt;</code></p></li></ol></blockquote><p><strong>渲染类组件标签的基本流程</strong></p><ol><li><p>React 内部会创建组件实例对象</p></li><li><p>调用<code>render()</code>得到虚拟 DOM ,并解析为真实 DOM</p></li><li><p>插入到指定的页面元素内部</p></li></ol><h3 id="_1-函数式组件" tabindex="-1">1. 函数式组件 <a class="header-anchor" href="#_1-函数式组件" aria-label="Permalink to &quot;1. 函数式组件&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//1.先创建函数，函数可以有参数，也可以没有，但是必须要有返回值 返回一个虚拟DOM</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Welcome</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello, </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//2.进行渲染</span></span>
<span class="line"><span style="color:#A6ACCD;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Render</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Welcom</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;"> = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ljc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;,</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上面的代码经历了以下几步</p><ol><li>我们调用 <code>ReactDOM.render()</code> 函数，并传入 <code>&lt;Welcome name=&quot;ljc&quot; /&gt;</code> 作为参数。</li><li>React 调用 <code>Welcome</code> 组件，并将 <code>{name: &#39;ljc&#39;}</code> 作为 props 传入。</li><li><code>Welcome</code> 组件将 <code>Hello, ljc</code> 元素作为返回值。</li><li>React DOM 将 DOM 高效地更新为 <code>Hello,ljc</code>。</li></ol><h3 id="_2-类式组件" tabindex="-1">2. 类式组件 <a class="header-anchor" href="#_2-类式组件" aria-label="Permalink to &quot;2. 类式组件&quot;">​</a></h3><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/weather.gif" alt="weather" data-fancybox="gallery"></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">isHot</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">isHot</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={this.</span><span style="color:#A6ACCD;">changeWeather</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">今天天气很</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">isHot</span><span style="color:#89DDFF;">?</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">炎热</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">凉爽</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">changeWeather</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isHot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isHot</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#F07178;">setState(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">isHot</span><span style="color:#89DDFF;">:!</span><span style="color:#A6ACCD;">isHot</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;">/&gt;,</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span></code></pre></div><p>这玩意底层不简单，<code>this</code>的指向真的需要好好学习</p><p><strong>在优化过程中遇到的问题</strong></p><ol><li>组件中的 render 方法中的 this 为组件实例对象</li><li>组件自定义方法中由于开启了严格模式，this 指向 <code>undefined</code> 如何解决 <ol><li>通过 bind 改变 this 指向</li><li>推荐采用箭头函数，箭头函数的 <code>this</code> 指向</li></ol></li><li>state 数据不能直接修改或者更新</li></ol><h3 id="_3-其他知识" tabindex="-1">3. 其他知识 <a class="header-anchor" href="#_3-其他知识" aria-label="Permalink to &quot;3. 其他知识&quot;">​</a></h3><p>包含表单元素的组件分为非受控租价与受控组件</p><ul><li><strong>受控组件</strong>：表单组件的输入组件随着输入并将内容存储到状态中（随时更新）</li><li><strong>非受控组件</strong>：表单组件的输入组件的内容在有需求的时候才存储到状态中（即用即取）</li></ul><h2 id="二、组件实例三大属性" tabindex="-1">二、组件实例三大属性 <a class="header-anchor" href="#二、组件实例三大属性" aria-label="Permalink to &quot;二、组件实例三大属性&quot;">​</a></h2><h3 id="_1-state" tabindex="-1">1. state <a class="header-anchor" href="#_1-state" aria-label="Permalink to &quot;1. state&quot;">​</a></h3><blockquote><p>React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</p><p>React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p></blockquote><p>简单的说就是组件的状态，也就是该组件所存储的数据</p><p><strong>类式组件中的使用</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720203721926.png" alt="image-20210720203721926" data-fancybox="gallery"></p><p>使用的时候通过<code>this.state</code>调用<code>state</code>里的值</p><p>在类式组件中定义<code>state</code></p><ul><li>在构造器中初始化<code>state</code></li><li>在类中添加属性<code>state</code>来初始化</li></ul><p><strong>修改 state</strong></p><p>在<strong>类式组件</strong>的函数中，直接修改<code>state</code>值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">weather </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">凉爽</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>页面的渲染靠的是<code>render</code>函数</p></blockquote><p>这时候会发现页面内容不会改变，原因是 React 中不建议 <code>state</code>不允许直接修改，而是通过类的原型对象上的方法 <code>setState()</code></p><p><strong>setState()</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(partialState</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [callback])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><code>partialState</code>: 需要更新的状态的部分对象</li><li><code>callback</code>: 更新完状态后的回调函数</li></ul><p>有两种写法：写法1</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">weather</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">凉爽</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>写法2：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 传入一个函数，返回x需要修改成的对象，参数为当前的 state</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"></span></code></pre></div><p><code>setState</code>是一种合并操作，不是替换操作</p><hr><ul><li>在执行 <code>setState</code>操作后，React 会自动调用一次 <code>render()</code></li><li><code>render()</code> 的执行次数是 1+n (1 为初始化时的自动调用，n 为状态更新的次数)</li></ul><h3 id="_2-props" tabindex="-1">2. props <a class="header-anchor" href="#_2-props" aria-label="Permalink to &quot;2. props&quot;">​</a></h3><p>与<code>state</code>不同，<code>state</code>是组件自身的状态，而<code>props</code>则是外部传入的数据</p><p><strong>类式组件中使用</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720211554914.png" alt="image-20210720211554914" data-fancybox="gallery"></p><p>在使用的时候可以通过 <code>this.props</code>来获取值 类式组件的 <code>props</code>:</p><ol><li>通过在组件标签上传递值，在组件中就可以获取到所传递的值</li><li>在构造器里的<code>props</code>参数里可以获取到 <code>props</code></li><li>可以分别设置 <code>propTypes</code> 和 <code>defaultProps</code> 两个属性来分别操作 <code>props</code>的规范和默认值，两者都是直接添加在类式组件的<strong>原型对象</strong>上的（所以需要添加 <code>static</code>）</li><li>同时可以通过<code>...</code>运算符来简化</li></ol><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720212505232.png" alt="image-20210720212505232" data-fancybox="gallery"></p><p><strong>函数式组件中的使用</strong></p><blockquote><p>函数在使用props的时候，是作为参数进行使用的(props)</p></blockquote><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720213304037.png" alt="image-20210720213304037" data-fancybox="gallery"></p><p>函数组件的 <code>props</code>定义:</p><ol><li>在组件标签中传递 <code>props</code>的值</li><li>组件函数的参数为 <code>props</code></li><li>对 <code>props</code>的限制和默认值同样设置在原型对象上</li></ol><h3 id="_3-refs" tabindex="-1">3. refs <a class="header-anchor" href="#_3-refs" aria-label="Permalink to &quot;3. refs&quot;">​</a></h3><p>Refs 提供了一种方式，允许我们访问 DOM 节点或在 <code>render</code> 方法中创建的 React 元素。</p><blockquote><p>在我们正常的操作节点时，需要采用DOM API 来查找元素，但是这样违背了 React 的理念，因此有了<code>refs</code></p></blockquote><p>有三种操作<code>refs</code>的方法，分别为：</p><ul><li>字符串形式</li><li>回调形式</li><li><code>createRef</code>形式</li></ul><p><strong>字符串形式</strong><code>refs</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720215332387.png" alt="image-20210720215332387" data-fancybox="gallery"></p><p>虽然这个方法废弃了，但是还能用，还很好用hhh~</p><p><strong>回调形式的</strong><code>refs</code></p><p>组件实例的<code>ref</code>属性传递一个回调函数<code>c =&gt; this.input1 = c </code>（箭头函数简写），这样会在实例的属性中存储对DOM节点的引用，使用时可通过<code>this.input1</code>来使用</p><p><strong>使用方法</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">input1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">点击按钮提示数据</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>我的理解</strong></p><p><code>c</code>会接收到当前节点作为参数，<code>ref</code>的值为函数的返回值，也就是<code>this.input1 = c</code>，因此是给实例下的<code>input1</code>赋值</p><p><strong>createRef 形式</strong>（推荐写法）</p><p>React 给我们提供了一个相应的API，它会自动的将该 DOM 元素放入实例对象中</p><p>我们先给DOM元素添加ref属性</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">{this.MyRef}</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">点击弹出</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">{this.MyRef1}</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">点击弹出</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>通过API，创建React的容器，会将DOM元素赋值给实例对象的名称为容器的属性的<code>current</code>，好烦..</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">MyRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createRef</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">MyRef1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createRef</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>注意：专人专用，好烦，一个节点创建一个容器</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//调用</span></span>
<span class="line"><span style="color:#82AAFF;">btnOnClick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//创建之后，将自身节点，传入current中</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">MyRef</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>注意：我们不要过度的使用 ref，如果发生时间的元素刚好是需要操作的元素，就可以使用事件对象去替代。过度使用有什么问题我也不清楚，可能有 bug 吧</p><h3 id="_4-事件处理" tabindex="-1">4. 事件处理 <a class="header-anchor" href="#_4-事件处理" aria-label="Permalink to &quot;4. 事件处理&quot;">​</a></h3><ol><li><p>React 使用的是自定义事件，而不是原生的 DOM 事件</p></li><li><p>React 的事件是通过事件委托方式处理的（为了更加的高效）</p></li><li><p>可以通过事件的 <code>event.target</code>获取发生的 DOM 元素对象，可以尽量减少 <code>refs</code>的使用</p></li></ol><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210720222147149.png" alt="image-20210720222147149" data-fancybox="gallery"></p><h2 id="三、高阶函数" tabindex="-1">三、高阶函数 <a class="header-anchor" href="#三、高阶函数" aria-label="Permalink to &quot;三、高阶函数&quot;">​</a></h2><p>关于这部分的知识，之前的笔记有记过了，我真是太棒了</p><p>链接<a href="https://linjc.blog.csdn.net/article/details/116765732" target="_blank" rel="noreferrer">高阶函数</a>，关于AOP，偏函数，柯里化都有不错的记录，感觉还是不错的</p>`,85),e=[p];function t(c,r,D,i,y,F){return l(),a("div",null,e)}const A=s(n,[["render",t]]);export{C as __pageData,A as default};
