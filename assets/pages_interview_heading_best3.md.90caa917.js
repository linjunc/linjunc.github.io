import{_ as e,c as o,o as c,V as d}from"./chunks/framework.3d11d069.js";const h=JSON.parse('{"title":"【offer 收割计划】你知道为什么 reducer 最好是一个纯函数吗？","description":"","frontmatter":{},"headers":[],"relativePath":"pages/interview/heading/best3.md","filePath":"pages/interview/heading/best3.md","lastUpdated":1690099743000}'),t={name:"pages/interview/heading/best3.md"},a=d('<h1 id="【offer-收割计划】你知道为什么-reducer-最好是一个纯函数吗" tabindex="-1">【offer 收割计划】你知道为什么 reducer 最好是一个纯函数吗？ <a class="header-anchor" href="#【offer-收割计划】你知道为什么-reducer-最好是一个纯函数吗" aria-label="Permalink to &quot;【offer 收割计划】你知道为什么 reducer 最好是一个纯函数吗？&quot;">​</a></h1><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/offer%E6%94%B6%E5%89%B2%E8%AE%A1%E5%88%92-%E7%AC%AC%E4%B8%80%E5%BC%B9.png" alt="offer收割计划-第一弹" data-fancybox="gallery"></p><blockquote><p>📢 大家好，我是小丞同学，一名<strong>大二的前端爱好者</strong></p><p>📢 这篇文章将来讲讲最近无意中看到的几道面试题，也希望来看看大家的理解~</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <strong>愿你忠于自己，热爱生活</strong></p></blockquote><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>最近看了看了下一些博主的面试文，自己也跟着思考了一下一些题目，发现有很多简单而又重要的知识点有点拿捏不住，因此决定写一个专栏，来记录这些题目，并写上自己的理解，更重要的是，希望有读者能够分享自己的理解，或者在哪些题目遇到了问题，这样我们可以一起关注一下这些题目，大家共同进步！因此希望在读这篇文章的你，可以自己先思考一下，再看看我的理解，这样也能起到对我的文章正确性的检验。</p><ul><li>如果文章内容有什么错误的地方，也请大家务必指出！</li><li>如果期待本专栏的新文章，也可以评论留言噢！</li><li>如果你是同龄人，或者有什么需求，可以添加我的 vx 和我一起探讨！</li></ul><h2 id="💡-知识点抢先看" tabindex="-1">💡 知识点抢先看 <a class="header-anchor" href="#💡-知识点抢先看" aria-label="Permalink to &quot;💡 知识点抢先看&quot;">​</a></h2><ol><li><code>for...in</code> 和 <code>for ... of</code> 的区别</li><li><code>splice</code> 和 <code>slice</code> 的区别</li><li><code>includes </code> 和 <code>indexOf</code> 的差异</li><li>伪类的作用</li><li><code>ajax</code> 状态码</li><li><code>redux</code> 中的 <code>reducer</code> 为什么最好是一个纯函数？</li></ol><h2 id="一、你能说说-for-in-和-for-of-的区别吗" tabindex="-1">一、你能说说 <code>for ... in</code> 和 <code>for ... of</code> 的区别吗？ <a class="header-anchor" href="#一、你能说说-for-in-和-for-of-的区别吗" aria-label="Permalink to &quot;一、你能说说 `for ... in` 和 `for ... of` 的区别吗？&quot;">​</a></h2><p>简单来说 <code>for...in</code> 和 <code>for ... of</code> 都是用来遍历的，但是<code>for ... in</code> 遍历的是数组的索引 <strong>index</strong>，而 <code>for ... of</code> 遍历的是数组的元素值 <strong>value</strong></p><p><strong>先说说 <code>for ...of</code></strong></p><p>✅ 它只能遍历部署了 <code>iterator</code> 接口的数据结构，对象如果不实现 <code>iterator</code> 接口，也是无法使用 <code>for ... of</code> 遍历的</p><p>✅ <code>for ... of</code> 不只是可以遍历元素的 <code>value</code> 值，你也可以通过下面这种方式来遍历出对象的 <code>key, value</code> 值，但是这样会相对的麻烦一些，因此不推荐 <code>for ... of</code> 来遍历对象</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125142848377.png" alt="image-20211125142848377" data-fancybox="gallery"></p><p>✅ <code>for...of</code> 更适合遍历数组，并且它只是遍历数组内的元素，不会遍历原型属性以及自身的属性</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125143447722.png" alt="image-20211125143447722" data-fancybox="gallery"></p><p><strong>再来看看 <code>for ... in</code></strong></p><p><code>for ... in</code> 更适合遍历对象，在用来遍历数组的时候，由于 <code>for ... in</code> 的特性会造成一些问题</p><p>✅ <code>for ... in</code> 会遍历出数组的原型对象，以及数组自身的属性，因此下面的 <code>index</code> 中会打印出 <code>a</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125144503702.png" alt="image-20211125144503702" data-fancybox="gallery"></p><p>✅ 同时值得注意的是，<code>for ... in</code> 遍历出来的 <code>index</code> 并不是一个 <code>number</code> 类型，而是一个 <code>string</code> 类型，因此在使用 <code>index</code> 来进行计算的时候需要注意</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125144901645.png" alt="image-20211125144901645" data-fancybox="gallery"></p><p>👉 总结以上，<code>for ... in</code> 和 <code>for ... of</code> 的区别有以下几点</p><ol><li><code>for ... in</code> 循环出的是 <code>index</code>，<code>for ... of</code> 循环出的是 <code>value</code></li><li><code>for ... of</code> <strong>不能</strong>循环普通对象，需要实现 <code>iterator</code> 接口</li><li><code>for ... of</code> <strong>不会</strong>遍历原型以及自身的属性，而 <code>for ... in</code> 会</li><li><code>for ... of</code> 是 <code>ES6</code> 的新语法</li></ol><h2 id="二、来说说数组里的-slice-和-splice-方法" tabindex="-1">二、来说说数组里的 <code>slice</code> 和 <code>splice</code> 方法 <a class="header-anchor" href="#二、来说说数组里的-slice-和-splice-方法" aria-label="Permalink to &quot;二、来说说数组里的 `slice` 和 `splice` 方法&quot;">​</a></h2><p><code>slice</code> 方法主要是用来截取数组以及字符串，它接收两个参数，一个是截取的起始位置，一个是截取的结束位置，同时它会返回截取元素组成的新数组，并且不会改变原数组</p><p>可以看到从索引为 <code>1</code> 的地方截取到索引为 <code>3</code> 的地方结束，返回的是一个被截取的数组，同时原数组没有被改变</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125151258884.png" alt="image-20211125151258884" data-fancybox="gallery"></p><p><code>splice</code> 方法主要用来删除数组，并且可以添加数组元素，它接收的第一个参数是起始的索引，第二个参数是删除的个数，后面的参数都是需要添加的元素</p><p>第二个参数以后的参数是需要增加的元素，在起始位置插入，可以理解为，删除了一些元素，然后在这里补上一些新的元素，<code>splice</code> 会改变原数组</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125150954385.png" alt="image-20211125150954385" data-fancybox="gallery"></p><p>可以看到从索引为 1 的地方开始（包括 1），开始删除 2 个元素，也就是 <code>b，c</code> ，随后在这里补上了 2 个元素，同时也可以看出原数组 <code>arr</code> 被改变了</p><p>👉 总结以上：</p><ol><li>两者并没有什么直接的关联，<code>splice</code> 用来增删数组，<code>slice</code> 用来截取数组或字符串</li><li><code>splice</code> 会改变原数组，<code>slice</code> 不会改变原数组</li></ol><h2 id="三、为什么有了-indexof-方法-在-es7-中还要新增-includes-方法呢" tabindex="-1">三、为什么有了 <code>indexOf</code> 方法，在 ES7 中还要新增 <code>includes</code> 方法呢？ <a class="header-anchor" href="#三、为什么有了-indexof-方法-在-es7-中还要新增-includes-方法呢" aria-label="Permalink to &quot;三、为什么有了 `indexOf` 方法，在 ES7 中还要新增 `includes` 方法呢？&quot;">​</a></h2><p>在之前的 <code>indexOf</code> 方法中存在着一些问题，主要是在于 <code>NaN</code> 的判断上，<code>indexOf</code> 没有办法去判断数组中是否存在 <code>NaN</code> 值，当我们需要判断数组中是否存在 <code>NaN</code> 值的时候，我们需要采用 <code>includes</code> 来判断</p><p>采用 <code>indexOf</code> 就会出现下面这样的差异</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125152557654.png" alt="image-20211125152557654" data-fancybox="gallery"></p><p>同时当数组有空值的时候， <code>includes</code> 会认为空值为 <code>undefined</code> ，而 <code>indexOf</code> 不会，再来看段代码</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125152831294.png" alt="image-20211125152831294" data-fancybox="gallery"></p><p>因此，<code>includes</code> 的出现就是为了解决 <code>indexOf</code> 遗留的一些问题</p><p>👉 总结以上：</p><ol><li><code>includes</code> 能够判断数组中有无 <code>NaN</code> 值</li><li><code>includes</code> 会把空值默认成 <code>undefined</code></li><li>如果想要判断数组中是否存在某个值，可以采用 <code>includes</code> ，查找数组中某个值的位置可以采用 <code>indexOf</code></li></ol><h2 id="四、伪元素有哪些作用呢" tabindex="-1">四、伪元素有哪些作用呢？ <a class="header-anchor" href="#四、伪元素有哪些作用呢" aria-label="Permalink to &quot;四、伪元素有哪些作用呢？&quot;">​</a></h2><p>在谈作用之前，先来区分一下<strong>伪元素和伪类</strong></p><p><strong>伪类</strong>：从字面上来看，可以理解为一个 CSS 类，它就是用来选择处于特定状态的元素的选择器，比如处于 <code>hover</code> 状态的元素，某个 <code>class</code> 的第几个元素，它和普通的类不一样。此外伪类一般是单冒号，例如 <code>:hover</code></p><p><strong>伪元素</strong>：从字面上看，它是一个假的元素，我也是这么理解的，它类似添加一个新的 <code>DOM</code> 节点到 <code>DOM</code> 树上，而不是改变元素的状态。但是这里值得注意的是，这里不是真的添加一个节点，实际上这个元素被创建在文档之外。</p><p>为了从写法上区分伪类和位元素，一般伪元素采用双冒号，例如 <code>::after</code> ，但是对于伪元素来说，单冒号，双冒号都可以，建议规范</p><p><strong>回归正题</strong></p><p>伪元素的作用</p><ol><li>伪元素能够减少页面中的 <code>DOM</code> 节点，伪元素不属于 HTML 页面，能够减小 <code>JS</code> 查找 <code>DOM</code> 的负担，因此可以说，使用伪元素能够优化性能</li><li>伪元素能够用来清除浮动，经典三件套 <code>content</code> ,<code>display</code> <code>clear</code></li><li>加快浏览器加载 HTML 文件</li></ol><h2 id="五、500-http-状态码是什么异常" tabindex="-1">五、500 HTTP 状态码是什么异常？ <a class="header-anchor" href="#五、500-http-状态码是什么异常" aria-label="Permalink to &quot;五、500 HTTP 状态码是什么异常？&quot;">​</a></h2><p>500 是<strong>服务器内部错误</strong></p><p>常见的HTTP 状态码</p><table><thead><tr><th><code>HTTP</code> 状态码</th><th style="text-align:center;">means</th></tr></thead><tbody><tr><td>200</td><td style="text-align:center;">服务器<code>成功返回</code>网页</td></tr><tr><td>301</td><td style="text-align:center;">对象<code>永久</code>移动</td></tr><tr><td>302</td><td style="text-align:center;">对象<code>临时</code>移动</td></tr><tr><td>304</td><td style="text-align:center;">请求的网页<code>未修改</code></td></tr><tr><td>401</td><td style="text-align:center;"><code>未授权</code>，请求要求身份验证</td></tr><tr><td>404</td><td style="text-align:center;">请求的<code>网页不存在</code></td></tr><tr><td>500</td><td style="text-align:center;">服务器<code>内部错误</code></td></tr><tr><td>503</td><td style="text-align:center;">服务<code>不可用</code></td></tr></tbody></table><h2 id="六、redux-中的-reducer-要求是一个纯函数呢" tabindex="-1">六、<code>redux</code> 中的 <code>reducer</code> 要求是一个纯函数呢？ <a class="header-anchor" href="#六、redux-中的-reducer-要求是一个纯函数呢" aria-label="Permalink to &quot;六、`redux` 中的 `reducer` 要求是一个纯函数呢？&quot;">​</a></h2><p>首先如果 <code>redux</code> 中的 <code>reducer</code> 如果不是一个 纯函数的话会造成什么后果呢？</p><p>如果我们在 <code>reducer</code> 中，在原来 <code>state</code> 的基础上进行操作的话，并不会让 <code>React</code> 组件重新渲染，<strong>并不会有任何改变</strong>，这是由于 <code>Redux</code> 的底层实现决定的</p><p>在这里我们看看 <code>redux</code> 的源码，来看看它到底是什么原因造成的，<code>Redux</code> 接收一个 <code>state</code> 对象，然后通过 <code>for</code> 循环，将 <code>state</code> 的每一部分传递给对于的 <code>reducer</code> ，如果发生任何改变， <code>reducer</code> 将返回一个新的对象，也就是这里的 <code>hasChanged</code> 判断，我们可以发现，它只是通过了 <code>!==</code> 来进行判断前后的 <code>state</code> 是否相等，这是一种浅比较的方法，我的理解就是<strong>地址有没有变化</strong></p><p>因此如果我们传入的 <code>state</code> 是在旧的基础上更改的，那么它的<strong>地址是不会发生变化</strong>的，因此是不会通过这层浅比较的，因此 <code>hasChanged</code> 返回 <code>false</code> ，<code>state</code> 没有被更新</p><p>那为什么 <code>redux</code> 要这样设计呢？</p><p>如果这里改成深比较不就没有这种问题了吗？</p><p>原因是，如果这里采用了深比较的方式，当比较的次数很多时，性能消耗特别大，因此 <code>redux</code> 对 <code>reducer</code> 做了一个规定，无论发生什么变化时，都需要返回一个新的对象；没有变化时，返回旧的对象。这样就能继续沿用浅比较的方式，很好的减少了性能的损耗</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211125161432173.png" alt="image-20211125161432173" data-fancybox="gallery"></p><p>同时在 <code>redux</code> 的英文官网中给 <code>reducers</code> 定制了一套规则：<a href="https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers#rules-of-reducers" target="_blank" rel="noreferrer">对应地址</a></p><blockquote><p>We said earlier that <strong>reducers must always follow some special rules</strong>:</p><ul><li>They should only calculate the new state value based on the <code>state</code> and <code>action</code> arguments</li><li>They are not allowed to modify the existing <code>state</code>. Instead, they must make <em>immutable updates</em>, by copying the existing <code>state</code> and making changes to the copied values.</li><li>They must not do any asynchronous logic or other &quot;side effects&quot;</li></ul><p>蹩脚翻译</p><p>我们之前说过，<strong>reducer 必须始终遵循一些特殊规则</strong></p><ul><li>它们应该只根据 <code>state</code> 和 <code>action</code> 参数计算新的状态值</li><li>它们不允许修改当前的 <code>state</code>。相反，它们必须通过复制现在的 <code>state</code>，并对复制的值进行更改来进行 <code>state</code> 更新</li><li>它们不能做任何异步逻辑以及其他”副作用“</li></ul></blockquote><p>遵循这些规则的函数也被称为**“纯”函数**，因此 <code>reducer</code> 需要一个纯函数由此而来</p><p>👉 总结以下</p><ol><li><code>redux</code> 底层采用了浅比较的方式来判断 <code>state</code> 改变，来优化性能</li><li>采用纯函数，保证新旧 <code>state</code> 不是同一个对象引用</li><li>为了保证返回新的 <code>state</code> 是确定的，不会因为副作用返回不确定的 <code>state</code></li></ol><hr><h2 id="📖-总结" tabindex="-1">📖 总结 <a class="header-anchor" href="#📖-总结" aria-label="Permalink to &quot;📖 总结&quot;">​</a></h2><p>通过这几道面试题，我们复习了 <code>JavaScript</code> 中的循环语句，也区分了 <code>splice</code> 和 <code>slice</code> 而又深入理解 <code>redux</code> 中 <code>reducer</code> 的工作原理，这对我自己来说提升还是很大的，不知道看到这里的你有没有什么收获呢？可能文中有理解不到位的地方，欢迎在评论区指出，我们一起进步，共同成长！</p><p>最后，我是小丞同学，欢迎大家关注本专栏，持续关注最新文章~祝愿大家拿到心仪的 <code>offer</code></p><blockquote><p>最后，可能在很多地方讲诉的不够清晰，请见谅</p><p>💌 如果文章有什么错误的地方，或者有什么疑问，欢迎留言，也欢迎私信交流</p></blockquote>',74),i=[a];function r(l,s,n,p,g,u){return c(),o("div",null,i)}const m=e(t,[["render",r]]);export{h as __pageData,m as default};
