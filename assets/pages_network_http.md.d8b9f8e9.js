import{_ as s,c as n,o as a,U as l}from"./chunks/framework.4d5e0f31.js";const A=JSON.parse('{"title":"HTTP 协议相关面试题","description":"","frontmatter":{},"headers":[],"relativePath":"pages/network/http.md","lastUpdated":1686995766000}'),o={name:"pages/network/http.md"},p=l(`<h1 id="http-协议相关面试题" tabindex="-1">HTTP 协议相关面试题 <a class="header-anchor" href="#http-协议相关面试题" aria-label="Permalink to &quot;HTTP 协议相关面试题&quot;">​</a></h1><h2 id="常见的-http-请求方法" tabindex="-1">常见的 HTTP 请求方法 <a class="header-anchor" href="#常见的-http-请求方法" aria-label="Permalink to &quot;常见的 HTTP 请求方法&quot;">​</a></h2><ul><li><code>GET</code> 方法：用于向服务器获取数据。只读取数据，不更改任何数据。相同的参数返回的结果相同</li><li><code>POST</code> 方法：提交一个实体（payload），用于创建新的实体和修改现有的实体。会更改状态或引起其他的副作用</li><li><code>PUT</code> 方法：用新的实体替换指定的资源。PUT 请求中发送的数据完全替换了指定的资源，并且如果指定的资源不存在，则创建一个新的资源。</li><li><code>DELETE</code>：删除指定的资源。DELETE 请求负责删除指定的资源</li><li><code>PATCH</code>：通过局部修改的方式更新指定的资源。PATCH 请求类似于 PUT 请求，但是它<strong>只更新指定资源的某些部分，而不是完全替换。</strong></li><li><code>HEAD</code>：与 GET 请求相同，但不返回响应正文。HEAD 请求可以<strong>检查服务器是否支持指定的资源类型</strong>、检查文件是否存在以及获取与资源有关的元数据</li><li><code>OPTIONS</code>：列出对指定资源所支持的请求方法、标头和其他信息。OPTIONS 请求可用于<strong>确定服务器支持哪些请求方法</strong>，或者客户端可以在不实际执行操作的情况下测试服务器性能或配置。</li></ul><h2 id="get-和-post-的区别" tabindex="-1">get 和 post 的区别 <a class="header-anchor" href="#get-和-post-的区别" aria-label="Permalink to &quot;get 和 post 的区别&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>首先它们的<strong>应用场景</strong>不同，get 请求一般用于访问服务器资源，而 post 请求一般用于向服务器提交数据。本质的区别就是 post 会修改服务器的数据，而 get 不会修改服务器的数据。</p><p>同时 get 请求的<strong>数据</strong>会被放在 url 中，而 post 请求的数据会被放在请求体中。也因此 get 请求发送数据的<strong>长度</strong>有限制，同时<strong>安全性</strong>也会比 post 请求要差一些。</p><p>而且浏览器一般会<strong>缓存</strong> get 请求的数据，而不会缓存 post 请求的数据。</p><p>最后在网络层面，get 请求会产生一个 TCP 数据包，而 post 请求会产生<strong>两个 TCP 数据包</strong>，先发送 header 服务器响应 100 后，再发送 data</p></div><ul><li><strong>应用场景不同</strong>：get 请求不会对服务器的资源产生影响，而 post 请求会对服务器的资源产生影响，比如说 post 请求会修改服务器的数据，而 get 请求不会修改服务器的数据。</li><li><strong>数据传递方式也不同</strong>：get 请求的数据会被放在 url 中，而 post 请求的数据会被放在请求体中。</li><li><strong>请求长度不同</strong>：浏览器对 url 的长度有限制，因此 get 请求发送数据的长度有限制，而 post 请求没有这个限制。</li><li><strong>缓存不同</strong>：浏览器一般会缓存 get 请求的数据，而不会缓存 post 请求的数据。 <ul><li>可以在请求头中添加 <code>Cache-Control: no-cache</code> 来禁止浏览器缓存 get 请求的数据</li><li>也可以通过在 url 中添加随机数来禁止浏览器缓存 get 请求的数据</li></ul></li><li><strong>安全性不同</strong>：get 请求的数据会被放在 url 中，因此 get 请求的数据不安全，而 post 请求的数据会被放在请求体中，因此 post 请求的数据相对安全一些。</li><li>post 支持更多的数据类型的数据</li><li><strong>产生 TCP 数据包数量不同</strong>：get 请求会产生一个 TCP 数据包，而 post 请求会产生<strong>两个 TCP 数据包</strong>。 <ul><li>GET 请求，浏览器会把 HTTP header 和 data 一并发送出去，服务器响应 200（返回数据）</li><li>POST 请求，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据） <ul><li>第一次将 header 发送，确认服务器和网络都可以接收数据，才会发送 data</li></ul></li></ul></li></ul><h2 id="post-和-put-的区别" tabindex="-1">post 和 put 的区别 <a class="header-anchor" href="#post-和-put-的区别" aria-label="Permalink to &quot;post 和 put 的区别&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>put 请求是<strong>幂等的</strong>，用于<strong>更新数据</strong>，而 post 请求不是幂等的，用于<strong>添加数据</strong></p></div><ul><li>put 向服务器发送数据，不会增加数据的种类，无论发送多少次，都只会修改数据，可以理解为更新数据</li><li>post 向服务器发送数据，会增加数据的种类，每次发送都会增加一条数据，可以理解为添加数据</li></ul><h2 id="追问-那么用-put-请求来添加数据会有什么问题吗" tabindex="-1">（追问）那么用 put 请求来添加数据会有什么问题吗？ <a class="header-anchor" href="#追问-那么用-put-请求来添加数据会有什么问题吗" aria-label="Permalink to &quot;（追问）那么用 put 请求来添加数据会有什么问题吗？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>PUT 请求本质是一个<strong>幂等请求</strong>，也就是多次发送相同的数据，服务端的响应应该是一样。那么用来添加数据就会造成不一致，同时也有可能 PUT 添加的数据已经存在，就会更新数据，造成<strong>资源冲突</strong>的问题</p><p>而且用 PUT 请求来添加数据，也<strong>不符合 HTTP 协议的语义</strong>，就比如你用 GET 请求来修改数据，这样也是不符合语义的，而且 GET 还有可能会被<strong>浏览器缓存</strong>。</p></div><ul><li><strong>幂等性问题</strong>：PUT 请求是幂等操作，也就是重复进行多次，并不会产生任何影响，具有替换更新的特性，也就是说请求到达服务器后必须保证数据一致性。</li><li><strong>资源冲突问题</strong>：如果使用 PUT 请求添加的数据已经存在，则需要按照 PUT 请求中提供的数据进行替换，这可能会导致数据不一致。如果在 PUT 请求的场景下添加数据，需要考虑通过不同的方式进行数据添加并返回对应的状态码</li><li><strong>安全性问题</strong>：使用 PUT 请求添加数据时，需要注意对客户端所提交的数据进行校验，以保证数据的完整性和安全性。</li></ul><h2 id="对-accept-系列字段了解多少" tabindex="-1">对 Accept 系列字段了解多少？ <a class="header-anchor" href="#对-accept-系列字段了解多少" aria-label="Permalink to &quot;对 Accept 系列字段了解多少？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在向服务器发出请求时，可以使用 Accept 请求头来告诉服务器，客户端希望接收什么类型的响应数据。服务器会<strong>根据 Accept 请求头的值来决定返回什么类型的响应数据</strong>。</p><p>比如 指定 HTML 还是 XML 格式，可以使用 Accept: text/html 或者 Accept: text/xml 来指定，如果不指定，则默认返回 HTML 格式的数据。</p><p>如果希望使用字符集来指<strong>定响应数据的编码格式</strong>，可以使用 Accept-Charset 字段，比如 Accept-Charset: utf-8，如果不指定，则默认使用 ISO-8859-1 字符集。</p><p>如果希望使用语言来指定<strong>响应数据的语言</strong>，可以使用 Accept-Language 字段，比如 Accept-Language: en，如果不指定，则默认使用 en-US 语言。</p><p>如果希望使用编码来指定<strong>响应数据的编码格式</strong>，可以使用 Accept-Encoding 字段，比如 Accept-Encoding: gzip，如果不指定，则默认使用 identity 编码。</p></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgtwo/20230319141720.png" alt="" data-fancybox="gallery"></p><h2 id="常见的-content-type-有哪些" tabindex="-1">常见的 content-type 有哪些？ <a class="header-anchor" href="#常见的-content-type-有哪些" aria-label="Permalink to &quot;常见的 content-type 有哪些？&quot;">​</a></h2><ol><li><p><code>application/x-www-form-urlencoded</code> 按照 <code>key=value&amp;key=value</code> 进行编码</p></li><li><p><code>multipart/form-data</code> 通常用表单上传文件</p></li><li><p><code>application/json</code> 服务器消息主体是<strong>序列化的 JSON 字符串</strong></p></li><li><p><code>text/xml</code> 主要提交xml格式数据</p></li></ol><h2 id="对于定长和不定长的数据-http-是怎么传输的" tabindex="-1">对于定长和不定长的数据，HTTP 是怎么传输的？ <a class="header-anchor" href="#对于定长和不定长的数据-http-是怎么传输的" aria-label="Permalink to &quot;对于定长和不定长的数据，HTTP 是怎么传输的？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果是定长数据，则可以通过设置 <code>Content-Length</code> 头部来告诉服务器要发送的数据长度，并且在发送完指定长度的数据后，<strong>服务器可以直接断开连接</strong>。这样避免了服务器等待数据传输完毕后才关闭连接，从而节省了服务器资源。</p><p>如果是不定长的数据，可以通过 Transfer-Encoding: chunked 来告诉服务器采用<strong>分块传输给客户端</strong>，这样做的好处是在传输大文件时可以实时传输，避免了一次性传输大文件带来的数据阻塞和等待时间过长的问题</p></div><p>对于定长的比较的简单，发送的时候设置 <code>Content-Length</code> 头部，接收的时候读取 <code>Content-Length</code> 头部，然后读取指定长度的数据就可以了。</p><p>需要介绍一下不定长的包体传输</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Transfer-Encoding: chunked</span></span>
<span class="line"></span></code></pre></div><p>表示分块传输数据，设置这个字段后，会自动产生两个效果</p><ol><li>忽略 Content-Length 字段</li><li>基于长连接连续传输数据</li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">chunk长度(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">进制的数)</span></span>
<span class="line"><span style="color:#A6ACCD;">第一个chunk的内容</span></span>
<span class="line"><span style="color:#A6ACCD;">chunk长度(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">进制的数)</span></span>
<span class="line"><span style="color:#A6ACCD;">第二个chunk的内容</span></span>
<span class="line"><span style="color:#A6ACCD;">......</span></span>
<span class="line"><span style="color:#F78C6C;">0</span></span>
<span class="line"></span></code></pre></div><p>最后有一个<strong>空行</strong>！</p><h2 id="http-如何处理大文件的传输" tabindex="-1">HTTP 如何处理大文件的传输？ <a class="header-anchor" href="#http-如何处理大文件的传输" aria-label="Permalink to &quot;HTTP 如何处理大文件的传输？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>第一种可以使用<strong>分块传输</strong>，使用 Transfer-Encoding: chunked 头部告诉服务端，将文件分成多个块，每个块发送前会将大小发送给客户端，客户端进行拼接，直到接收所有块。</p><p>还可以使用<strong>断点续传</strong>的方式，这个方案依赖于 Range，可以将大文件分成多个块，客户端可以再请求时通过 Range 头部，来指定获取文件的某一部分，从而实现断点续传，这样也可以避免网络不稳定导致传输中断</p><p>最简单的还可以使用<strong>CDN 进行加速</strong>，使用 CDN 可以提高大文件传输效率</p></div><h2 id="追问-分块传输的-chunked-大小由什么决定" tabindex="-1">（追问）分块传输的 chunked 大小由什么决定？ <a class="header-anchor" href="#追问-分块传输的-chunked-大小由什么决定" aria-label="Permalink to &quot;（追问）分块传输的 chunked 大小由什么决定？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>块的大小是可以根据<strong>传输数据的具体情况和网络状况</strong>进行调整的。</p></div><p>chunked 的大小由服务器决定，一般是根据<strong>网络环境来决定的</strong>，比如网络环境不好，可以设置较小的 chunked 大小，这样可以保证数据传输的稳定性，如果网络环境好，可以设置较大的 chunked 大小，这样可以提高传输效率。</p><h2 id="追问-在分块传输中-如果某个-chunk-传输失败了-如何处理" tabindex="-1">（追问）在分块传输中，如果某个 chunk 传输失败了，如何处理？ <a class="header-anchor" href="#追问-在分块传输中-如果某个-chunk-传输失败了-如何处理" aria-label="Permalink to &quot;（追问）在分块传输中，如果某个 chunk 传输失败了，如何处理？&quot;">​</a></h2><p>当发生中断或者数据丢失时，接收方可以通过发送一个带有 <code>Range</code> 或者 <code>If-Range</code> 字段的 HTTP 请求来<strong>获取缺失的数据块</strong>。</p><p>其中 <code>Range</code> 字段可以指定请求所需的数据块的范围</p><p><code>If-Range</code> 字段则可以指定<strong>缺失数据块的版本号或数据校验值</strong>，以便发送方能够了解接收方需要的数据块的情况。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onerror</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 下载出错，利用历史下载数据重新启动下载任务</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastByte</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Download interrupted, restarting from byte </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastByte</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://your-download-url.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRequestHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Range</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bytes=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastByte</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 开始分块传输任务</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://your-download-url.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRequestHeader</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Range</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bytes=0-1023</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 设置下载范围为前1024字节</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>主要利用 onerror 事件来检测下载中断点，然后重新发送请求，设置 Range 头部，指定从哪个字节开始下载。</p><h2 id="追问-如何实现断点续传呢" tabindex="-1">（追问）如何实现断点续传呢？ <a class="header-anchor" href="#追问-如何实现断点续传呢" aria-label="Permalink to &quot;（追问）如何实现断点续传呢？&quot;">​</a></h2><p>断点续传指的是再文件传输过程中，由于传输中断，再次请求资源时，可以从中断处继续传输，而不是重新传输整个文件。</p><p>再 HTTP 中，断点续传一般通过 Range 头部来实现：</p><ol><li>客户端发送 GET 请求，增加 Range 头部，指定需要请求哪一部分的资源，比如 <ol><li><code>Range: bytes=0-499</code> 表示请求 0 到 499 字节的数据</li></ol></li><li>服务器再收到带有 Range 头部的 GET 请求后，会解析头部内容，从文件指定位置开始传送数据</li><li>服务器传送指定范围内的数据给客户端，然后在响应头部中增加 <code>Content-Range</code> 字段，指定服务器发送的数据内容范围 <ol><li>如 <code>Content-Range: bytes 0-9999/20000</code>，则表示当前传输了0-9999共10000个字节，文件总大小为20000个字节。</li></ol></li><li>客户端在接收到响应后，将收到的<strong>数据添加到本地缓存</strong>中，然后通过开启<strong>多线程</strong>实现同时请求其他数据块的传输，并将每次请求收到的数据块进行拼接，最终获得完整的文件内容。</li></ol><p><strong>Range 字段拆解</strong></p><p>而对于客户端而言，它需要指定请求哪一部分，通过Range这个请求头字段确定，格式为 <code>bytes=x-y</code>。接下来就来讨论一下这个 Range 的书写格式:</p><ul><li><code>0-499</code> 表示从开始到第 499 个字节。</li><li><code>500-</code> 表示从第 500 字节到文件终点。</li><li><code>-100</code> 表示文件的最后100个字节。</li></ul><p>服务器收到请求之后，首先验证范围是否合法，如果越界了那么返回 <strong>416 错误码</strong>，否则读取相应片段，返回 <strong>206状态码</strong>。</p><p>同时，服务器需要添加 <code>Content-Range</code> 字段，这个字段的格式根据请求头中 Range 字段的不同而有所差异。</p><p>具体来说，请求单段数据和请求多段数据，响应头是不一样的。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 单段数据</span></span>
<span class="line"><span style="color:#A6ACCD;">Range: bytes=</span><span style="color:#F78C6C;">0-9</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 多段数据</span></span>
<span class="line"><span style="color:#A6ACCD;">Range: bytes=</span><span style="color:#F78C6C;">0-9</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">30-39</span></span>
<span class="line"></span></code></pre></div><p><strong>单段数据</strong></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HTTP/</span><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">206</span><span style="color:#A6ACCD;"> Partial Content</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Length: </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#A6ACCD;">Accept-Ranges: bytes</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Range: bytes </span><span style="color:#F78C6C;">0-9</span><span style="color:#A6ACCD;">/</span><span style="color:#F78C6C;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">i am xxxxx</span></span>
<span class="line"></span></code></pre></div><p><strong>多段数据</strong></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HTTP/</span><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">206</span><span style="color:#A6ACCD;"> Partial Content</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Type: multipart/byteranges; boundary=</span><span style="color:#F78C6C;">00000010101</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Length: </span><span style="color:#F78C6C;">189</span></span>
<span class="line"><span style="color:#A6ACCD;">Connection: keep-alive</span></span>
<span class="line"><span style="color:#A6ACCD;">Accept-Ranges: bytes</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">-</span><span style="color:#F78C6C;">-00000010101</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Type: text/plain</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Range: bytes </span><span style="color:#F78C6C;">0-9</span><span style="color:#A6ACCD;">/</span><span style="color:#F78C6C;">96</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">i am xxxxx</span></span>
<span class="line"><span style="color:#A6ACCD;">-</span><span style="color:#F78C6C;">-00000010101</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Type: text/plain</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Range: bytes </span><span style="color:#F78C6C;">20-29</span><span style="color:#A6ACCD;">/</span><span style="color:#F78C6C;">96</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">eex jspy e</span></span>
<span class="line"><span style="color:#A6ACCD;">-</span><span style="color:#F78C6C;">-00000010101</span><span style="color:#A6ACCD;">--</span></span>
<span class="line"></span></code></pre></div><p>这个时候出现了一个非常关键的字段 <code>Content-Type: multipart/byteranges;boundary=00000010101</code>，它代表了信息量是这样的:</p><ul><li>请求一定是多段数据请求</li><li>响应体中的分隔符是 <code>00000010101</code></li></ul><h2 id="追问-多线程下载的原理是什么-怎么实现呢" tabindex="-1">（追问）多线程下载的原理是什么？怎么实现呢？ <a class="header-anchor" href="#追问-多线程下载的原理是什么-怎么实现呢" aria-label="Permalink to &quot;（追问）多线程下载的原理是什么？怎么实现呢？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>将一个大文件<strong>分割成若干个小块</strong>，在<strong>不同的线程中分别下载不同的小块数据</strong>，以缩短文件下载的时间。<strong>每个线程都独立下载一部分数据</strong>，当所有线程下载完成后，将所有小块数据<strong>合并</strong>成一个完整的文件，从而实现多线程下载。</p></div><ol><li><p>将要下载的文件<strong>分成若干个小块</strong>，以便分别在不同的线程中下载。</p></li><li><p>创建线程池，根据需要下载的文件块数开启相应数量的线程。线程数和线程池大小的选择对下载速度和系统资源等都有一定的影响，需要根据实际情况进行调整。</p></li><li><p>在每个线程中使用 HTTP 协议向服务器发起下载请求并获取数据。在请求中需要<strong>指定下载开始和结束的位置</strong>，以便只下载需要的文件块。</p></li><li><p>将每个线程下载得到的文件块数据<strong>写入本地文件中，保证分块数据写入正确的位置</strong>，避免数据重复或者数据顺序错误等问题。</p></li><li><p>在所有线程下载完成后，将所有下载的文件块数据<strong>合并成一个完整的文件</strong>，从而得到完整的文件。</p></li></ol><p>重要：文件分块的大小设置为相同大小或者<strong>根据网络状况动态调整。</strong></p><p>代码可以参考下面的示例：</p><ul><li>在 UI 线程中，创建 Worker 对象，调用 worker.js 脚本下载数据。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// UI 线程部分代码</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建 Worker 对象，调用 worker.js 脚本下载数据</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">worker.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">worker</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://www.example.com/large_file.zip</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 接收来自 Worker 线程的消息并更新 UI</span></span>
<span class="line"><span style="color:#A6ACCD;">worker</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">percent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">progressElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">percent</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">%</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>worker.js 代码，接收到 UI 线程的消息后，向服务器发送 HTTP 请求，下载数据。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Worker 线程部分代码</span></span>
<span class="line"><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">start</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">end</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 利用 XMLHttpRequest 或者 Fetch API 向服务器请求数据并下载</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 将得到的数据片段发送给 UI 线程</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRequestHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Range</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">bytes=</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">start</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">end</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseType</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">blob</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">blob</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reader</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">FileReader</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onloadend</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readAsArrayBuffer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">blob</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="介绍一下-options-请求" tabindex="-1">介绍一下 options 请求 <a class="header-anchor" href="#介绍一下-options-请求" aria-label="Permalink to &quot;介绍一下 options 请求&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>options</code> 请求用来获取服务器支持的 HTTP 方法，同时也可以用来判断服务器是否支持跨域请求，是否有权限访问资源等。</p></div><p>它的 HTTP 报头包括以下字段：</p><p><code>Access-Control-Request-Method</code>: 获取所请求 URL 支持的 HTTP 方法 <code>Access-Control-Request-Headers</code>: 获取所请求 URL 支持的 HTTP 头</p><p>HTTP 请求头可能是这样</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">OPTIONS /api/user HTTP/</span><span style="color:#F78C6C;">1.1</span></span>
<span class="line"><span style="color:#A6ACCD;">Host: example.com</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Request-Method: GET</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Request-Headers: X-Requested-With</span></span>
<span class="line"></span></code></pre></div><p>响应头是这样</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HTTP/</span><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#A6ACCD;"> OK</span></span>
<span class="line"><span style="color:#A6ACCD;">Allow: GET, POST, PUT</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Allow-Methods: GET, POST, PUT</span></span>
<span class="line"><span style="color:#A6ACCD;">Access-Control-Allow-Headers: X-Requested-With</span></span>
<span class="line"></span></code></pre></div><p>服务器响应表明 API 支持 GET、POST 和 PUT 请求方法，可能支持 <code>X-Requested-With</code> 头（如果请求中存在该头，则允许跨域访问该资源）。</p><h2 id="http-1-0-和-http-1-1-之间有哪些区别" tabindex="-1">HTTP 1.0 和 HTTP 1.1 之间有哪些区别 <a class="header-anchor" href="#http-1-0-和-http-1-1-之间有哪些区别" aria-label="Permalink to &quot;HTTP 1.0 和 HTTP 1.1 之间有哪些区别&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>首先 HTTP1.1 支持持久连接，这使得可以在单个 TCP 连接上处理多个请求，这比 HTTP1.0 之前的单独连接更加高效。</p><p>其次 HTTP1.1 支持管线化机制，使得客户端可以在服务端响应之前发送多个请求。</p><p>此外，HTTP1.1 支持更完善的缓存控制机制，其中包括 Etag 和 If-None-Match 等首部字段，可以让客户端和服务端更加灵活地控制缓存。</p><p>因此 HTTP1.1 相对于 1.0 有更好的性能，更好的可靠性，更好的缓存控制能力</p></div><ul><li><p><strong>持久链接</strong>：<code>HTTP 1.1</code> 支持持久连接，可以使客户端和服务端之间的连接保持打开状态，使多个 HTTP 请求复用同一个 TCP 连接，从而可以在同一连接上发送多个请求和响应，<strong>减少每个请求的连接建立和关闭时间</strong>，提高了性能</p></li><li><p><strong>支持压缩</strong>：<code>HTTP 1.1</code> 支持使用 gzip、deflate 和 compress 等压缩算法对请求和响应数据进行压缩，减少传输的数据量，提高传输效率</p></li><li><p><strong>缓存控制</strong>：<code>HTTP 1.1</code> 引入了新的缓存机制，包括在<strong>客户端和服务器端指定缓存有效时间的首部字段</strong>。<code>Etag</code>、<code>If-none-match</code> <code>Last-Modified</code>、<code>If-Modified-Since</code> 等</p></li><li><p><strong>新增 Host 头部</strong>：<code>HTTP1.1</code> 必须使用 Host 首部，以便能够支持多个虚拟主机。</p></li><li><p><strong>范围请求</strong>：<code>HTTP 1.1</code> 在请求头引入 range 头域，允许客户端请求服务器只返回资源的一部分，而不是整个资源，<strong>返回码是 206</strong>，便于开发者自由选择充分利用带宽</p><ul><li><p>Range请求头有以下两种格式：</p></li><li><p><code>Range: bytes=[start]-[end]</code>表示请求资源的起始字节和结束字节的位置，start和end都是可选的，默认是整个资源。</p></li><li><p><code>Range: bytes=[start]-</code>表示从资源的起始字节位置到末尾的所有字节。</p></li></ul></li><li><p><strong>支持多种媒体类型</strong>：<code>HTTP1.1</code> 引入了新的 MIME 媒体类型，如 <code>application/xml</code>、<code>application/json</code> 等，能够支持更多的数据格式和内容类型。</p></li></ul><p>那么 HTTP 1.0 存在什么问题呢，为什么推出 HTTP1.1 呢？</p><h2 id="追问-http-1-1-的持久连接是怎么实现的" tabindex="-1">（追问）HTTP 1.1 的持久连接是怎么实现的？ <a class="header-anchor" href="#追问-http-1-1-的持久连接是怎么实现的" aria-label="Permalink to &quot;（追问）HTTP 1.1 的持久连接是怎么实现的？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>HTTP 1.1 持久连接的实现方式是在每次请求的头信息中加入了一个 <code>Connection: keep-alive</code> 的字段，表示这是一个持久连接，</p><p>当服务器收到这个字段后，就会在响应头中加入 <code>Connection: keep-alive</code> 和 <code>Keep-Alive: timeout=xx, max=xx</code> 字段字段，告诉客户端这个连接可以被重复使用。</p><p>客户端在接收到服务器端的响应后，即可<strong>使用同一个连接继续发送其他请求</strong>，避免了频繁地建立和断开TCP连接，提高了网络性能。</p><p>当客户端完成请求后，给服务器发送一个 <code>Connection: close</code> 字段，表示连接关闭。</p><p>HTTP 1.1 默认开启了 <code>keep-alive</code>，因此不用手动设置请求头。</p></div><p>可以看下面这个例子</p><p>创建需要请求多个资源的数据，然后向数组中的第一个资源发送请求，并设置 <code>Connection: keep-alive</code>，以建立持久连接，当第一个请求完成后，检查响应数量，如果还有资源需要请求，则使用相同的连接请求。</p><p>如果资源全部响应，那么添加一个 <code>Connection: close</code> 来关闭连接</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个 XMLHttpRequest 对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个 url 数组，需要请求多个页面资源</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> urls </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api/data1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api/data2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api/data3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 发送第一个请求，设置 connection 为 keep-alive 以建立持久连接</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> urls[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRequestHeader</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Connection</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">keep-alive</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 设置一个计数器，用于跟踪已经请求的资源数量</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> responsesReceived </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当前 XMLHttpRequest 对象的 onload 事件处理程序</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">XMLHttpRequest</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DONE</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 更新计数器</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">responsesReceived</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 处理服务器响应</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseText</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">responsesReceived</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">urls</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 如果还有其他资源需要请求，则发送另一个请求并保持连接</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">urls</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">responsesReceived</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRequestHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Connection</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">keep-alive</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 在所有资源都已请求后关闭连接</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRequestHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Connection</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">close</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">abort</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="追问-http-1-1-多个-http-请求的握手过程" tabindex="-1">（追问）HTTP 1.1 多个 HTTP 请求的握手过程 <a class="header-anchor" href="#追问-http-1-1-多个-http-请求的握手过程" aria-label="Permalink to &quot;（追问）HTTP 1.1 多个 HTTP 请求的握手过程&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>HTTP 1.1 默认开启了持久链接，也就是说多个请求会共用同一个 TCP 连接，在 HTTP1.0 下，每个 HTTP 请求都会经历 三次握手的过程，才会进行数据交互，在持久连接下，会复用第一次的 TCP 连接，免去了第二次 TCP 连接的握手过程，直接进行数据交互。</p><p>那么对于 N 次请求，就能节省 (N - 1) * RTT 的时间，RTT 是往返时延。现实情况中还会有 TCP 慢启动的过程，因此实际节省的时间更多。</p></div><h2 id="追问-http-1-1-管线化机制是如何实现的" tabindex="-1">（追问）HTTP 1.1 管线化机制是如何实现的？ <a class="header-anchor" href="#追问-http-1-1-管线化机制是如何实现的" aria-label="Permalink to &quot;（追问）HTTP 1.1 管线化机制是如何实现的？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>HTTP 1.1 的管线化机制是基于持久连接实现的，持久连接允许多个 HTTP 请求复用同一个 TCP 连接，基于持久连接，引入管线化机制，客户端可以在接收到前一个请求响应之前，继续发送请求，这样可以减少 RTT 带来的时延。</p><p>但是由于 HTTP1.1 处理请求和响应的处理是串行的，因此会出现对头阻塞的问题，多个请求同时到达服务器，服务器会并行处理，但是会按顺序依次进行响应，如果第一个请求挂了，那后续的请求也无法得到响应。</p></div><h2 id="追问-http1-1-管线化机制的缺陷如何解决。" tabindex="-1">（追问）HTTP1.1 管线化机制的缺陷如何解决。 <a class="header-anchor" href="#追问-http1-1-管线化机制的缺陷如何解决。" aria-label="Permalink to &quot;（追问）HTTP1.1 管线化机制的缺陷如何解决。&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>HTTP 2.0 采用帧和流以及多路复用解决。</p><p>浏览器产商为了缓解 HTTP1.1 管线化机制的缺陷，允许并行打开多个 TCP 会话，也就是常说的 浏览器只允许同一个服务器并行加载 4-8 个资源。</p><p>HTTP 持久连接解决了 TCP 复用的问题，但是 HTTP 管道无法实现多个请求结果交错返回，所以浏览器只能绕过 HTTP 限制，开启多个 TCP 连接，并行加载资源。</p><p>那么这样前端就可以通过域名区分的方式来突破浏览器的限制，实现更高的并行能力。</p><p>2 个域名就 8 - 16 个 TCP 连接，但这样的代价也很明显</p><ul><li>每个域名都会有 DNS 查询的开销</li><li>同时加载多个资源会把带宽占满</li></ul></div><h2 id="追问-http-1-0-存在什么问题呢-为什么需要升级-1-1-版本" tabindex="-1">（追问）HTTP 1.0 存在什么问题呢？为什么需要升级 1.1 版本？ <a class="header-anchor" href="#追问-http-1-0-存在什么问题呢-为什么需要升级-1-1-版本" aria-label="Permalink to &quot;（追问）HTTP 1.0 存在什么问题呢？为什么需要升级 1.1 版本？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关键词：持久连接、TCP 握手、分块传输、请求头长度</p></div><p>主要存在以下的问题</p><ol><li><code>HTTP1.0</code> <strong>每次请求都需要建立新的 TCP 连接</strong>，导致性能的浪费，因为连接的建立和释放都需要时间和计算资源，而每次只进行少量的数据传输，浪费连接浪费资源</li><li><code>HTTP1.0</code> <strong>没有长连接</strong> <code>keep-alive</code> 的机制，每个请求结束后连接立即关闭，从而再次传输数据时需要再次建立连接，这种情况下多次连接的建立和释放会增加网络负载，导致请求的延迟和处理时间延长。</li><li><code>HTTP1.0</code> 缺乏对虚拟主机的支持，<strong>同一个 IP 地址下的多个站点共享一个资源</strong>容易出现混乱，并且会使服务器的资源利用率降低，同时也会增加DNS服务器的负载。</li><li><code>HTTP1.0</code> 传输的数据<strong>没有分块传输的功能</strong>，如果传输的数据量比较大，传输时间比较长，那么客户端需要在传输完整个数据之后才能处理响应，这会导致等待时间过长。</li><li><code>HTTP1.0</code> 限制最大请求头长度为 1024字节，而最大响应头长度为 256字节，这个长度限制会导致传输的多余信息不能及时被截取，从而影响性能。</li></ol><p><code>HTTP1.1</code> 协议能够解决这些问题，通过持久连接、分块传输、虚拟主机的支持等机制，提供了更高效的数据传输方式，同时还支持对安全的加强，提高了网络质量。</p><p>同时 <code>HTTP/1.1</code> 中没有指定头部长度的具体限制，<strong>但建议不要超过8KB</strong>。这是因为较长的头部可能会导致网络延迟，浪费带宽并增加服务器负担。</p><h2 id="http-1-1-和-http2-0-有什么区别" tabindex="-1">HTTP 1.1 和 HTTP2.0 有什么区别？ <a class="header-anchor" href="#http-1-1-和-http2-0-有什么区别" aria-label="Permalink to &quot;HTTP 1.1 和 HTTP2.0 有什么区别？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>HTTP2.0 采用多路复用和帧和流技术，允许同时仅需多个请求和响应，并能够避免阻塞其他请求。这样就可以在同一个连接上并行处理多个请求，而不需要按照顺序一个一个的处理，从而提高了传输效率。</p><p>同时，HTTP2.0 采用 HPACK 压缩算法，对头部进行压缩，减少了传输的数据量和带宽占用 50% 左右。服务端推送也是 HTTP2.0 的一个重要特性，它允许服务器在客<strong>户端请求资源时，主动向客户端推送资源</strong>，从而<strong>减少了客户端的请求次数</strong>，提高了性能。</p><p>HTTP2.0 还优化了连接的建立、管理、关闭等方面，以及强制使用 HTTPS 协议，提高了网站的安全性和隐私保护。</p><p>HTTP2.0 采用的多路复用避免了 HTTP1.1 管线化机制带来的对头阻塞的问题。</p></div><ul><li><strong>二进制编码</strong>：<code>2.0</code> 版本是一个二进制协议，在 <code>1.1</code> 版本中，报文头信息必须是文本(<code>ASCII编码</code>)，数据可以是文本，也可以是二进制，<code>2.0</code>的头信息和数据体都是<strong>二进制</strong>，统称为<strong>帧</strong>，分为<strong>头信息帧</strong>(存放头部字段)和<strong>数据帧</strong>(存放请求体数据)，都是乱序的二进制帧，不存在先后关系不需要排队。 <ul><li>乱序的二进制帧如何组装成对应报文： <ul><li>所谓的乱序，指的是不同 <code>ID</code> 的 <code>Stream</code> 是乱序的，对于同一个 <code>Stream ID</code> 的帧是按顺序传输的。</li><li>接收方收到二进制帧后，将相同的 <code>Stream ID</code> 组装成完整的请求报文和响应报文。</li><li>二进制帧中有一些字段，控制着 <code>优先级</code> 和 <code>流量控制</code> 等功能，这样子的话，就可以设置数据帧的优先级，让服务器处理重要资源，优化用户体验。</li></ul></li></ul></li><li><strong>多路复用</strong>：HTTP 2.0 引入了<strong>多路复用</strong>技术，复用 TCP 连接，在一个连接里客户端和服务端口语同时发送多个请求和响应，大大提高了通信效率，缩短了页面加载时间，而且不需要按顺序发送，避免了<strong>对头堵塞</strong>的问题</li><li><strong>首部压缩</strong>：HTTP 2.0 使用了<strong>HPACK 算法</strong>对首部进行压缩，实现了在不降低可读性的前提下，将首部大小减小 50% 以上，减少了网络传输数据量和带宽的占用。</li><li><strong>服务端推送</strong>：HTTP2.0 允许服务器未经请求主动向<strong>客户端发送资源</strong>，交服务器推送，提前给客户端推送必要的资源，减少延迟时间，需要注意的是 HTTP2.0 主动推送的是<strong>静态资源</strong>，跟 ws 以及使用的 sse 向客户端发送即时数据的推送是不同的</li><li><strong>安全性提高</strong>：HTTP2.0 强制使用 HTTPS 协议，提高了网站的安全性和隐私保护。</li><li><strong>数据流</strong>：HTTP2.0 采用数据流的概念，因为 HTTP2.0 是二进制协议，同时不需要按顺序，所以<strong>同一个连接里的数据包，可能来源于不同的请求</strong>，所以需要进行数据包的标记。HTTP2.0 将每个请求或响应的所有数据包称为一个数据流，每个数据流都有一个唯一的 ID，这样就可以将不同的数据流区分开来，不会混淆。</li></ul><h2 id="http-1-1-存在什么问题-为什么诞生了-http2-0-版本" tabindex="-1">HTTP 1.1 存在什么问题？为什么诞生了 HTTP2.0 版本？ <a class="header-anchor" href="#http-1-1-存在什么问题-为什么诞生了-http2-0-版本" aria-label="Permalink to &quot;HTTP 1.1 存在什么问题？为什么诞生了 HTTP2.0 版本？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>HTTP1.1 的<strong>传输速度较慢，请求次数较多，头部大小较大</strong>都会影响到网页加载的速度，同时 HTTP1.1 头部<strong>压缩机制</strong>也存在着缺陷，不能很好的降低网络数据传输的开销，安全性也有问题。因此，HTTP2.0 诞生了。</p><p>HTTP2.0 为了解决这些问题，并改进 HTTP 的性能和安全性，使用了二进制协议和多路复用、帧和流等技术，提高了传输效率和降低了传输时的延迟和带宽开销，同时增加了<strong>服务端推送</strong>的功能，强制采用 HTTPS 协议，提高了网站的安全性和隐私保护。</p><p>HTTP1.1 的对头阻塞问题</p></div><ol><li><strong>速度慢</strong>：由于 HTTP1.1 在请求和响应的传输上采用<strong>类似于排队</strong>的方式，即一个连接上只能发送一个请求，必须等到响应完成后才能发送下一个请求，从而影响了网络通信的效率。</li><li><strong>不优秀的头部压缩机制</strong>：HTTP 1.1 使用的头部压缩机制存在着缺陷，不能很好地降低网络数据传输的开销。</li><li><strong>不支持服务器端推送</strong>：HTTP 1.1 不能主动推送资源，导致客户端需要多次发起请求以获取整体资源信息。</li><li><strong>安全性较差</strong>： HTTP1.1 最初设计时没有考虑隐私和安全性问题，所有信息都是<strong>明文传输</strong>，容易受到窃听、数据篡改等攻击手段的威胁。</li></ol><h2 id="追问-http1-1-不是支持持久连接吗-为什么请求的速度还是慢" tabindex="-1">（追问）HTTP1.1 不是支持持久连接吗？为什么请求的速度还是慢？ <a class="header-anchor" href="#追问-http1-1-不是支持持久连接吗-为什么请求的速度还是慢" aria-label="Permalink to &quot;（追问）HTTP1.1 不是支持持久连接吗？为什么请求的速度还是慢？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>HTTP1.1 可以使用 Connection: keep-alive 字段来指示服务器保持 TCP 连接开启而不关闭连接；而服务端也会在响应头上添加 Connection 字段来表明是持久连接的中间响应，并保持连接等待更多请求。</p><p>但是在一个 TCP 连接上完成多个请求或响应，会存在多个请求之间相互等待，阻塞等待响应、浪费时间的问题</p><p>举个列子来说：Web 页面需要请求很多个资源，如果只使用一个 TCP 连接，则必须发送一次请求，等待响应后，再发送下一个请求，等待响应。这个过程会很浪费时间。</p></div><p>这也就是前面说的对头阻塞问题吧？</p><p>在 HTTP 的 request --&gt; response 模型中，HTTP 一发一收，形成先进先出的串行队列，队列请求没有优先级，只有入队的顺序，最前面的请求最先被处理，<strong>如果队首的请求因为处理的太慢</strong>，后面的请求就会变延迟响应，这就是对头阻塞</p><p>队头阻塞的问题在于 HTTP 的串行队列</p><h2 id="追问-那么-http2-0-是如何解决队头阻塞的问题的呢" tabindex="-1">（追问）那么 HTTP2.0 是如何解决队头阻塞的问题的呢？ <a class="header-anchor" href="#追问-那么-http2-0-是如何解决队头阻塞的问题的呢" aria-label="Permalink to &quot;（追问）那么 HTTP2.0 是如何解决队头阻塞的问题的呢？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 HTTP2.0 中采用了多路复用的技术，来解决对头阻塞的问题，它把每个 HTTP 请求和响应都拆分成一个个更小的<strong>二进制帧</strong>，所有的请求都可以在同一个 TCP 连接上发送和接收，<strong>这个 TCP 连接被分为多个逻辑通道</strong>，每个逻辑通道可以承载一个或多个 HTTP 请求和响应。逻辑通道上可以同时传输，彼此相互独立，互不影响。</p><p>当多个请求通过一个 TCP 连接时，会被分为多个流，<strong>每个流有自己的编号，并且流之间相互独立。</strong></p><p>HTTP2.0 对<strong>请求头也进行了压缩</strong>，减少了请求头的大小。也不会像 HTTP1.1 那样一个请求结束再发下一个，而是可以直接发所有请求给服务端，避免了请求缓慢、发送等待的问题，提高了请求和传输的效率</p><p>同时再传输的过程中，HTTP2.0 会根据流的优先级和数据帧的大小等信息，动态的将这些帧组装成完整的请求或响应。</p></div><h2 id="追问-http1-1-的安全性问题-在-http2-0-中是如何解决的呢" tabindex="-1">（追问）HTTP1.1 的安全性问题，在 HTTP2.0 中是如何解决的呢？ <a class="header-anchor" href="#追问-http1-1-的安全性问题-在-http2-0-中是如何解决的呢" aria-label="Permalink to &quot;（追问）HTTP1.1 的安全性问题，在 HTTP2.0 中是如何解决的呢？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>HTTP2.0 默认用了 HTTPS 而不是 HTTP 协议，HTTPS 使用了 TLS 或 SSL 进行数据加密传输，这样可以防止在传输过程中被查看和修改数据。同时也对请求和响应头进行了压缩，也有一定的作用</p></div><h2 id="tcp-长连接和短链接的区别" tabindex="-1">TCP 长连接和短链接的区别 <a class="header-anchor" href="#tcp-长连接和短链接的区别" aria-label="Permalink to &quot;TCP 长连接和短链接的区别&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>TCP 长连接和短链接的区别在于它们在建立连接后的<strong>使用方式和关闭方式不同</strong></p><p>TCP 长连接，在数据传输完毕后，不会立即关闭连接，而是保持连接状态，等待下一次数据传输。这样可以减少建立和关闭连接的开销，提高网络的性能和响应速度。</p><p>TCP 短连接，在每次数据传输后，都会立即关闭连接，这种连接方式可以减少对服务器资源的占用，但每次进行 TCP 连接，都会带来开销，降低了网络的性能和响应速度。</p></div><p>在频繁通信的场景下，使用长连接能够提高通信效率和用户体验。而在需要确保安全性的场景下，比如 银行，短连接是更好的选择。</p><h2 id="http-中的-keep-alive-有了解吗-它和多路复用的区别" tabindex="-1"><code>HTTP</code> 中的 <code>keep-alive</code> 有了解吗？它和多路复用的区别? <a class="header-anchor" href="#http-中的-keep-alive-有了解吗-它和多路复用的区别" aria-label="Permalink to &quot;\`HTTP\` 中的 \`keep-alive\` 有了解吗？它和多路复用的区别?&quot;">​</a></h2><h2 id="你对-keep-alive-的理解" tabindex="-1">你对 keep-alive 的理解？ <a class="header-anchor" href="#你对-keep-alive-的理解" aria-label="Permalink to &quot;你对 keep-alive 的理解？&quot;">​</a></h2><h2 id="http2-0-的缺点有哪些" tabindex="-1">HTTP2.0 的缺点有哪些？ <a class="header-anchor" href="#http2-0-的缺点有哪些" aria-label="Permalink to &quot;HTTP2.0 的缺点有哪些？&quot;">​</a></h2><h2 id="https-和-http-的区别" tabindex="-1">HTTPS 和 HTTP 的区别？ <a class="header-anchor" href="#https-和-http-的区别" aria-label="Permalink to &quot;HTTPS 和 HTTP 的区别？&quot;">​</a></h2><h2 id="get-方法对-url-长度限制的原因" tabindex="-1">GET 方法对 URL 长度限制的原因？ <a class="header-anchor" href="#get-方法对-url-长度限制的原因" aria-label="Permalink to &quot;GET 方法对 URL 长度限制的原因？&quot;">​</a></h2><h2 id="页面有多张图片-http-如何加载" tabindex="-1">页面有多张图片，HTTP 如何加载？ <a class="header-anchor" href="#页面有多张图片-http-如何加载" aria-label="Permalink to &quot;页面有多张图片，HTTP 如何加载？&quot;">​</a></h2><h2 id="如何理解-http-代理" tabindex="-1">如何理解 HTTP 代理？ <a class="header-anchor" href="#如何理解-http-代理" aria-label="Permalink to &quot;如何理解 HTTP 代理？&quot;">​</a></h2><h2 id="http2-0-头部压缩算法如何实现" tabindex="-1">HTTP2.0 头部压缩算法如何实现？ <a class="header-anchor" href="#http2-0-头部压缩算法如何实现" aria-label="Permalink to &quot;HTTP2.0 头部压缩算法如何实现？&quot;">​</a></h2><h2 id="http-的优缺点" tabindex="-1">HTTP 的优缺点？ <a class="header-anchor" href="#http-的优缺点" aria-label="Permalink to &quot;HTTP 的优缺点？&quot;">​</a></h2><h2 id="rtt-往返时间是多少" tabindex="-1">RTT 往返时间是多少？ <a class="header-anchor" href="#rtt-往返时间是多少" aria-label="Permalink to &quot;RTT 往返时间是多少？&quot;">​</a></h2><h2 id="http-通信时间总和是多少" tabindex="-1">HTTP 通信时间总和是多少？ <a class="header-anchor" href="#http-通信时间总和是多少" aria-label="Permalink to &quot;HTTP 通信时间总和是多少？&quot;">​</a></h2><h2 id="https-通信时间总和是多少" tabindex="-1">HTTPS 通信时间总和是多少？ <a class="header-anchor" href="#https-通信时间总和是多少" aria-label="Permalink to &quot;HTTPS 通信时间总和是多少？&quot;">​</a></h2><h2 id="http-性能怎么样" tabindex="-1">HTTP 性能怎么样？ <a class="header-anchor" href="#http-性能怎么样" aria-label="Permalink to &quot;HTTP 性能怎么样？&quot;">​</a></h2><h2 id="为什么-http3-0-使用-udp-而不使用-tcp" tabindex="-1">为什么 HTTP3.0 使用 UDP 而不使用 TCP <a class="header-anchor" href="#为什么-http3-0-使用-udp-而不使用-tcp" aria-label="Permalink to &quot;为什么 HTTP3.0 使用 UDP 而不使用 TCP&quot;">​</a></h2><h2 id="说说-http3-0-的实现" tabindex="-1">说说 HTTP3.0 的实现？ <a class="header-anchor" href="#说说-http3-0-的实现" aria-label="Permalink to &quot;说说 HTTP3.0 的实现？&quot;">​</a></h2>`,127),e=[p];function t(c,r,y,i,F,D){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
