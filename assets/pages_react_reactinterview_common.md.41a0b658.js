import{_ as e,c as a,o,U as t}from"./chunks/framework.4d5e0f31.js";const u=JSON.parse('{"title":"React 常见面试题","description":"","frontmatter":{},"headers":[],"relativePath":"pages/react/reactinterview/common.md","lastUpdated":1681983104000}'),c={name:"pages/react/reactinterview/common.md"},r=t('<h1 id="react-常见面试题" tabindex="-1">React 常见面试题 <a class="header-anchor" href="#react-常见面试题" aria-label="Permalink to &quot;React 常见面试题&quot;">​</a></h1><p>在前面两个部分，写了 React 的基础使用，以及 React 源码的解析，包括了它的一些设计理念。但是对于面试来说，前面的内容，可能并不适合复习，知识点太过于零散了，所以在这个部分，会对一些常见的 React 面试题，做出我的回答。以供往后复习，也可以给大家一些参考。</p><div class="tip custom-block"><p class="custom-block-title">写在前面</p><p>如果有什么回答错误的地方，欢迎您在 GitHub 上提 issue，或者直接添加我的微信：<strong>Ljc-10c</strong> ，进行沟通</p></div><h2 id="react-为什么要造出-hooks-呢" tabindex="-1">React 为什么要造出 Hooks 呢？ <a class="header-anchor" href="#react-为什么要造出-hooks-呢" aria-label="Permalink to &quot;React 为什么要造出 Hooks 呢？&quot;">​</a></h2><p>在没有 Hooks 的时候，函数组件能够做的只是接受 Props、渲染 UI，以及触发父组件传过来的事件。所有的处理逻辑都要在类组件中写，这样会使得 Class 类组件内部错综复杂，每一个类组件都有一套独特的状态，相互之间不能复用，即便是使用 mixin 的复用方式也没有很好的解决。</p><p>类组件是之间的状态会随着功能的增强变得越来越臃肿，代码维护成本越来越高，不利于 Tree Shaking。</p><p>Hooks 出现的本质原因是，为了让函数式组件也能做类组件的事，有自己的状态，可以处理一些副作用、获取 Ref、也能够缓存数据，同时函数组件也能够让复用变得更加简单。</p><h2 id="追问-react-hooks-如何把状态保存起来-保存的信息存在了哪里" tabindex="-1">（追问）React Hooks 如何把状态保存起来？保存的信息存在了哪里？ <a class="header-anchor" href="#追问-react-hooks-如何把状态保存起来-保存的信息存在了哪里" aria-label="Permalink to &quot;（追问）React Hooks 如何把状态保存起来？保存的信息存在了哪里？&quot;">​</a></h2><p>在 React 的 render 阶段 fiber 调和的过程中，当遇到了 Function Component 类型的 Fiber，就会用 <code>updateFunctionComponent</code> 来更新 Fiber，在 <code>updateFunctionComponent</code> 的内部会调用 <code>renderWithHooks</code>。在 <code>renderWithHooks</code> 中，会用 <code>memoizedState</code> 保存 hooks 信息。</p><p>Hooks 的信息会被保存到 Fiber 的 <code>memoizedState</code> 中，这个 <code>memoizedState</code> 是一个链表，这个链表的连接关系就是 Hooks 的调用顺序，链表的每个节点都是一个 hooks 的信息，这个 hooks 对象中，保存着当前 hooks 的信息，不同 hooks 保存的形式不同</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgtwo/20230417003644.png" alt="" data-fancybox="gallery"></p><h2 id="追问-为什么-react-hooks-不能写在条件语句中" tabindex="-1">（追问）为什么 React Hooks 不能写在条件语句中 <a class="header-anchor" href="#追问-为什么-react-hooks-不能写在条件语句中" aria-label="Permalink to &quot;（追问）为什么 React Hooks 不能写在条件语句中&quot;">​</a></h2><p>因为在 React hooks 更新的过程中，首先会从 workInProgress.alternate 中取出对应的 hook，这个取出其实是按照顺序的，然后根据这个 hooks 复制一份，形成新的 hooks 链表关系。</p><p>根据这个规则，如果在 if 条件语句中，使用 hooks，有可能导致 前后的 hooks 数量不一致，在复用 hooks 的过程中，会出现错乱的问题，也就导致了前后状态不一致的问题。</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgtwo/20230417004301.png" alt="" data-fancybox="gallery"></p><h2 id="react-hooks-的大致原理" tabindex="-1">React Hooks 的大致原理？ <a class="header-anchor" href="#react-hooks-的大致原理" aria-label="Permalink to &quot;React Hooks 的大致原理？&quot;">​</a></h2><h2 id="react-hooks-解决了什么问题" tabindex="-1">React Hooks 解决了什么问题 <a class="header-anchor" href="#react-hooks-解决了什么问题" aria-label="Permalink to &quot;React Hooks 解决了什么问题&quot;">​</a></h2><h2 id="什么是虚拟-dom-它的作用是什么" tabindex="-1">什么是虚拟 DOM，它的作用是什么？ <a class="header-anchor" href="#什么是虚拟-dom-它的作用是什么" aria-label="Permalink to &quot;什么是虚拟 DOM，它的作用是什么？&quot;">​</a></h2><h2 id="react-diff-的原理" tabindex="-1">React Diff 的原理？ <a class="header-anchor" href="#react-diff-的原理" aria-label="Permalink to &quot;React Diff 的原理？&quot;">​</a></h2><h2 id="react-为什么需要-diff" tabindex="-1">React 为什么需要 Diff？ <a class="header-anchor" href="#react-为什么需要-diff" aria-label="Permalink to &quot;React 为什么需要 Diff？&quot;">​</a></h2><h2 id="usestate-为什么用数组来声明-为什么不用对象" tabindex="-1">useState 为什么用数组来声明，为什么不用对象？ <a class="header-anchor" href="#usestate-为什么用数组来声明-为什么不用对象" aria-label="Permalink to &quot;useState 为什么用数组来声明，为什么不用对象？&quot;">​</a></h2><p>数组解构是按照顺序的，对象是按名字的</p><h2 id="react-cloneelement-和-createelement-的区别" tabindex="-1">React cloneElement 和 createElement 的区别？ <a class="header-anchor" href="#react-cloneelement-和-createelement-的区别" aria-label="Permalink to &quot;React cloneElement 和 createElement 的区别？&quot;">​</a></h2><h2 id="react-中的-key-的作用是什么" tabindex="-1">React 中的 key 的作用是什么？ <a class="header-anchor" href="#react-中的-key-的作用是什么" aria-label="Permalink to &quot;React 中的 key 的作用是什么？&quot;">​</a></h2>',24),s=[r];function i(n,h,l,d,k,m){return o(),a("div",null,s)}const f=e(c,[["render",i]]);export{u as __pageData,f as default};
