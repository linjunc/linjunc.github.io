import{_ as s,c as o,o as a,U as n}from"./chunks/framework.4d5e0f31.js";const A=JSON.parse('{"title":"Javascript客户端存储技术你知道多少？","description":"客户端存储技术 为了提升用户的体验感，直接在客户端存储用户信息的需求也随之增加。无论是实现自动登录，个人偏好，换肤功能等，都能使用客户端存储来实现","frontmatter":{"title":"Javascript客户端存储技术你知道多少？","date":"2021-05-11T21:52:18.000Z","id":1635663138,"photos":"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E5%AE%A2%E6%88%B7%E7%AB%AF.png","tags":["JavaScript"],"categories":["前端总结"],"keywords":"客户端存储,JavaScript客户端存储,小丞同学","description":"客户端存储技术 为了提升用户的体验感，直接在客户端存储用户信息的需求也随之增加。无论是实现自动登录，个人偏好，换肤功能等，都能使用客户端存储来实现"},"headers":[],"relativePath":"pages/summary/storage.md","lastUpdated":1686995766000}'),l={name:"pages/summary/storage.md"},p=n(`<p>为了提升用户的体验感，直接在客户端存储用户信息的需求也随之增加。无论是实现自动登录，个人偏好，换肤功能等，都能使用客户端存储来实现。本文将介绍Web客户端常见的几种存储方式，将结合实际应用场景进行分析，以及相关代码分享</p><p><strong>先上图</strong>，本文知识归纳</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8.png" alt="" data-fancybox="gallery"></p><h2 id="_1-cookie" tabindex="-1">1. Cookie <a class="header-anchor" href="#_1-cookie" aria-label="Permalink to &quot;1. Cookie&quot;">​</a></h2><p><code>Cookie</code> 是一些数据， 存储于电脑上的文本文件中。在<strong>HTML5</strong>到来之前，<code>cookie</code>是主要的存储方式。</p><blockquote><p>对于<code>cookie</code>的历史由于学识过浅就不过多讨论 😔</p></blockquote><h3 id="_1-1-cookie的限制" tabindex="-1">1.1 Cookie的限制 <a class="header-anchor" href="#_1-1-cookie的限制" aria-label="Permalink to &quot;1.1 Cookie的限制&quot;">​</a></h3><p>因为<code>cookie</code>存储在客户端的机器中，所以为了保证它不被恶意利用，浏览器会加以限制，只要遵守下列规则就不会有什么问题</p><ul><li>不超过300个cookie</li><li>每个cookie不超过4096字节，也就是<code>4k</code></li><li>每个域不超过20个cookie</li><li>每个域不超过81920字节</li></ul><p>每个域能设置的cookie总数也是受限的，但不同浏览器的限制不同</p><p><code>注意</code>：当cookie总数超过了单个域的上限，浏览器就会删除==<strong>之前设置</strong>==的<code>cookie</code></p><h3 id="_1-2-cookie的构成" tabindex="-1">1.2 cookie的构成 <a class="header-anchor" href="#_1-2-cookie的构成" aria-label="Permalink to &quot;1.2 cookie的构成&quot;">​</a></h3><p><code>cookie</code>在浏览器中是由以下参数构成的</p><ol><li><strong>名称</strong>：cookie名不区分大小写，因此<code>myCookie</code>和<code>MyCookie</code>是同一个名称。不过，实践中最好将<code>cookie</code>名当成区分大小写来对待，不仅提高代码的可读性，同时避免一些不必要的误会</li><li><strong>值</strong>：存储在<code>cookie</code>里的字符串值</li><li><strong>域</strong>：domain表示的是cookie所在的域， 默认cookie的域是==<strong>当前域名</strong>==。</li><li><strong>路径</strong>：请求<code>URL</code> 中包含这个路径才会把 <code>cookie</code>发送到服务器，例如：指定cookie路径为<code>http://www.baidu.com/my/ljc</code> 则<code>http://www.baidu.com/my/</code>下的页面就不会发送<code>cookie</code></li><li><strong>过期时间</strong>：表示什么时间删除<code>cookie</code>，即不再发送到服务器。默认情况下浏览器==<strong>会话结束后</strong>==会删除所有cookie。不过，可以设置删除<code>cookie</code>的具体时间，这样即使关闭浏览器<code>cookie</code>也会保存在用户的本机上。把过期时间设置为过去的时间就可以实现删除<code>cookie</code></li><li><strong>安全标志</strong>：只在使用SSL安全连接的情况下才会把<code>cookie</code>发送到服务器。例如，https请求就能发送<code>ccokie</code>，而http请求则不会，添加<code>secure</code>字样即可开启</li></ol><p>这些参数在使用中使用==<strong>分号隔开</strong>==</p><h3 id="_1-3-javascript中cookie的使用" tabindex="-1">1.3 JavaScript中cookie的使用 <a class="header-anchor" href="#_1-3-javascript中cookie的使用" aria-label="Permalink to &quot;1.3 JavaScript中cookie的使用&quot;">​</a></h3><p>这里将结合==<strong>自动登录</strong>==功能来谈论，将经过4个步骤，设置<code>cookie</code>，获取<code>cookie</code>，移除<code>cookie</code>，以及初始化操作</p><h4 id="_1-3-1-设置cookie" tabindex="-1">1.3.1 设置cookie <a class="header-anchor" href="#_1-3-1-设置cookie" aria-label="Permalink to &quot;1.3.1 设置cookie&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setCookie</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">date</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTime</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">30</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">24</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">60</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">60</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cookie</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">username=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">valId</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">;path=/;expires=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toGMTString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//用户名</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cookie</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">psd=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">valPsd</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">;path=/;expires=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> 	</span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toGMTString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//密码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在上面的代码中，设置了名为<code>username</code>和<code>psd</code>的cookie，设置了<code>path</code>在任何路径下可以访问，过期时间为30天，</p><p><code>注意</code>：这里会有<strong>8小时的误差</strong>，原因是浏览器时间为当前所在地区的时间，而代码中通过<code>toGMTString</code>转化后的时间是==格林威治时间==，北京处于东八区，所以时间会早8小时，如果化为准确的30天的话，加8小时即可~</p><p><code>注意</code>：在保存账号密码时可以进行==加密处理==</p><h4 id="_1-3-2-移除cookie" tabindex="-1">1.3.2 移除cookie <a class="header-anchor" href="#_1-3-2-移除cookie" aria-label="Permalink to &quot;1.3.2 移除cookie&quot;">​</a></h4><p>在前面也有说到，当当前时间超过了cookie的过期时间，cookie就会自动的被清除，我们就利用这个特性来实现移除cookie的功能</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeCookie</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">date</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTime</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">60</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">60</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//过去的时间</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cookie</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">username=path=/;expires=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toGMTString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cookie</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">psd=;path=/;expires=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toGMTString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在上面的代码中，重点留意第三行，通过重新设置时间戳，使得过期时间为过去的时间，这样cookie就自动的被清除了。</p><p><code>注意</code>：当我们在设置同名的cookie时，会覆盖先前的cookie，从而实现了移除cookie的功能</p><h4 id="_1-3-3-获取cookie值" tabindex="-1">1.3.3 获取cookie值 <a class="header-anchor" href="#_1-3-3-获取cookie值" aria-label="Permalink to &quot;1.3.3 获取cookie值&quot;">​</a></h4><p>获取cookie的操作比较复杂，JavaScript中没有太多的API给我们去操作cookie，只有BOM中的<code>document.cookie</code>属性。相信都不会陌生吧，当它作为<code>键</code>存在时可以用于设置cookie。当作为<code>值</code>被调用时，可以返回当前地址下的所有cookie，为==<strong>字符串</strong>==类型</p><p><code>注意</code>：存在多个cookie一起返回时，用<code>;</code> 隔开。<code>name1=value1;name2=value2</code>，因此获取cookie值要经历以下几步</p><ol><li>利用字符串中<code>split</code>方法，将返回的字符串通过<code>;</code>标识符进行分割返回数组</li><li>再通过遍历分割好的cookie数组，逐一判断需要获取的cookie名，最后再通过处理数组值从而得到cookie值。</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getCookie</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">cookieName</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">cookieName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cookieList</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cookie</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cookieList</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cookieItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cookieList</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//去除空格</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">cookieItem</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cookieName</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cookieItem</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cookieName</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cookieItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在代码中出现了很多数组，字符串的API，下面我们来一个个分析以下</p><ul><li>在第4行中，字符串API<code>split</code>，这个方法的作用是，通过特定的标识符对字符串进行分割，返回分割好的数组，例如：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">How=are;you=doing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(n)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// [&quot;How=are&quot;, &quot;you=doing&quot;]</span></span>
<span class="line"></span></code></pre></div><ul><li>在第5行中使用到了<code>trim</code>方法，用于==去除首尾==的空格，避免空格对后面处理值造成影响</li><li>在第6行中使用到了字符串方法<code>indexOf</code>，用于查找字符串中是否存在我们需要的获取的cookie名，找得到返回值就为首次出现的索引，否则为<code>-1</code></li></ul><blockquote><p><code>inedxOf</code>方法可返回某个指定的字符串值在字符串中首次出现的位置。如果没有找到匹配的字符串则返回 -1。</p></blockquote><ul><li>在第7行中使用了字符串的方法<code>substring</code>，改方法用于==切割字符串==，要传入两个参数，切割的初始位置和末位置</li></ul><h4 id="_1-3-4-初始化操作" tabindex="-1">1.3.4 初始化操作 <a class="header-anchor" href="#_1-3-4-初始化操作" aria-label="Permalink to &quot;1.3.4 初始化操作&quot;">​</a></h4><p>有了前面的铺垫，这里就比较轻松了，我们只需要判断以下当前地址下的cookie中是否存在，用户名和密码，如果存在，我们就为他们进行自动登录，这一步一般放在代码的最前面，用户打开页面就先判断</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">initData</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">getCookie</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">username</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getCookie</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">psd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//需要进行的操作</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>注意</code>：这里可能有人会有疑问，只要有用户名密码就好了吗？</p><ul><li>我的答案是：是的，因为我们可以在用户登录的时候，只有用户成功登录了，我们才会为它设置cookie，所以，不用担心密码错误的问题。</li></ul><p>以上就是JavaScript中操作利用<code>cookie</code>实现自动登录的实现过程，<strong>设置，获取，移除</strong></p><hr><p>对cookie的限制及特性决定了cookie并不是存储==大量数据==的理想方式。因此，其他客户端技术出现了</p><p><code>注意</code>：不要在cookie中存储重要或敏感信息，cookie的数据保存并不是在安全的地方。</p><h2 id="_2-web-storage" tabindex="-1">2. Web Storage <a class="header-anchor" href="#_2-web-storage" aria-label="Permalink to &quot;2. Web Storage&quot;">​</a></h2><p>在<strong>HTML5</strong>中引进了两种存储方式<code>sessionStorage</code>和<code>localStorage</code>。<code>web Storage</code>的目的解决通过客户端存储不需要频繁发送回服务器的数据时使用<code>cookie</code>的问题。</p><p><code>localStorage</code>和<code>sessionStorage</code>存储在用户本地的浏览器上，不像cookie一样携带在http请求头部的字段中，有效的避免了性能问题。<code>localStorge</code>同样也采用了同源策略对存储的容量进行了限制，大多数设置限制为同一域名<strong>5M</strong>的存储空间。</p><blockquote><p>这里重点讲本地存储，临时存储的方法相同</p></blockquote><p><code>注意</code>：两种方式存储的值都只能是==<strong>字符串</strong>==的形式</p><h3 id="_2-1-localstorage对象" tabindex="-1">2.1 localStorage对象 <a class="header-anchor" href="#_2-1-localstorage对象" aria-label="Permalink to &quot;2.1 localStorage对象&quot;">​</a></h3><blockquote><p><code>localStorage</code>：没有时间限制，持续范围超过当前会话，浏览器关闭再打开数据依然是可用的（注意是同一域名下）</p></blockquote><p><code>localstorage</code>的存储方式是以==<code>key-value</code>==的形式进行存储的，首先我们先了解以下其中的操作方法</p><ol><li><p><code>localstorage.length</code>：获取当前存储中的键值对数量</p></li><li><p><code>localstorage.key(index)</code>：得到某个索引的键值</p></li><li><p><code>localstorage.getItem(key)</code>：读取对应键值的数据</p></li><li><p><code>localstorage.setItem(key,value)</code>：设置对应的键值对，保存数据</p></li><li><p><code>localstorage.remove(key)</code>：清除某个指定数据</p></li><li><p><code>localstorage.clear()</code>：清除存储的所有数据</p></li></ol><h4 id="_2-1-1-小demo" tabindex="-1">2.1.1 小demo <a class="header-anchor" href="#_2-1-1-小demo" aria-label="Permalink to &quot;2.1.1 小demo&quot;">​</a></h4><p>接下来先实现一个简单的保存查找功能，有以下</p><ul><li>保存用户的名称，以及拥有的金钱数量</li><li>通过用户名查询到对应的金钱数量</li></ul><p><strong>代码实现</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#myName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//获取需要保存的用户名</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">money</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#money</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//金钱数量</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">myName</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">money</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//保存</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>首先当我们需要进行保存数据时，我们会调用set函数，通过获取当前的需要保存的数据，直接进行保存</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">searchName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#searchName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">youMoney</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">searchName</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">findEnd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#findEnd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//页面上的渲染位置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">findEnd</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">youMoney</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>当我们需要获取用户的金钱数时，我们调用find方法，先确定需要获取的人是谁，再通过<code>getItem</code>方法获取本地存储中的键值，再渲染到页面上。</p><p>这样我们就实现了一个简单的本地存储，如果需要进行其他的操作，像删除本地存储这些，这里示例删除数据</p><p><strong>删除指定数据</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//delete localStorage.myName;</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeItem</span><span style="color:#A6ACCD;">(myName)</span></span>
<span class="line"></span></code></pre></div><p>有两种方法能够实现删除的操作，使用<code>delete</code> 和<code>removeItem</code>删除指定的数据</p><p>其他的就不过多赘述了，方法一样。</p><hr><p>从上面的操作中我们会发现我们需要新建过多的存储信息，每一个用户信息都我们要为他们新创建一个本地存储，更多情况下我们存储的数据会更复杂，这样的方法就会变的更加的麻烦</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/local.png" alt="local" data-fancybox="gallery"></p><p><strong>就像图片中的这样</strong>，这样的方式并不是友好的，因此我们需要优化它。</p><h4 id="_2-1-2-对象存储方式" tabindex="-1">2.1.2 对象存储方式 <a class="header-anchor" href="#_2-1-2-对象存储方式" aria-label="Permalink to &quot;2.1.2 对象存储方式&quot;">​</a></h4><p>在需要对单个用户的大量信息进行存储时，我们可以采用==对象存储方式==进行存储，将一个用户的姓名，年龄，性别等信息，存入对象中再保存</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">username</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ljc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">20</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">sickName </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">小猴</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">sex </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">男</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(user)</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> user)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>由于==只能==存储字符串类型的数据，我们采用<code> JSON.stringify</code>方法将对象转化为字符串，存储结果的value为：</p><p><code> {&quot;username&quot;:&quot;ljc&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sickName&quot;:&quot;小猴&quot;,&quot;sex&quot;:&quot;男&quot;}</code></p><p>这样我们就实现了我们想要的操作。</p><ul><li>当我们需要存储更多的用户数据时，而不单单是一个用户数据时，我们可以继续在上面的代码中优化，我们可以将用户数据存放于数组中，在使用<code>JSON.stringify</code>将数组转化为字符串，从而实现，在上面代码的基础上进行修改</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> userArr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#A6ACCD;">userArr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(user) </span></span>
<span class="line"><span style="color:#A6ACCD;">userArr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(userArr)</span></span>
<span class="line"></span></code></pre></div><p>下面我们来看看储存结果</p><p><code>[{&quot;username&quot;:&quot;ljc&quot;,&quot;age&quot;:&quot;20&quot;,&quot;sickName&quot;:&quot;小猴&quot;,&quot;sex&quot;:&quot;男&quot;}]</code></p><p>可以看到现在的value中存放的是一个数组，我们可以==通过push方法==继续的追加用户信息，从而实现了想要的优化</p><p>在我们获取本地存储的数据时，需要将获取数据经过<code>JSON.parse</code>==转化为对象==再使用</p><h3 id="_2-2-sessionstorage对象" tabindex="-1">2.2 sessionStorage对象 <a class="header-anchor" href="#_2-2-sessionstorage对象" aria-label="Permalink to &quot;2.2 sessionStorage对象&quot;">​</a></h3><p>又叫临时存储，顾名思义只是暂时存储，在浏览器会话窗口关闭后，会全部清除</p><blockquote><p>操作方法和<code>localStorage</code>完全一致，就不过多阐述</p></blockquote><h2 id="_3-几者的区别" tabindex="-1">3.几者的区别 <a class="header-anchor" href="#_3-几者的区别" aria-label="Permalink to &quot;3.几者的区别&quot;">​</a></h2><ol><li>cookie在每次请求时都会被发送到服务器，这样会浪费带宽</li><li>cookie中的操作方法需要自己封装，web storage中有<code>setItem</code>，<code>getItem</code>等方法</li><li>cookie能够与服务器端交互，web Storage只是将数据保存在本地</li><li>存储数据的大小限制不一样，<code>cookie</code>一般4k，<code>web Storage</code>一般5M</li><li>数据的生命周期不一致，cookie能设置时间，本地存储是永久性的，临时存储可以说是一次性的</li><li>作用域不同，<code>sessionStorage</code>不在不同的浏览器窗口中共享，<code>localstorage</code>和<code>cookie</code>在所有同源窗口中都是共享的；</li></ol><hr><p>以上就是关于客户端存储的几种常用方式的归纳，希望看完的你能有所收获~</p><blockquote><p>参考文献：JavaScript高级程序设计（第4版）</p></blockquote>`,93),e=[p];function c(t,r,y,F,D,i){return a(),o("div",null,e)}const C=s(l,[["render",c]]);export{A as __pageData,C as default};
