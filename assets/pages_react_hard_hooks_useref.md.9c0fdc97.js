import{_ as s,c as a,o,V as n}from"./chunks/framework.3d11d069.js";const e="/assets/userefupdate.4534a6b9.png",A=JSON.parse('{"title":"useRef 源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"pages/react/hard/hooks/useref.md","filePath":"pages/react/hard/hooks/useref.md","lastUpdated":1688305019000}'),l={name:"pages/react/hard/hooks/useref.md"},p=n(`<h1 id="useref-源码解析" tabindex="-1">useRef 源码解析 <a class="header-anchor" href="#useref-源码解析" aria-label="Permalink to &quot;useRef 源码解析&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">前情提要</p><p>mountWorkInProgressHook 和 updateWorkInProgressHook 这两个方法的详解可以在<a href="./useState.html#在-update-阶段，updatestate">这里</a>看到 本部分不做讲解</p></div><h2 id="useref-的实现" tabindex="-1">useRef 的实现 <a class="header-anchor" href="#useref-的实现" aria-label="Permalink to &quot;useRef 的实现&quot;">​</a></h2><p>useRef 是一种近乎原生 hook,就是将 hook 的状态指向了某一个值,它用<strong>对象</strong>的方式,将它放存在堆内存中,保证指向和修改正确</p><h2 id="mountref" tabindex="-1">MountRef <a class="header-anchor" href="#mountref" aria-label="Permalink to &quot;MountRef&quot;">​</a></h2><blockquote><p>省略了部分代码</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mountRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">initialValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{|</span><span style="color:#F07178;">current</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">} {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">hook</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mountWorkInProgressHook</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">ref</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">current</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> initialValue</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">hook</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">memoizedState</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">ref</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>mountRef 的实现十分简单。</p><ol><li>首先会创建一个 hook 对象，该 hook 对象将会被添加到 <code>workInProgressHook</code> 单向链表中，接下来将要创建的 ref 对象将会被缓存到该 hook 对象上</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> hook </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mountWorkInProgressHook</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ol start="2"><li>接着创建一个 ref 对象，其 <code>current</code> 属性初始化为传入的参数(initialValue)：</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ref </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">current</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> initialValue </span><span style="color:#89DDFF;">};</span></span></code></pre></div><ol start="3"><li>然后将 ref 对象缓存到 hook 对象的 <code>memoizedState</code> 属性上</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">hook</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">memoizedState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ol start="4"><li>最后返回一个可变的 ref 对象，<strong>其属性 current 发生变化时，不会引发组件重新渲染</strong></li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="updateref" tabindex="-1">updateRef <a class="header-anchor" href="#updateref" aria-label="Permalink to &quot;updateRef&quot;">​</a></h2><p>调用 updateRef 函数，通过 <code>updateWorkInProgressHook</code> 方法直接取出 hook.memoizedState。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">initialValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{|</span><span style="color:#F07178;">current</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">} {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">hook</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">updateWorkInProgressHook</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">hook</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">memoizedState</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>没骗人，这个方法就这么长 <img src="`+e+'" alt="userefupdate" data-fancybox="gallery"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>可以看到在 <code>mount</code> 时 <code>hook.memoizedState</code> 挂的就是一个对象 <code>{ current: initialValue }</code>，这就解释了我们可以直接通过 <code>ref.current</code> 去<strong>改变和获取最新的值</strong>，不必进行任何依赖注入</p><p>因为它的本质就是一个对象哈，并不会引发组件的渲染，影响其他的东西</p><p>看到这里相信你一定会很震撼，一定也能感受到阅读源码给你带了的提升，在下次使用 <code>useRef</code> 的时候一定得心应手</p>',24),t=[p];function r(c,i,y,D,F,C){return o(),a("div",null,t)}const u=s(l,[["render",r]]);export{A as __pageData,u as default};
