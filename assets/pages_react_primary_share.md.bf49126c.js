import{_ as s,c as a,o as n,V as o}from"./chunks/framework.3d11d069.js";const i=JSON.parse('{"title":"React 入门学习（十六）-- 数据共享","description":"引言 在写完了基本的 Redux 案例之后，可以尝试一些更实战性的操作，比如可以试试多组件间的状态传递，相互之间的交互","frontmatter":{"title":"React 入门学习（十六）-- 数据共享","date":"2021-09-11T10:36:38.000Z","id":1635582998,"tags":["react"],"categories":["React入门学习"],"keywords":"react,数据共享,小丞同学","description":"引言 在写完了基本的 Redux 案例之后，可以尝试一些更实战性的操作，比如可以试试多组件间的状态传递，相互之间的交互"},"headers":[],"relativePath":"pages/react/primary/share.md","filePath":"pages/react/primary/share.md","lastUpdated":1692979255000}'),l={name:"pages/react/primary/share.md"},p=o(`<p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB.gif" alt="数据共享" data-fancybox="gallery"></p><blockquote><p>📢 大家好，我是小丞同学，一名<div color="#2e86de"><strong>大二的前端爱好者</strong></div></p><p>📢 这篇文章是学习 React-Redux 数据共享 的学习笔记</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <div color="#f368e0"><strong>愿你忠于自己，热爱生活</strong></div></p></blockquote><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在写完了基本的 Redux 案例之后，我们可以尝试一些更实战性的操作，比如我们可以试试多组件间的状态传递，相互之间的交互</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-redux-demo.gif" alt="react-redux-demo" data-fancybox="gallery"></p><p>如上动图所示，我们想要实现上面的案例，采用纯 React 来实现是比较困难的，我们需要<strong>很多层的数据交换</strong>才能实现，但是我们如果采用 Redux 来实现会变得非常简单</p><p>因为 Redux <strong>打通了组件间的隔阂</strong>，我们可以自由的进行数据交换，所有存放在 <code>store</code> 中的数据都可以实现共享，那我们接下来看看如何实现的吧~</p><h2 id="_1-编写-person-组件" tabindex="-1">1. 编写 Person 组件 <a class="header-anchor" href="#_1-编写-person-组件" aria-label="Permalink to &quot;1. 编写 Person 组件&quot;">​</a></h2><blockquote><p>上面的 Count 组件，已经在前面几篇写过了，但是我没有记录详细的实现过程，只是做了一些小小的总结（我摸鱼了）</p></blockquote><p>不管如何，我们先来实现一个 Person 组件吧</p><p>首先我们需要在 <code>containers</code> 文件夹下编写 Person 组件的<strong>容器组件</strong></p><p>如何编写一个容器组件呢？（上一篇也讲过了）</p><p>首先我们需要编写 <code>index.jsx</code> 文件，在这个文件里面编写 Person 组件的 <strong>UI 组件</strong>，并使用 <code>connect</code> 函数将它包装，<strong>映射它的状态和方法</strong></p><h4 id="编写-ui-组件架构" tabindex="-1"><strong>编写 UI 组件架构</strong> <a class="header-anchor" href="#编写-ui-组件架构" aria-label="Permalink to &quot;**编写 UI 组件架构**&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">我是 Person 组件,上方组件求和为:</span><span style="color:#89DDFF;">{this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">countAll</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">nameNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">输入名字</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">ageNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">输入年龄</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={this.</span><span style="color:#A6ACCD;">addPerson</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">添加</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">persons</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">--</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>我们可以看到这里采用了 <code>ref</code> 来获取到当前事件触发的节点，并通过 <code>this.addPerson</code> 的方式给按钮绑定了一个点击事件</p><h4 id="编写点击事件回调" tabindex="-1"><strong>编写点击事件回调</strong> <a class="header-anchor" href="#编写点击事件回调" aria-label="Permalink to &quot;**编写点击事件回调**&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">addPerson</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">nameNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">ageNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">personObj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">nanoid</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">personObj</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">nameNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">ageNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这里我们需要处理输入框中的数据，并且将这些数据用于创建一个 <code>action</code> 对象，传递给 <code>store</code> 进行状态的更新</p><p>在这里我们需要回顾的是，这里我们使用了一个 <code>nanoid</code> 库，这个库我们之前也有使用过</p><h5 id="下载-引入-暴露" tabindex="-1"><strong>下载，引入，暴露</strong> <a class="header-anchor" href="#下载-引入-暴露" aria-label="Permalink to &quot;**下载，引入，暴露**&quot;">​</a></h5><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nanoid</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nanoid</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>暴露的 <code>nanoid</code> 是一个函数，我们每一次调用时，都会返回一个不重复的数，用于确保 <code>id</code> 的唯一性，同时在后面的 <code>map</code> 遍历的过程中，我们将 <code>id</code> 作为了 <code>key</code> 值，这样也确保了 <code>key</code> 的唯一性，关于 <code>key</code> 的作用，可以看看 <code>diffing</code> 算法的文章</p><h4 id="状态管理" tabindex="-1"><strong>状态管理</strong> <a class="header-anchor" href="#状态管理" aria-label="Permalink to &quot;**状态管理**&quot;">​</a></h4><p>在这里我们需要非常熟练的采用 <code>this.props.add</code> 的方式来更新状态</p><p>那么它是如何实现状态更新的呢？我们来看看</p><p>在我们调用 <code>connect</code> 函数时，我们第一次调用时传入的第二个参数，就是用于传递方法的，我们传递了一个 <code>add</code> 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">connect</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">persons</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">countAll</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//映射状态</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">add</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> createAddPersonAction </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)(Person)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>它的原词是：<strong>mapDispatchToProps</strong></p><p>我的理解是，传入的东西会被映射映射成 <code>props</code> 对象下的方法，这也是我们能够在 <code>props</code> 下访问到 <code>add</code> 方法的原因</p><blockquote><p>对于这一块 <code>connect</code> ，我们必须要能够形成自己的理解，这里非常的重要，它实现了数据的交互，不至于一个组件，而是全部组件</p></blockquote><h4 id="我是如何理解的呢" tabindex="-1"><strong>我是如何理解的呢？</strong> <a class="header-anchor" href="#我是如何理解的呢" aria-label="Permalink to &quot;**我是如何理解的呢？**&quot;">​</a></h4><blockquote><p>想象一个 store 仓库，在我们这个案例当中，Count 组件需要存放 count 值在 store 中，Person 组件需要存放新增用户对象在 store 中，我们要把这两个数据存放在一个对象当中。当某个组件需要使用 store 中的值时，可以通过 connect 中的两个参数来获取，例如这里我们需要使用到 Count 组件的值，可以通过 <code>.count</code> 来从 store 中取值。</p></blockquote><p>也就是说，所有的值都存放在 store 当中，通过点运算符来获取，所有的操作 store 的方法都需要通过 action 来实现。<strong>当前组件需要使用的数据都需要在 <code>connect</code> 中暴露</strong></p><h2 id="_2-编写-reducer" tabindex="-1">2. 编写 reducer <a class="header-anchor" href="#_2-编写-reducer" aria-label="Permalink to &quot;2. 编写 reducer&quot;">​</a></h2><p>首先，我们需要明确 reducer 的作用，它是用来干什么的？</p><p><strong>根据操作类型来指定状态的更新</strong></p><p>也就是说当我们点击了<strong>添加按钮</strong>后，会将输入框中的数据整合成一个对象，作为当前 action 对象的 data 传递给 reducer</p><p>我们可以看看我们编写的 action 文件，和我们想的一样</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ADD_PERSON</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../constant</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个人的action 对象</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> createAddPersonAction </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">personObj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ADD_PERSON</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> personObj</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>当 reducer 接收到 action 对象时，会对 type 进行判断</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">personReducer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">preState</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> initState</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ADD_PERSON</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,...</span><span style="color:#A6ACCD;">preState</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">preState</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>一般都采用 <code>switch</code> 来编写</p><p><strong>这里有个值得注意的地方是</strong>，这个 <code>personReducer</code> 函数是一个纯函数，什么是纯函数呢？这个是高阶函数部分的知识了，纯<strong>函数是一个不改变参数的函数，也就是说，传入的参数是不能被改变的。</strong></p><p>为什么要提这个呢？在我们 return 时，有时候会想通过<strong>数组的 API</strong> 来在数组前面塞一个值，不也可以吗？</p><p>但是我们要采用 <code>unshirt</code> 方法，这个方法是会改变原数组的，也就是我们传入的参数会被改变，因此这样的方法是不可行的！</p><h2 id="_3-打通数据共享" tabindex="-1">3. 打通数据共享 <a class="header-anchor" href="#_3-打通数据共享" aria-label="Permalink to &quot;3. 打通数据共享&quot;">​</a></h2><p>写到这里，或许已经写完了，但是有些细节还是需要注意一下</p><p>采用 Redux 来进行组件的数据交互真的挺方便。</p><p>我们可以在 Count 组件中引入 Person 组件存在 store 中的状态。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">connect</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">personNum</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)(Count)</span></span></code></pre></div><p>在这里我们将 store 中的 person 数组的长度暴露出来这样 Count 组件就可以直接通过 props 来使用了</p><p>同样的我们也可以在 Person 组件中使用 Count 组件的值</p><p>从而实现了我们的这个 Demo</p><h2 id="_4-最终优化" tabindex="-1">4. 最终优化 <a class="header-anchor" href="#_4-最终优化" aria-label="Permalink to &quot;4. 最终优化&quot;">​</a></h2><ol><li>利用对象的简写方法，将键名和键值同名，从而只写一个名即可</li><li>合并 reducer ，我们可以将多个 reducer文件 写在一个 index 文件当中，需要采用 <code>combineReducers</code> 来合并</li></ol><h2 id="_5-项目打包" tabindex="-1">5. 项目打包 <a class="header-anchor" href="#_5-项目打包" aria-label="Permalink to &quot;5. 项目打包&quot;">​</a></h2><p>执行 <code>npm run build</code> 命令，即可打包项目，打包完成后，会生成一个 <code>build</code> 文件，这个文件我们需要部署到服务器上才能运行</p><p>我们可以放在自己的服务器上即可</p><p>但是我遇到了一个问题</p><p>打包后的文件路径少了一个 <code>.</code> 导致文件无法找到，报错无法执行，我通过手动添加的方式解决了，不知道还有没有什么其他方法解决</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-redux-demo.gif" alt="react-redux-demo" data-fancybox="gallery"></p><blockquote><p>也可以采用 <code>npm i serve -g</code> 安装，如何通过 serve &#39;指定文件夹&#39; 来执行</p></blockquote><hr><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote>`,65),e=[p];function t(c,r,D,y,F,A){return n(),a("div",null,e)}const d=s(l,[["render",t]]);export{i as __pageData,d as default};
