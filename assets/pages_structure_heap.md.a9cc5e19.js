import{_ as s,c as a,o as n,V as l}from"./chunks/framework.3d11d069.js";const C=JSON.parse('{"title":"【化解数据结构】详解堆结构，并实现一个最小堆","description":"如何判断最大值，最小值，你有没有很好的方法呢？不如来试试用堆实现吧，手写一个堆结构，带你轻松学会~","frontmatter":{"title":"【化解数据结构】详解堆结构，并实现一个最小堆","date":"2021-11-01T20:37:11.000Z","id":1635770231,"photos":"https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86.png","tags":["数据结构","堆"],"categories":["化解数据结构"],"keywords":"数据结构,堆,小丞同学","description":"如何判断最大值，最小值，你有没有很好的方法呢？不如来试试用堆实现吧，手写一个堆结构，带你轻松学会~"},"headers":[],"relativePath":"pages/structure/heap.md","filePath":"pages/structure/heap.md","lastUpdated":1690099743000}'),p={name:"pages/structure/heap.md"},o=l(`<blockquote><p>📢 大家好，我是小丞同学，一名<strong>大二的前端爱好者</strong></p><p>📢 这篇文章将讲解数据结构中的堆</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <strong>愿你忠于自己，热爱生活</strong></p></blockquote><h2 id="💡-知识点抢先看" tabindex="-1">💡 知识点抢先看 <a class="header-anchor" href="#💡-知识点抢先看" aria-label="Permalink to &quot;💡 知识点抢先看&quot;">​</a></h2><ul><li>什么是堆？</li><li>如何实现一个堆结构？</li><li>手写实现一个堆结构</li><li>LeetCode 实战</li></ul><p>📢碎碎念</p><blockquote><p>在上一篇文章中，我们学习了树结构，它是一个非顺序结构，接下来我们再来学习一个非顺序结构堆</p></blockquote><h2 id="一、什么是堆结构" tabindex="-1">一、什么是堆结构？ <a class="header-anchor" href="#一、什么是堆结构" aria-label="Permalink to &quot;一、什么是堆结构？&quot;">​</a></h2><p>你可能会知道在内存中有栈和堆之分，但是这里堆和内存中的堆不一样，这里的堆是一种数据存储的方式</p><p>堆实际上是一种特殊的队列：<strong>优先队列</strong>，关于优先队列在队列文章中已经有讲过。也就是队列中有很多待执行的任务，执行时会根据优先级来执行，<strong>优先级高的会先被执行</strong></p><p>这也可以很容易理解，比如医院急诊室里就有对病患的优先级之分，医生会优先处理病情严重的患者，再处理相较弱的患者</p><p>对于堆而言它是一种抽象的数据结构，或者说逻辑上的数据结构，并不是物理上真实存在的数据结构</p><p>在这里我们主要讨论的是二叉堆这种最常见的结构，它是用一棵<strong>完全二叉树</strong>来实现的</p><p>对于二叉树，我们在上一篇也有涉及，它是采用<strong>数组</strong>来实现的</p><p>因此二叉堆实际也是使用<strong>数组</strong>来实现的</p><p>那么什么是完全二叉树呢？</p><p>完全二叉树和满二叉树又类似，我们先来看看什么是满二叉树</p><h3 id="_1-满二叉树" tabindex="-1">1. 满二叉树 <a class="header-anchor" href="#_1-满二叉树" aria-label="Permalink to &quot;1. 满二叉树&quot;">​</a></h3><p><strong>树中除了叶子节点，每个节点都有两个子节点</strong></p><blockquote><p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是说，如果一个二叉树的层数为K，且结点总数是(2^k) -1 ，则它就是满二叉树。</p></blockquote><p>因此对于满二叉树的节点而言，它的度要么是 0，要么是 2，也就是要么有 2 个子节点，要么是叶子节点</p><p>如图就是一个满二叉树</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102124557674.png" alt="image-20211102124557674" data-fancybox="gallery"></p><h3 id="_2-完全二叉树" tabindex="-1">2. 完全二叉树 <a class="header-anchor" href="#_2-完全二叉树" aria-label="Permalink to &quot;2. 完全二叉树&quot;">​</a></h3><p><strong>在满二叉树的性质上，最后一层的叶子节点，均在左树上</strong></p><blockquote><p>若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。</p></blockquote><p>如图一棵完全二叉树</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102122730993.png" alt="image-20211102122730993" data-fancybox="gallery"></p><p>它们的区别：</p><ol><li>完全二叉树最后一层没有满</li><li>满二叉树一定是完全二叉树</li><li>完全二叉树不一定是满二叉树</li></ol><h3 id="_3-堆的特点" tabindex="-1">3. 堆的特点 <a class="header-anchor" href="#_3-堆的特点" aria-label="Permalink to &quot;3. 堆的特点&quot;">​</a></h3><p>好了了解了什么是完全二叉树，那堆有什么特点呢？</p><ol><li>堆是一棵完全二叉树</li><li>任意节点都优于它的所有子节点 <ul><li>如果任意节点都大于它的所有子节点，那么它叫做最大堆，也叫大顶堆</li><li>如果任意节点都小于它的所有子节点，那么它叫做最小堆，也叫小顶堆</li></ul></li></ol><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/%E5%A0%86-%E6%9C%80%E5%A4%A7-%E6%9C%80%E5%B0%8F.png" alt="堆-最大-最小" data-fancybox="gallery"></p><p>左边是一个最大堆，所有的子节点都小于父节点</p><h2 id="二、如何能够实现一个堆结构呢" tabindex="-1">二、如何能够实现一个堆结构呢？ <a class="header-anchor" href="#二、如何能够实现一个堆结构呢" aria-label="Permalink to &quot;二、如何能够实现一个堆结构呢？&quot;">​</a></h2><p>在 <code>JS</code> 中通过数组来实现一个堆结构，其实本质就是一个数组。在上一篇文章结尾也说了，无论什么数据结构，在内存中都只是数组，或者对象罢了，所有的数据结构都是我们心中存在的，我们知道这么做的好处是怎么怎么样</p><p>在这里选用数组来实现一个堆</p><p>利用<strong>广度优先遍历</strong>，将树填入数组里，这样我们就能用一个数组来表示一个堆了</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211102124918927.png" alt="image-20211102124918927" data-fancybox="gallery"></p><h3 id="小秘诀" tabindex="-1">小秘诀 <a class="header-anchor" href="#小秘诀" aria-label="Permalink to &quot;小秘诀&quot;">​</a></h3><ol><li>左侧子节点在数组中的位置是 <code> 2 * index + 1</code></li><li>右侧子节点在数组中的位置是 <code>2 * index + 2</code></li><li>父节点的位置是 <code>(index - 1) / 2</code></li></ol><p>因此我们不仅能够使用数组来表示一个堆，我们还能获取任意一个节点在数组中的位置，接下来我们就实现一个最小堆</p><h2 id="三、堆中有哪些方法" tabindex="-1">三、堆中有哪些方法？ <a class="header-anchor" href="#三、堆中有哪些方法" aria-label="Permalink to &quot;三、堆中有哪些方法？&quot;">​</a></h2><p>我们给堆添加一些方法，一遍它在插入时，能插到准确的位置，删除时，其他的元素也能进行合理的移动</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>swap()</code></td><td>交换两个数</td></tr><tr><td><code>getParentIndex(i)</code></td><td>获取 <code>i</code> 的父节点</td></tr><tr><td><code>getLeftIndex(i)</code></td><td>获取 <code>i</code> 的左子节点</td></tr><tr><td><code>getRightIndex(i)</code></td><td>获取 <code>i</code> 的右子节点</td></tr><tr><td><code>shirtUp(i)</code></td><td>上移操作</td></tr><tr><td><code>shirtDown(i)</code></td><td>下移操作</td></tr><tr><td><code>insert(value)</code></td><td>插入值</td></tr><tr><td><code>pop()</code></td><td>删除堆顶</td></tr><tr><td><code>peek()</code></td><td>获取堆顶</td></tr><tr><td><code>size()</code></td><td>获取堆的大小</td></tr></tbody></table><h2 id="四、手写实现一个最小堆" tabindex="-1">四、手写实现一个最小堆 <a class="header-anchor" href="#四、手写实现一个最小堆" aria-label="Permalink to &quot;四、手写实现一个最小堆&quot;">​</a></h2><p>在前面我们已经知道了最小堆的定义，它的所有节点都小于等于它的子节点，因此我们根据这个特性，以及3个小秘诀来实现一个最小堆</p><h3 id="_1-创建一个-minheap-类" tabindex="-1">1. 创建一个 MinHeap 类 <a class="header-anchor" href="#_1-创建一个-minheap-类" aria-label="Permalink to &quot;1. 创建一个 MinHeap 类&quot;">​</a></h3><p>利用数组来实现一个堆类</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MinHeap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_2-实现-swap-方法" tabindex="-1">2. 实现 swap 方法 <a class="header-anchor" href="#_2-实现-swap-方法" aria-label="Permalink to &quot;2. 实现 swap 方法&quot;">​</a></h3><p>我们需要维护一个堆结构，在元素插入删除的时候，常常需要进行位置的变化，因此我们需要通过交换位置来实现</p><p>封装一个 <code>swap</code> 方法，接收交换位置的两个节点</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">swap</span><span style="color:#A6ACCD;">(i1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> i2) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i1</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i2</span><span style="color:#F07178;">]] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i2</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temp</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这里采用<strong>数组解构</strong>的方式来赋值，看着舒服一点</p><h3 id="_3-实现-getparentindex-方法" tabindex="-1">3. 实现 getParentIndex 方法 <a class="header-anchor" href="#_3-实现-getparentindex-方法" aria-label="Permalink to &quot;3. 实现 getParentIndex 方法&quot;">​</a></h3><p><code>getParentIndex</code> 方法获取某个节点父元素在数组中的位置</p><p>根据上面的小秘诀：父节点的位置是 <code>(index - 1) / 2</code></p><p>在这里我们采用二进制的方式来取值</p><blockquote><p>小课堂：你知道 JavaScript 中的 <code>~~</code> 运算符是什么意思吗</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">getParentIndex</span><span style="color:#A6ACCD;">(i) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 取商 （i- 1）/2 等同于 Math.floor((i-1)/2)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 二进制数向右边移一位，这样刚好就是求商</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_4-实现-getleftindex-方法" tabindex="-1">4. 实现 getLeftIndex 方法 <a class="header-anchor" href="#_4-实现-getleftindex-方法" aria-label="Permalink to &quot;4. 实现 getLeftIndex 方法&quot;">​</a></h3><p>同样的根据秘诀：左侧子节点在数组中的位置是 <code> 2 * index + 1</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">getLeftIndex</span><span style="color:#A6ACCD;">(i) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_5-实现-getrightindex-方法" tabindex="-1">5. 实现 getRightIndex 方法 <a class="header-anchor" href="#_5-实现-getrightindex-方法" aria-label="Permalink to &quot;5. 实现 getRightIndex 方法&quot;">​</a></h3><p>右侧子节点在数组中的位置是 <code>2 * index + 2</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">getRightIndex</span><span style="color:#A6ACCD;">(i) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_6-实现-shirtup-方法" tabindex="-1">6. 实现 shirtUp 方法 <a class="header-anchor" href="#_6-实现-shirtup-方法" aria-label="Permalink to &quot;6. 实现 shirtUp 方法&quot;">​</a></h3><p>这个方法是实现最小堆的关键之一，在我们插入元素时，需要对元素进行判断，我们需要将插入的元素移到符合它的位置</p><p>如何实现呢？采用递归</p><ol><li>首先我们需要先判断节点的位置是否在堆的顶部，这也是递归结束的标记之一</li><li>接下来进行递归体的内容，我们递归实现的目的是通过交换使元素到达合适位置</li><li>因此判断插入元素和父节点的值关系，如果父节点的值大于当前节点值，则进行上移（因为最小堆，小的在堆顶）</li><li>直至递归结束</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">shirtUp</span><span style="color:#A6ACCD;">(index) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果在堆顶，停止上移</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取父元素</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getParentIndex</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 比较</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">parentIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 交换</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">swap</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">parentIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 递归</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">shirtUp</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">parentIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_7-实现-insert方法" tabindex="-1">7. 实现 insert方法 <a class="header-anchor" href="#_7-实现-insert方法" aria-label="Permalink to &quot;7. 实现 insert方法&quot;">​</a></h3><p>在写好了上移 <code>shirtUp</code> 方法，我们就可以实现 <code>insert</code> 方法来看看我们实现的效果了</p><p><code>insert</code> 方法的作用是插入一个元素，在堆中插入一个元素之后，我们需要通过 <code>shirtUp</code> 方法来将这个元素移到合适的位置，这个操作留给 <code>shirtUp</code> 方法来解决</p><blockquote><p>注意哦，<code>shirtUp</code> 方法接收的是 <code>index</code> ，也就是索引值</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(value) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">shirtUp</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>来看看在一个堆中插入元素是如何运作的吧，这是一个最大堆中的动图，最小堆也一样</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/%E5%A0%86%E4%B8%8A%E7%A7%BB-1-%E5%8A%A8%E5%9B%BE.gif" alt="堆上移-1-动图" data-fancybox="gallery"></p><blockquote><p>时间复杂度是多少你知道吗？ <code>O(logK)</code></p></blockquote><h3 id="_8-实现-pop-方法" tabindex="-1">8. 实现 pop 方法 <a class="header-anchor" href="#_8-实现-pop-方法" aria-label="Permalink to &quot;8. 实现 pop 方法&quot;">​</a></h3><p>为什么需要有下移的方法，当我们直接删除堆顶时，会导致整个堆的结构的变化，使得大小关系转变，难以操作</p><p>因此我们在删除堆顶时，只需要用数组尾部的元素，替换堆顶元素，这样改变的就只有首尾两个元素，我们再对堆顶进行下移判断，这样通过不断地交换，就能实现最小堆</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">pop</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 用最后一个替换堆顶</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 再下移</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">shirtDown</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_9-实现-shirtdown-方法" tabindex="-1">9. 实现 shirtDown 方法 <a class="header-anchor" href="#_9-实现-shirtdown-方法" aria-label="Permalink to &quot;9. 实现 shirtDown 方法&quot;">​</a></h3><p>接下来我们实现最为关键的下移代码，如何实现呢？</p><ol><li>和左右子节点进行比较</li><li>左子节点小于当前节点，交换，继续递归</li><li>右子节点小于当前节点，交换，递归</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">shirtDown</span><span style="color:#A6ACCD;">(index) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">leftIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getLeftIndex</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rightIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getRightIndex</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 左侧子节点小于当前节点</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">swap</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">shirtDown</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 右侧子节点小于当前节点</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">swap</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">shirtDown</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>我们来看看删除堆顶时会发生什么？</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/%E5%A0%86%E4%B8%8B%E7%A7%BB-1-%E5%8A%A8%E5%9B%BE.gif" alt="堆下移-1-动图" data-fancybox="gallery"></p><h3 id="_10-实现-peek-方法" tabindex="-1">10. 实现 peek 方法 <a class="header-anchor" href="#_10-实现-peek-方法" aria-label="Permalink to &quot;10. 实现 peek 方法&quot;">​</a></h3><p>返回堆顶元素，也就是堆的最小值，数组的第一位</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">peek</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_11-实现-size-方法" tabindex="-1">11. 实现 size 方法 <a class="header-anchor" href="#_11-实现-size-方法" aria-label="Permalink to &quot;11. 实现 size 方法&quot;">​</a></h3><p>最后，实现最简单的方法，通过数组的 <code>length</code> 来获取即可</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">size</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_12-完整的-minheap-类" tabindex="-1">12. 完整的 MinHeap 类 <a class="header-anchor" href="#_12-完整的-minheap-类" aria-label="Permalink to &quot;12. 完整的 MinHeap 类&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 写一个最小堆</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MinHeap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取父节点</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">getParentIndex</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 取商 （i- 1）/2 等同于 Math.floor((i-1)/2)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 二进制数向右边移一位，这样刚好就是求商</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取左节点</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">getLeftIndex</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">getRightIndex</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 交换两个数的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">swap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">i2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i1</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">        [</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i2</span><span style="color:#F07178;">]] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i2</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temp</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 上移操作，最小堆，小的要在最上面</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">shirtUp</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果在堆顶，停止上移</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getParentIndex</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">parentIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">swap</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">parentIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">shirtUp</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">parentIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 下移操作</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">shirtDown</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">leftIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getLeftIndex</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rightIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getRightIndex</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 左侧子节点小于当前节点</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">leftIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">swap</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">shirtDown</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">leftIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 右侧子节点小于当前节点</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">rightIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">swap</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightIndex</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">shirtDown</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rightIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 插入 O(logK)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">insert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">shirtUp</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 删除堆顶</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pop</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 用最后一个替换堆顶</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 再下移</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">shirtDown</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取堆顶</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">peek</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取大小</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">size</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">heap</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="五、leetcode-实战" tabindex="-1">五、LeetCode 实战 <a class="header-anchor" href="#五、leetcode-实战" aria-label="Permalink to &quot;五、LeetCode 实战&quot;">​</a></h2><p>在前端世界中，堆也有它的应用场景，它能够高效的找到最大值，最小值，时间复杂度为 <code>O(1)</code>，</p><p>利用堆结构，我们可以轻松解决找出最大、最小元素、第 K 大元素登问题，但远不止于这些</p><p>几道 <code>LeetCode</code> 中关于堆的题目</p><h4 id="_215-数组中的第k个最大元素" tabindex="-1"><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noreferrer">215. 数组中的第K个最大元素</a> <a class="header-anchor" href="#_215-数组中的第k个最大元素" aria-label="Permalink to &quot;[215. 数组中的第K个最大元素](https://leetcode-cn.com/problems/kth-largest-element-in-an-array/)&quot;">​</a></h4><h4 id="_347-前-k-个高频元素" tabindex="-1"><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/" target="_blank" rel="noreferrer">347. 前 K 个高频元素</a> <a class="header-anchor" href="#_347-前-k-个高频元素" aria-label="Permalink to &quot;[347. 前 K 个高频元素](https://leetcode-cn.com/problems/top-k-frequent-elements/)&quot;">​</a></h4><h4 id="_1046-最后一块石头的重量" tabindex="-1"><a href="https://leetcode-cn.com/problems/last-stone-weight/" target="_blank" rel="noreferrer">1046. 最后一块石头的重量</a> <a class="header-anchor" href="#_1046-最后一块石头的重量" aria-label="Permalink to &quot;[1046. 最后一块石头的重量](https://leetcode-cn.com/problems/last-stone-weight/)&quot;">​</a></h4><h4 id="_703-数据流中的第-k-大元素" tabindex="-1"><a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/" target="_blank" rel="noreferrer">703. 数据流中的第 K 大元素</a> <a class="header-anchor" href="#_703-数据流中的第-k-大元素" aria-label="Permalink to &quot;[703. 数据流中的第 K 大元素](https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/)&quot;">​</a></h4><h2 id="📖-总结" tabindex="-1">📖 总结 <a class="header-anchor" href="#📖-总结" aria-label="Permalink to &quot;📖 总结&quot;">​</a></h2><p>在这篇文章中我们详细讲解了，什么是一个堆，如何实现一个堆，到最后手写封装了一个最小堆，在这过程中我们知道了如何将一个元素插入堆中，如何获取堆中的特定元素。</p><p>在我们实际的堆应用当中，或者算法题当中，不一定需要将整个堆结构都实现，我们只需要实现特定的部分就可以了，不然光封装一个堆的时间都够一壶茶了，因此学习数据结构和算法，我们更多的是<strong>学习它里面的思想</strong>，对于一个堆，不过只是 “数组”而已</p><p>本文关于<strong>堆</strong>的内容就到这里结束了，相信你一定能从中学到很多东西。下一篇文章将带你探索<strong>图</strong>的奥秘。</p><p>欢迎大家关注本专栏，持续关注最新文章~</p><blockquote><p>最后，可能在很多地方讲诉的不够清晰，请见谅</p><p>💌 如果文章有什么错误的地方，或者有什么疑问，欢迎留言，也欢迎私信交流</p></blockquote>`,111),e=[o];function t(c,r,y,F,i,D){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
