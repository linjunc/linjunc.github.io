import{_ as a,c as l,o as i,V as e}from"./chunks/framework.3d11d069.js";const t="/assets/datalink-1.287d781b.png",r="/assets/datalink-2-1.da4f50f0.png",o="/assets/datalink-2-2.550eab2b.png",n="/assets/datalink-3.2f76a06c.png",s="/assets/datalink-4-1.0f7f4153.png",h="/assets/datalink-4-2.d793d5e3.png",d="/assets/datalink-5.07b2ae8f.png",p="/assets/datalink-6.77385232.png",c="/assets/datalink-7-1.8dab766c.png",u="/assets/datalink-8-1.db0a550d.png",g="/assets/datalink-9-1.b48a27af.png",M=JSON.parse('{"title":"数据链路层","description":"","frontmatter":{},"headers":[],"relativePath":"pages/network/datalink.md","filePath":"pages/network/datalink.md","lastUpdated":1690294571000}'),b={name:"pages/network/datalink.md"},C=e('<h1 id="数据链路层" tabindex="-1">数据链路层 <a class="header-anchor" href="#数据链路层" aria-label="Permalink to &quot;数据链路层&quot;">​</a></h1><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><p>数据链路层在物理层提供服务的基础上 <code>向网络层提供服务</code>，其最基本的服务是将源自 <code>网络层</code> 的数据可靠地传输到相邻节点的 <code>目标机网络层</code> 。 其主要作用是<strong>加强物理层传输原始比特流的功能</strong>，将物理层提供的 <code>可能出错</code> 的物理连接改造成为逻辑上 <code>无差错</code> 的数据链路，使之对网络层表现为一条无差错的链路。</p><ul><li>功能一：为网络层提供服务。 <ul><li>无确认无连接服务</li><li>有确认无连接服务</li><li>有确认面向连接服务。（有连接一定有确认）</li></ul></li><li>功能二：链路管理，即连接的建立、维持、释放（用于面向连接的服务）</li><li>功能三：组帧</li><li>功能四：流量控制（限制发送速度）</li><li>功能五：差错控制（帧错/位错）</li></ul><h2 id="封装成帧" tabindex="-1">封装成帧 <a class="header-anchor" href="#封装成帧" aria-label="Permalink to &quot;封装成帧&quot;">​</a></h2><p>封装成帧的目的就是<strong>让数据能够被识别，在数据丢失时，能够溯源</strong></p><p>在实际操作上，封装成帧就是在一段 <code>数据的前后添加首部和尾部</code> ，构成帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中 <code>识别帧的开始和结束</code>。</p><p>因此，首部和尾部一个重要的作用就是：帧定界（由帧定界符控制），当然它还包含了许多的控制信息</p><p>帧同步：<strong>接收方</strong>应当能从接收到的二进制比特流中区分出帧的起始和终止</p><p><img src="'+t+'" alt="datalink-1" data-fancybox="gallery"></p><p>组帧的四种方法：</p><ol><li>字符计数法</li><li>字符（节）填充法</li><li>零比特填充法</li><li>违规编码法</li></ol><h2 id="透明传输" tabindex="-1">透明传输 <a class="header-anchor" href="#透明传输" aria-label="Permalink to &quot;透明传输&quot;">​</a></h2><p>意思就是不管所传输的数据是什么样的比特组合，<strong>都可以在链路上传输</strong>。链路层看不见有什么东西妨碍了数据的传输，</p><p>帧使用首部和尾部进行定界</p><ul><li>如果帧的 <code>数据部分</code> 含有和首部尾部 <code>相同的内容</code> ，那么帧的开始和结束位置就会被 <code>错误的判定</code> 。需要在数据部分出现首部尾部相同的内容前面 <code>插入转义字符</code>。</li><li>如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。</li><li>在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，<strong>用户察觉不到转义字符</strong>的存在。</li></ul><h3 id="字符填充法" tabindex="-1">字符填充法 <a class="header-anchor" href="#字符填充法" aria-label="Permalink to &quot;字符填充法&quot;">​</a></h3><p><strong>加头加尾分别标记开始结束</strong>，和零比特填充法（见下）对比，开始和结束的对应的字符不一样</p><p>但有<strong>可能出现数据内某段比特流数据正好与标记字段重复</strong>，从而导致误判断的情况</p><p>因此会通过添加 <code>转义字符</code> ，来标记那些重复的数据，在解析的时候就不会认为这些数据为开始和结束了</p><p><img src="'+r+'" alt="datalink-2-1" data-fancybox="gallery"></p><h3 id="零比特填充法" tabindex="-1">零比特填充法 <a class="header-anchor" href="#零比特填充法" aria-label="Permalink to &quot;零比特填充法&quot;">​</a></h3><p>和字符填充的思路是差不多的，零比特填充首位的标志位都是一样的 <code>0111110</code></p><p>因此，在数据流中也有可能存在相同的字符，这里会采用补 0 的方式，来解决这个冲突的问题</p><ul><li>在发送端，会扫描整个信息字段，只要连续 5 个 1，就会填入 1 个 0</li><li>在接收端，会对比特流进行扫描，发现 5 个连续的 1 时，就会删除后面的 0</li></ul><p><img src="'+o+'" alt="datalink-2-2" data-fancybox="gallery"></p><h2 id="差错控制-检错编码" tabindex="-1">差错控制（检错编码） <a class="header-anchor" href="#差错控制-检错编码" aria-label="Permalink to &quot;差错控制（检错编码）&quot;">​</a></h2><p>传输中的差错都是由噪声引起的。可以通过 <code>提高信噪比</code> 来减少或者避免干扰。</p><h3 id="_1-奇偶校验码" tabindex="-1">1. 奇偶校验码 <a class="header-anchor" href="#_1-奇偶校验码" aria-label="Permalink to &quot;1. 奇偶校验码&quot;">​</a></h3><p>操作方法就是：发送的时候通过添加一位附加比特来形成奇数码</p><p>奇偶校验码特点：只能检查出奇数个比特错误，检错能力为 50%</p><p>因为，一段数据中，一个从 0 --&gt; 1 ，一个从 1 --&gt; 0 ，0，1 的数量是不变的，无法检测出错误。只能检测出 1，3，5 等这些奇位数错误</p><p><img src="'+n+'" alt="datalink-3" data-fancybox="gallery"></p><h3 id="_2-循环冗余码-crc" tabindex="-1">2. 循环冗余码 CRC <a class="header-anchor" href="#_2-循环冗余码-crc" aria-label="Permalink to &quot;2. 循环冗余码 CRC&quot;">​</a></h3><ul><li>循环冗余检验 CRC <ul><li>目前数据链路层广泛使用了 <code>循环冗余检验</code>（CRC）来检查比特差错。</li></ul></li><li>帧检验序列 FCS <ul><li><code>在数据后面添加上的冗余码</code> 称为帧检验序列 FCS (Frame Check Sequence)。</li></ul></li><li>概要: CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。 <ul><li>FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。</li></ul></li></ul><p>如果数据链路层接收了这个帧，说明这个帧没有差错</p><p>这种也不是可靠传输，因为有一些帧会被丢弃掉，并不是发送什么就接受什么</p><h2 id="差错控制-纠错编码" tabindex="-1">差错控制（纠错编码） <a class="header-anchor" href="#差错控制-纠错编码" aria-label="Permalink to &quot;差错控制（纠错编码）&quot;">​</a></h2><h3 id="海明码" tabindex="-1">海明码 <a class="header-anchor" href="#海明码" aria-label="Permalink to &quot;海明码&quot;">​</a></h3><ol><li>首先需要确认检验码的位数 <ul><li>满足 2 的 r 次方 大于等于 k + r + 1</li></ul></li><li>确定校验码和数据的位置 <ul><li>检验码放在 2 的次方的位置，1，2，4，8...</li><li>数据依次添满</li></ul></li><li>求出校验码的值 <ul><li>通过二进制位确定有几位</li><li>然后看检验码的二进制位的数值和所有信息位的<strong>对应位置</strong>的数值是否相同，然后找出来这些位 <ul><li>例如第一个检验码 0001，那么和他一起的信息码就是第一位为 1 的，例如 0011,0111,这些都是</li></ul></li><li>接着把这些数异或一下，就是这些检验码的值</li></ul></li><li>检错并纠错 <ul><li>按照检错的位数，通过异或来得到出错的是第几位</li></ul></li></ol><h2 id="流量控制与可靠传输机制" tabindex="-1">流量控制与可靠传输机制 <a class="header-anchor" href="#流量控制与可靠传输机制" aria-label="Permalink to &quot;流量控制与可靠传输机制&quot;">​</a></h2><p>较高的发送速度和较低的接收能力不匹配，会造成传输出错，因此需要进行流量的控制</p><p>传输层和数据链路层都会进行流量控制，两者有一定的区别</p><ul><li><p>数据链路层的流量控制是<strong>点对点</strong>的</p></li><li><p>接收方收不下就不回复确认（确认帧），这样就不会继续发送下一个</p></li><li><p>传输层的流量控制是<strong>端到端</strong>的</p></li><li><p>接收端给发送端发送一个窗口公告</p></li></ul><p><strong>可靠传输</strong>：发送端发啥，接收端收啥</p><p><strong>流量控制</strong>：控制发送速率，使接收方有足够的缓冲空间来接收每一个帧</p><h2 id="停止等待协议" tabindex="-1">停止等待协议 <a class="header-anchor" href="#停止等待协议" aria-label="Permalink to &quot;停止等待协议&quot;">​</a></h2><p>停止等待协议存在的意义：除了比特出差错，底层信道还会出现丢包的问题</p><p>有两种不同的应用情况</p><ul><li>无差错情况</li><li>有差错情况</li></ul><h3 id="_1-无差错情况" tabindex="-1">1. 无差错情况 <a class="header-anchor" href="#_1-无差错情况" aria-label="Permalink to &quot;1. 无差错情况&quot;">​</a></h3><p>一次只发送一个帧，可以用 0、1 标记 ack</p><p>发送方收到了确认就可以继续发送下一帧</p><blockquote><p>虽然是 0、1 ，但是每一帧都是不一样的内容</p></blockquote><h3 id="_2-有差错情况" tabindex="-1">2. 有差错情况 <a class="header-anchor" href="#_2-有差错情况" aria-label="Permalink to &quot;2. 有差错情况&quot;">​</a></h3><p>在发送数据的时候，会设置一个定时器，当超过时间后，没有收到对方的 ACK 确认应答报文后，会重发这个数据，也就是超时重传</p><p>定时器设定的时间也很有讲究，需要大于 RTT</p><blockquote><p>RTT 指的是数据发送时刻到接收到确认的时刻的差值，也就是包的往返时间。</p></blockquote><p>有可能因为这两种情况发送超时重传</p><ul><li>数据包丢失</li><li>ACK 丢失</li><li>ACK 迟到 <ul><li>来晚了不会处理，会直接丢弃</li></ul></li></ul><p><strong><code>缺点</code></strong>：停止等待协议的信道利用率比较低</p><h2 id="gbn-协议" tabindex="-1">GBN 协议 <a class="header-anchor" href="#gbn-协议" aria-label="Permalink to &quot;GBN 协议&quot;">​</a></h2><p>连续发送，提高信道利用率</p><p><img src="'+s+'" alt="datalink-4-1" data-fancybox="gallery"></p><ul><li>这样每一帧的序号都需要是不一样的，接收端才能返回唯一对应的帧</li><li>发送方需要缓存多个分组，因为有可能会帧丢失，所以需要重发，需要先缓存下来</li></ul><p>累计确认：就是收到一个确认帧，那么它和它<strong>之前的所有帧</strong>都默认已收到，反之，如果某个确认帧没收到，那么它和它之后的所有帧都<strong>默认丢失</strong>（即使收到了也丢掉），进行重传</p><h3 id="发送方做的事情" tabindex="-1">发送方做的事情 <a class="header-anchor" href="#发送方做的事情" aria-label="Permalink to &quot;发送方做的事情&quot;">​</a></h3><p><img src="'+h+'" alt="datalink-4-2" data-fancybox="gallery"></p><h3 id="接收方做的事" tabindex="-1">接收方做的事 <a class="header-anchor" href="#接收方做的事" aria-label="Permalink to &quot;接收方做的事&quot;">​</a></h3><p>如果正确收到 n 号帧，并且<strong>按序</strong>，那么接收方为 n 帧<strong>发送一个 ACK</strong>，并将该帧中的数据部分交付给上层</p><p>其余情况都丢弃帧，并为最近按序接收的帧重新发送 ACK。接收方无需缓存任何失序帧，只需要维护一个信息：<code>expectedseqnum</code>（下一个按序接收的帧序号）</p><h3 id="gbn-重点" tabindex="-1">GBN 重点 <a class="header-anchor" href="#gbn-重点" aria-label="Permalink to &quot;GBN 重点&quot;">​</a></h3><ol><li>累积确认</li><li>接收方只按顺序接收帧，不按序的会被丢弃</li><li>确认序列号最大的，按序到达的帧</li><li>发送窗口最大为 2^n - 1 接收窗口为 1</li></ol><h3 id="gbn-协议性能分析" tabindex="-1">GBN 协议性能分析 <a class="header-anchor" href="#gbn-协议性能分析" aria-label="Permalink to &quot;GBN 协议性能分析&quot;">​</a></h3><p>因连续发送数据帧而<strong>提高了信道利用率</strong></p><p>在重传时必须把<strong>原来已经正确传送的数据帧重传</strong>，使传送效率降低</p><h2 id="滑动窗口" tabindex="-1">滑动窗口 <a class="header-anchor" href="#滑动窗口" aria-label="Permalink to &quot;滑动窗口&quot;">​</a></h2><p>滑动窗口的大小决定了发送方连续发送帧的数量，不需要等待 ACK 可以继续发送，但是此时窗口不会移动，只是发窗口里的帧，由于数据中帧有可能会重复</p><p>例如： 01230123</p><p>那么如果窗口过长，窗口大小大于了 4 时，无法确定接收到的 ACK 0 为第一次的确认帧，还是第二次的确认帧，因此滑动窗口的大小应当限制在 2 ^ n - 1 内</p><h2 id="sr-协议" tabindex="-1">SR 协议 <a class="header-anchor" href="#sr-协议" aria-label="Permalink to &quot;SR 协议&quot;">​</a></h2><h3 id="发送方要做的事" tabindex="-1">发送方要做的事 <a class="header-anchor" href="#发送方要做的事" aria-label="Permalink to &quot;发送方要做的事&quot;">​</a></h3><ol><li>收到数据后，检查下一个可用于该帧的序号，如果位于发送窗口，发送数据帧</li><li>收到 ACK 时，如果是窗口的下届，窗口移动，否则继续等</li><li>超时事件，超时重传</li></ol><h3 id="接收方做的事-1" tabindex="-1">接收方做的事 <a class="header-anchor" href="#接收方做的事-1" aria-label="Permalink to &quot;接收方做的事&quot;">​</a></h3><p>SR 接收方，不管是否按序都会接收。如果不是按序的话，会先缓存起来，把这些都排好序，等到最小的那个帧被收到了，这时候就可以交付这些帧，窗口移动</p><p>每接收到一个帧都会发送一个 ACK</p><h3 id="滑动窗口长度" tabindex="-1">滑动窗口长度 <a class="header-anchor" href="#滑动窗口长度" aria-label="Permalink to &quot;滑动窗口长度&quot;">​</a></h3><p>发送窗口大小等于接收窗口，2 的 （n - 1) 次方</p><h3 id="重点" tabindex="-1">重点 <a class="header-anchor" href="#重点" aria-label="Permalink to &quot;重点&quot;">​</a></h3><ol><li>逐一确认</li><li>只重传出错的帧</li><li>接收方会缓存非按序的帧</li></ol><h2 id="信道复用技术" tabindex="-1">信道复用技术 <a class="header-anchor" href="#信道复用技术" aria-label="Permalink to &quot;信道复用技术&quot;">​</a></h2><h3 id="频分复用、时分复用和统计时分复用" tabindex="-1">频分复用、时分复用和统计时分复用 <a class="header-anchor" href="#频分复用、时分复用和统计时分复用" aria-label="Permalink to &quot;频分复用、时分复用和统计时分复用&quot;">​</a></h3><ul><li>频分复用 FDM <ul><li>用户在分配到一定的频带后，在通信过程中<strong>自始至终都占用这个频带。</strong></li></ul></li><li>时分复用 TDM <ul><li>时分复用则是将时间划分为一段段等长的时分复用帧。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li></ul></li><li>统计时分复用 STDM <ul><li>是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。</li></ul></li></ul><h3 id="波分复用" tabindex="-1">波分复用 <a class="header-anchor" href="#波分复用" aria-label="Permalink to &quot;波分复用&quot;">​</a></h3><ul><li>波分复用 WDM <ul><li>光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。</li></ul></li></ul><h3 id="码分复用" tabindex="-1">码分复用 <a class="header-anchor" href="#码分复用" aria-label="Permalink to &quot;码分复用&quot;">​</a></h3><ul><li>码分复用 CDM <ul><li>常用的名词是码分多址 CDMA</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li><li>每一个比特时间划分为 m 个短的间隔，称为码片。</li></ul></li></ul><h2 id="aloha-协议" tabindex="-1">ALOHA 协议 <a class="header-anchor" href="#aloha-协议" aria-label="Permalink to &quot;ALOHA 协议&quot;">​</a></h2><h3 id="_1-纯-aloha-协议" tabindex="-1">1. 纯 ALOHA 协议 <a class="header-anchor" href="#_1-纯-aloha-协议" aria-label="Permalink to &quot;1. 纯 ALOHA 协议&quot;">​</a></h3><p><strong>思想</strong>：不监听信道，不按时间槽发送，随机发送，想法就发</p><p><strong>冲突解决</strong>：发送方在一定时间内收不到确认就判断为发生冲突，会等一个<strong>随机时间</strong>进行重传</p><h3 id="_2-时隙-aloha-协议" tabindex="-1">2. 时隙 ALOHA 协议 <a class="header-anchor" href="#_2-时隙-aloha-协议" aria-label="Permalink to &quot;2. 时隙 ALOHA 协议&quot;">​</a></h3><p>和纯 ALOHA 相比，限制了发送的时间，有点类似于 Fiber，就只能在规定的时间片发送数据</p><ul><li>纯 ALOHA 比时隙 ALOHA <strong>吞吐量更低，效率更低</strong></li><li>纯 ALOHA 想发就发，时隙 ALOHA 只有在<strong>时间片段开始时</strong>才能发</li></ul><h2 id="csma-对比" tabindex="-1">CSMA 对比 <a class="header-anchor" href="#csma-对比" aria-label="Permalink to &quot;CSMA 对比&quot;">​</a></h2><p>CSMA 是指载波监听多路访问协议</p><ul><li>CS： 载波监听，每一个站在发送数据之前都要检测一下总线上有没有其他的计算机在发送数据</li><li>MA：多点接入，许多计算机以多点接入的方式接在一根总线上</li></ul><h3 id="_1-坚持-csma" tabindex="-1">1-坚持 CSMA <a class="header-anchor" href="#_1-坚持-csma" aria-label="Permalink to &quot;1-坚持 CSMA&quot;">​</a></h3><p>如果一个主机要发送信息，会先监听信道，空闲则会直接传输，<strong>不等待</strong></p><ul><li>如果忙的话，会一直监听，直到空闲后马上传输</li><li>如果有冲突，会等待一个随机时间，再来一次</li></ul><p><strong>优点</strong>：只要媒体空闲，站点就马上发送，避免了媒体利用率的损失</p><h3 id="非坚持-csma" tabindex="-1">非坚持 CSMA <a class="header-anchor" href="#非坚持-csma" aria-label="Permalink to &quot;非坚持 CSMA&quot;">​</a></h3><p>对于信道忙的信道就不再监听，忙的话就等<strong>待一个随机时间再进行监听</strong></p><ul><li><strong>优点</strong>：采用随机的重发延迟时间可以<strong>减少冲突</strong>发生的可能性</li><li><strong>缺点</strong>：可能存在大家都在延迟等待过程中，<strong>使得媒体仍可能处于空闲状态，媒体使用率降低</strong></li></ul><h3 id="p-坚持-csma" tabindex="-1">p - 坚持 CSMA <a class="header-anchor" href="#p-坚持-csma" aria-label="Permalink to &quot;p - 坚持 CSMA&quot;">​</a></h3><p>对于监听信道空闲的处理，空闲则以 p 概率直接传输，不必等待，概率 1-p 等待到下一个时间槽在传输</p><p>忙则持续监听直到信道空闲再以 p 概率发送</p><p>若冲突则等待下一个时间槽开始再监听</p><p><strong>缺点</strong>：发生冲突后，还是要坚持把数据帧发送完，造成浪费</p><h2 id="csma-cd-协议" tabindex="-1">CSMA / CD 协议 <a class="header-anchor" href="#csma-cd-协议" aria-label="Permalink to &quot;CSMA / CD 协议&quot;">​</a></h2><p>CSMA/CD 表示载波监听多点接入 / 碰撞检测。</p><ul><li><strong>多点接入</strong> ：说明这是总线型网络，许多主机以多点的方式连接到总线上。</li><li><strong>载波监听</strong> ：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。</li><li><strong>碰撞检测</strong> ：在发送中，如果监听到信道已有其它主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</li></ul><p>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 争用期 。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p><p>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 截断二进制指数退避算法 来确定。从离散的整数集合 {0, 1, .., (2k-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。</p><p><img src="'+d+`" alt="datalink-5" data-fancybox="gallery"></p><h3 id="最小帧长" tabindex="-1">最小帧长 <a class="header-anchor" href="#最小帧长" aria-label="Permalink to &quot;最小帧长&quot;">​</a></h3><p>为了在碰撞检测的时候，数据还没有发送完，不然有可能一次全发送完了，还没有检查，那 CSMA / CD 协议的意义就没有了</p><p>因此需要规定最小的帧长，防止没有检测到碰撞</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">最小帧长 = 总线传播时延X数据传输速率 X 2</span></span>
<span class="line"><span style="color:#A6ACCD;">2t X 数据传输速率</span></span></code></pre></div><h3 id="csma-ca" tabindex="-1">CSMA / CA <a class="header-anchor" href="#csma-ca" aria-label="Permalink to &quot;CSMA / CA&quot;">​</a></h3><p>和 CSMA / CD 不同的是，CD 是碰撞的检测，CA 是碰撞的避免</p><p>应用场景不同，主要用于无线局域网</p><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><p>在发送数据前，会先检测信道是否空闲，如果空闲则会发送 RTS ，可以理解为是发送数据的信号，接收端会响应一个 CTS</p><h3 id="csma-cd-ca-的差异" tabindex="-1">CSMA / CD / CA 的差异 <a class="header-anchor" href="#csma-cd-ca-的差异" aria-label="Permalink to &quot;CSMA / CD / CA 的差异&quot;">​</a></h3><h3 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h3><p>CSMA/CD 与 CSMA/CA 机制都从属于 CSMA 的思路，其核心是先听再说。换言之，<strong>两个在接入信道之前都需要进行监听</strong>。当发现信道<strong>空闲</strong>后，才能进行接入。</p><h3 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h3><ul><li>传输介质不同：CSMA/CD 用于总线式以太网【有线】，而 CSMA/CA 用于无线局域网【无线】</li><li>载波检测方式不同：因传输介质不同，CSMA/CD 与 CSMA/CA 的检测方式也不同。 <ul><li>CSMA/CD 通过<strong>电缆中电压的变化</strong>来检测，当数据发生碰撞时，电缆中的电压就会随着发生变化；</li><li>而 CSMA/CA 采用能量检测（ED）、载波检测（CS）和能量载波混合检测三种检测信道空闲的方式</li></ul></li><li>CSMA/CD <strong>检测冲突</strong>，CSMA/CA <strong>避免冲突</strong>，二者出现冲突后都会进行有上限的重传</li></ul><h2 id="局域网" tabindex="-1">局域网 <a class="header-anchor" href="#局域网" aria-label="Permalink to &quot;局域网&quot;">​</a></h2><p>局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。</p><p>主要有以太网、令牌环网、FDDI 和 ATM 等局域网技术，目前以太网占领着有线局域网市场。</p><p>可以按照网络拓扑结构对局域网进行分类：</p><p><img src="`+p+'" alt="datalink-6" data-fancybox="gallery"></p><h2 id="以太网" tabindex="-1">以太网 <a class="header-anchor" href="#以太网" aria-label="Permalink to &quot;以太网&quot;">​</a></h2><p>以太网是一种<strong>星型拓扑结构</strong>局域网。</p><p>早期使用集线器进行连接，集线器是一种物理层设备， 作用于比特而不是帧，当一个比特到达接口时，集线器重新生成这个比特，并将其能量强度放大，从而扩大网络的传输距离，之后再将这个比特发送到其它所有接口。如果集线器同时收到两个不同接口的帧，那么就发生了碰撞。</p><p>目前以太网使用交换机替代了集线器，交换机是一种链路层设备，它不会发生碰撞，能根据 MAC 地址进行存储转发。</p><p>以太网帧格式：</p><ul><li><strong>类型</strong> ：标记上层使用的协议；</li><li><strong>数据</strong> ：长度在 46-1500 之间，如果太小则需要填充；</li><li><strong>FCS</strong> ：帧检验序列，使用的是 CRC 检验方法；</li></ul><h3 id="以太网的帧结构" tabindex="-1">以太网的帧结构 <a class="header-anchor" href="#以太网的帧结构" aria-label="Permalink to &quot;以太网的帧结构&quot;">​</a></h3><p><img src="'+c+'" alt="datalink-7-1" data-fancybox="gallery"></p><ul><li>其中<strong>目的地址和源地址</strong>指的是 MAC 地址，即设备的物理地址。MAC 地址用于标示网卡，每个网卡都具有唯一的 MAC 地址</li><li>当在同一个局域网中，主机 A 需要给主机 B 发送消息时，主机 A 将以太网帧发出，此时局域网中所有主机均可收到这个桢，主机中的网卡接收到以太网桢后，会将目的 MAC 地址和自己的 MAC 地址进行比较, <strong>如果不相同就会丢弃，如果相同则会接收</strong>，此时则 Ｂ 主机就收到了 Ａ 的消息。</li><li>其最后面是 CRC 循环冗余码，用于<strong>差错控制</strong>，即检验帧的正确性</li><li>在以太网协议中，目的地址分为三种单播地址、广播地址、多播地址，其中单播地址如上面Ａ给Ｂ主机发送，其接收者为一个，并且其目的地址的最高字节的低位为０</li></ul><h3 id="mac-地址" tabindex="-1">MAC 地址 <a class="header-anchor" href="#mac-地址" aria-label="Permalink to &quot;MAC 地址&quot;">​</a></h3><p>MAC 地址是链路层地址，长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）。</p><p>一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。</p><h2 id="ppp-协议" tabindex="-1">PPP 协议 <a class="header-anchor" href="#ppp-协议" aria-label="Permalink to &quot;PPP 协议&quot;">​</a></h2><p>互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议是用户计算机和 ISP 进行通信时所使用的数据链路层协议。</p><h3 id="ppp协议应满足的要求" tabindex="-1">PPP协议应满足的要求 <a class="header-anchor" href="#ppp协议应满足的要求" aria-label="Permalink to &quot;PPP协议应满足的要求&quot;">​</a></h3><ul><li>简单：对于链路层的帧，无需纠错，无需序号，无需流量控制</li><li>封装成帧：帧定界符</li><li>透明传输：与帧定界符一样比特组合的数据应该如何处理：异步线路用字节填充，同步线路用比特填充</li><li>多种网络层协议：封装的IP数据报可以采用多种协议</li><li>多种类型链路：串行/并行，同步/异步，电/光...</li><li>差错检测：错就丢弃</li><li>检测连接状态：链路是否正常工作</li><li>最大传送单元：数据部分最大长度MTU</li><li>网络层地址协商：知道通信双方的网络层地址</li><li>数据压缩协商</li></ul><h3 id="ppp-协议的三个组成部分" tabindex="-1">PPP 协议的三个组成部分 <a class="header-anchor" href="#ppp-协议的三个组成部分" aria-label="Permalink to &quot;PPP 协议的三个组成部分&quot;">​</a></h3><ol><li>一个将 IP 数据报封装到串行链路（同步串行/异步串行）的方法</li><li>链路控制协议 LCP：建立并维护数据链路连接。身份验证</li><li>网络控制协议 NCP：PPP可支持多种网络层协议，每个不同的网络层协议都要一个相应的NCP来配置，为网络层协议建立和配置逻辑连接</li></ol><h3 id="ppp-的帧格式" tabindex="-1">PPP 的帧格式 <a class="header-anchor" href="#ppp-的帧格式" aria-label="Permalink to &quot;PPP 的帧格式&quot;">​</a></h3><p><img src="'+u+'" alt="datalink-8-1" data-fancybox="gallery"></p><ul><li>F 字段为帧的定界符</li><li>A 和 C 字段暂时没有意义</li><li>FCS 字段是使用 CRC 的检验序列</li><li>信息部分的长度不超过 1500</li></ul><h2 id="链路层的设备" tabindex="-1">链路层的设备 <a class="header-anchor" href="#链路层的设备" aria-label="Permalink to &quot;链路层的设备&quot;">​</a></h2><h3 id="交换机" tabindex="-1">交换机 <a class="header-anchor" href="#交换机" aria-label="Permalink to &quot;交换机&quot;">​</a></h3><p><img src="'+g+'" alt="datalink-9-1" data-fancybox="gallery"></p><p>交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。</p><p>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。</p><p>上图中，每次数据经过交换机，都会被转发表记录起来，建立主机和接口的映射关系</p><h3 id="以太网交换机的两种交换方式" tabindex="-1">以太网交换机的两种交换方式 <a class="header-anchor" href="#以太网交换机的两种交换方式" aria-label="Permalink to &quot;以太网交换机的两种交换方式&quot;">​</a></h3><ul><li><strong>直通式交换机</strong>：查完目的地址就立即转发。延迟小，可靠性低，无法支持具有不同速率的端口的交换。</li><li><strong>存储转发式交换机</strong>：将帧放入高速缓存，并检查是否正确，正确则转发，错误则丢弃。延迟大，可靠性高，可以支持具有不同速率的端口的交换。</li></ul><h3 id="冲突域和广播域" tabindex="-1">冲突域和广播域 <a class="header-anchor" href="#冲突域和广播域" aria-label="Permalink to &quot;冲突域和广播域&quot;">​</a></h3><ul><li><strong>冲突域</strong>：在同一个冲突域中的每一个节点都能收到所有被发送的帧。简单的说就是同一时间内只能有一台设备发送信息的范围。</li><li><strong>广播域</strong>：网络中能接收任一设备发出的广播帧的所有设备的集合。简单的说如果站点发出一个广播信号，所有能接收收到这个信号的设备范围称为一个广播域。</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noreferrer">CS-Notes</a></li><li><a href="https://juejin.cn/post/7127650065157455903" target="_blank" rel="noreferrer">笔记</a></li></ul>',177),q=[C];function m(k,P,A,f,x,_){return i(),l("div",null,q)}const y=a(b,[["render",m]]);export{M as __pageData,y as default};
