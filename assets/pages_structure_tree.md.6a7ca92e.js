import{_ as s,c as a,o as n,V as l}from"./chunks/framework.3d11d069.js";const C=JSON.parse('{"title":"【化解数据结构】详解树结构，并实现二叉搜索树","description":"这篇文章来讲解树结构，它在数据结构和算法中有着至关重要的作用，这部分的内容很多，红黑树，二叉树，avl树等等...","frontmatter":{"title":"【化解数据结构】详解树结构，并实现二叉搜索树","date":"2021-11-01T20:17:07.000Z","id":1635769027,"photos":"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91.png","tags":["数据结构","树"],"categories":["化解数据结构"],"keywords":"数据结构,树,小丞同学","description":"这篇文章来讲解树结构，它在数据结构和算法中有着至关重要的作用，这部分的内容很多，红黑树，二叉树，avl树等等..."},"headers":[],"relativePath":"pages/structure/tree.md","filePath":"pages/structure/tree.md","lastUpdated":1687531251000}'),o={name:"pages/structure/tree.md"},p=l(`<blockquote><p>📢 大家好，我是小丞同学，一名<strong>大二的前端爱好者</strong></p><p>📢 这篇文章将讲解数据结构中的树</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <strong>愿你忠于自己，热爱生活</strong></p></blockquote><h2 id="💡-知识点抢先看" tabindex="-1">💡 知识点抢先看 <a class="header-anchor" href="#💡-知识点抢先看" aria-label="Permalink to &quot;💡 知识点抢先看&quot;">​</a></h2><ul><li>什么是树结构？</li><li>树的相关术语</li><li>树结构有哪些类型</li><li>树的前中后序遍历</li><li>树的层序遍历</li><li>手写实现一颗树</li></ul><h2 id="一、什么是树结构" tabindex="-1">一、什么是树结构？ <a class="header-anchor" href="#一、什么是树结构" aria-label="Permalink to &quot;一、什么是树结构？&quot;">​</a></h2><p>树和哈希表一样是一种非顺序的数据结构，它对于存储需要快速查找的数据非常有用</p><p>树是一种分层抽象模型，可以理解为一层一层的，就类似于<strong>高中生物的遗传图谱</strong></p><p>如下图所示</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%A0%91-%E4%BB%8B%E7%BB%8D.png" alt="树-介绍" data-fancybox="gallery"></p><h2 id="二、树的相关术语" tabindex="-1">二、树的相关术语 <a class="header-anchor" href="#二、树的相关术语" aria-label="Permalink to &quot;二、树的相关术语&quot;">​</a></h2><p>根据上面的图，我们大致知道了树是一个怎样的数据结构，虽然对于实现它还一头雾水，现在我们先来了解一下关于树的相关术语</p><p>首先我们先列个表</p><table><thead><tr><th>术语</th><th>含义</th></tr></thead><tbody><tr><td>节点</td><td>书中的每一个元素都叫节点</td></tr><tr><td>节点的深度</td><td>它的祖先节点的数量</td></tr><tr><td>树的高度</td><td>所有节点深度的最大值</td></tr><tr><td>内部节点</td><td>至少有一个子节点的节点</td></tr><tr><td>外部节点</td><td>没有子元素的节点</td></tr><tr><td>节点的度</td><td>节点拥有的子树个数</td></tr><tr><td>叶子节点</td><td>度为 0 的节点</td></tr></tbody></table><p>接下来我们来详解一下这些分别是什么意思</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%A0%91-%E8%8A%82%E7%82%B9.png" alt="树-节点" data-fancybox="gallery"></p><p>首先位于树顶部的节点，称为<strong>根节点</strong>，它不存在父节点，也就是节点 <code>1</code></p><p>树中的每一个元素都叫做<strong>节点</strong></p><p>没有子元素的节点又叫做<strong>外部节点</strong>，例如图中的 <code>4,5,7</code> 这几个节点，它们都不存在子元素</p><p>剩下的节点都是<strong>内部节点</strong></p><p>节点中有一个属性叫<strong>深度</strong>，它取决于祖先节点的数量，例如图中的<strong>节点5</strong>，它有2个祖先节点，分别是 <code>2 和 1</code> ，因此它的深度就是2</p><p>对于一棵树而言，它有<strong>高度</strong>可言，高度取决于节点深度最大的值，也就是节点 7，它的<strong>深度是3</strong>，因此这颗<strong>树的高度为 3</strong></p><p>节点的度，度表示的是节点拥有的子树的个数，例如<strong>节点1</strong>，有两颗子树，因此<strong>节点1</strong>的度为2，对于节点3而言，它只有一颗子树，因此节点3的度为1</p><p>对于叶子节点，也就是度为0的节点，也就是没有子树的节点，例如图中的节点 （4，5，7），这些都称做叶子节点</p><h2 id="三、树结构有哪些类型" tabindex="-1">三、树结构有哪些类型 <a class="header-anchor" href="#三、树结构有哪些类型" aria-label="Permalink to &quot;三、树结构有哪些类型&quot;">​</a></h2><p>对于树来说它千变万化，它有着很多种形态，例如</p><p>最常见的二叉树，二叉搜索树</p><p>当然它还有</p><ul><li>红黑树</li><li>avl 树</li><li>n 叉树</li><li>平衡二叉树...</li></ul><p>还有很多种类型，这里主要就讲二叉树，因为其他的有点难，还没有学</p><p>二叉树：节点最多只能有两个子节点，一个是左侧节点，一个是右侧节点，如图就是一棵二叉树</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%A0%91-%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="树-二叉树" data-fancybox="gallery"></p><p>二叉搜索树：左侧节点存储小的值，右侧节点存储大的值，因此也就是从左到右，从小到大，如图就是一棵二叉搜索树</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%A0%91-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2.png" alt="树-二叉搜索" data-fancybox="gallery"></p><h2 id="四、树的前中后序遍历" tabindex="-1">四、树的前中后序遍历 <a class="header-anchor" href="#四、树的前中后序遍历" aria-label="Permalink to &quot;四、树的前中后序遍历&quot;">​</a></h2><p>对于树的遍历，我们有三种常规的方法，前序遍历，中序遍历，后序遍历</p><h3 id="_1-前序遍历" tabindex="-1">1. 前序遍历 <a class="header-anchor" href="#_1-前序遍历" aria-label="Permalink to &quot;1. 前序遍历&quot;">​</a></h3><p>前序遍历的顺序是：根节点 -&gt; 左子节点 -&gt; 右子节点，对于子树而言也是按照这个规律来遍历，如图所示</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86-%E6%A0%91.png" alt="前序遍历-树" data-fancybox="gallery"></p><blockquote><p>自己尝试用代码实现一下噢~~</p></blockquote><h3 id="_2-中序遍历" tabindex="-1">2. 中序遍历 <a class="header-anchor" href="#_2-中序遍历" aria-label="Permalink to &quot;2. 中序遍历&quot;">​</a></h3><p>中序遍历的顺序是： 左子树 -&gt; 根节点 -&gt; 右子树，如图所示</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%A0%91-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="树-中序遍历" data-fancybox="gallery"></p><p>递归代码实现</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> inorder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">inorder</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">inorder</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_3-后序遍历" tabindex="-1">3. 后序遍历 <a class="header-anchor" href="#_3-后序遍历" aria-label="Permalink to &quot;3. 后序遍历&quot;">​</a></h3><p>后序遍历的顺序是：左子树 -&gt; 右子树 -&gt; 根节点，如图所示</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%A0%91-%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="树-后序遍历" data-fancybox="gallery"></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> postorder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 先访问左子树，再访问右子树</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">postorder</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">postorder</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 最后访问根节点</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>前序遍历代码如何实现呢？自己尝试一下吧~递归和迭代都可以试试噢</p></blockquote><h2 id="五、树的层序遍历" tabindex="-1">五、树的层序遍历 <a class="header-anchor" href="#五、树的层序遍历" aria-label="Permalink to &quot;五、树的层序遍历&quot;">​</a></h2><p>在 <code>LeetCode</code> 刷题中，经常会有这样的题目，需要按照层级来遍历，是什么意思呢</p><p>它的意思是：逐层地，从左到右访问所有节点</p><p>也就是按照图中的方式来遍历，并且返回结果</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20211101161518620.png" alt="image-20211101161518620" data-fancybox="gallery"></p><p>返回结果： <code>[ [3], [9,20], [15,7] ]</code></p><p>也就是把每一层的元素放在一个数组中返回，如何实现呢？</p><ul><li>首先我们需要在广度优先遍历的基础上，添加层级的判断</li><li>记录下当前层级的节点数，当当前层级遍历完成之后，从下一个数组继续遍历</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> levelOrder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//  空树</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 队列 广度优先遍历,[根节点,层级]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">q</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">root</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">q</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 记录一下当前有多少个节点是上一次循环遗留的,这些节点就是当前层级的全部节点</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">q</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">([])</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 将这些节点全部出队</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">len</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">q</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">q</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">q</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 在下一次的外层循环中,又会新创建一个新的空数组</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="六、二叉搜索树有哪些方法" tabindex="-1">六、二叉搜索树有哪些方法？ <a class="header-anchor" href="#六、二叉搜索树有哪些方法" aria-label="Permalink to &quot;六、二叉搜索树有哪些方法？&quot;">​</a></h2><p>在这里就罗列几个常见的方法吧</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>insert</code></td><td>向二叉搜索树中插入数据</td></tr><tr><td><code>serach</code></td><td>查找某个值</td></tr><tr><td><code>remove</code></td><td>移除某个值</td></tr></tbody></table><p>还有很多比如返回最大值，返回最小值的方法，都可以实现，这里就不写那么多了</p><h2 id="七、手写实现二叉搜索树" tabindex="-1">七、手写实现二叉搜索树 <a class="header-anchor" href="#七、手写实现二叉搜索树" aria-label="Permalink to &quot;七、手写实现二叉搜索树&quot;">​</a></h2><h3 id="_1-创建-node-类" tabindex="-1">1. 创建 Node 类 <a class="header-anchor" href="#_1-创建-node-类" aria-label="Permalink to &quot;1. 创建 Node 类&quot;">​</a></h3><p>创建一个节点类，用来实例化创建新节点，二叉搜索树最多只有两个节点</p><p>通过这个类来创建节点，默认为 <code>null</code> ，有 <code>left</code>，<code>right</code> 两个子节点都为 <code>null</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20211101175234632.png" alt="image-20211101175234632" data-fancybox="gallery"></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Node</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">right</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_2-创建-binarysearchtree-类" tabindex="-1">2. 创建 BinarySearchTree 类 <a class="header-anchor" href="#_2-创建-binarysearchtree-类" aria-label="Permalink to &quot;2. 创建 BinarySearchTree 类&quot;">​</a></h3><p>用来添加整棵树的方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BinarySearchTree</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_3-实现-insert-方法" tabindex="-1">3. 实现 insert 方法 <a class="header-anchor" href="#_3-实现-insert-方法" aria-label="Permalink to &quot;3. 实现 insert 方法&quot;">​</a></h3><p><code>insert</code> 方法实现插入一个元素，根据二叉搜多树的特性，左子树值小于右子树值，我们需要设计出合理的插入方式</p><ul><li>首先我们需要创建一个新节点，并且传入 <code>data</code> 及节点数据</li><li>如果插入的是第一个节点，那么该节点就是根节点</li><li>如果不是第一个插入的节点，那么我们需要通过一个函数来辅助实现插入</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(data) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Node</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// insertNode为辅助函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">insertNode</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newNode</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这里我们写好了 <code>insert</code> 方法，简单的逻辑判断，根节点有无，接下来的处理交给 <code>insertNode</code> 函数来实现</p><p>如何实现呢？</p><p>根据二叉搜索树的特性，我们采用递归的方式</p><ul><li>首先先判断传入的节点和根节点的大小关系</li><li>如果比根节点小，则放到左子树，反之</li><li>如果当前左（右）子树为空，则它直接成为左树第一个节点</li><li>如果不为空，我们接着比较它和左（或右）子树的大小关系，实现递归</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">insertNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">newNode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果值小于根节点，插到左子树</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">newNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果没有左子树，那么直接是左节点</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newNode</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 递归</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">insertNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newNode</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newNode</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">insertNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">newNode</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这样我们就实现了一个 <code>insert</code> 方法，我们来看看如何使用吧~ 随便测试一下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> tree </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BinarySearchTree</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">344</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">31114</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">324</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">34</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>看到调试器面板中的记录，符合我们的预期</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20211101190105210.png" alt="image-20211101190105210" data-fancybox="gallery"></p><p>我们再来看看插入是如何一步一步实现的吧~</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> tree </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BinarySearchTree</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">31</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">48</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%A0%91-push-%E5%8A%A8%E5%9B%BE.gif" alt="树-push-动图" data-fancybox="gallery"></p><h3 id="_4-实现-search-方法" tabindex="-1">4. 实现 search 方法 <a class="header-anchor" href="#_4-实现-search-方法" aria-label="Permalink to &quot;4. 实现 search 方法&quot;">​</a></h3><p><code>search</code> 方法需要接收一个查找的值，我们返回 <code>true</code> 或者 <code>false</code> ，这和之前的 <code>has</code> 方法类似，那我们该如何实现呢？</p><p>同样的我们需要借助一个辅助函数来实现</p><ul><li>首先，我们先声明 <code>search</code> 方法，传入树和需要查找的值</li><li>当我们的树为空时，说明一定不可能查找到值</li><li>当查找的 <code>data</code> 小于根节点的 <code>data</code> 时，我们需要递归左子树继续判断</li><li>当大于根节点时，递归右子树判断</li><li>如果刚好等于根节点就返回 <code>true</code></li></ul><p>实现 <code>search</code> 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">search</span><span style="color:#A6ACCD;">(data) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">searchNode</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>实现 <code>searchNode</code> 方法来实现查找</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">searchNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">node</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">searchNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">searchNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>实现效果如何，我们来试试</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> tree </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BinarySearchTree</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">59</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">29</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">48</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">79</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">search</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">48</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">search</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%A0%91%E6%90%9C%E7%B4%A2-push-%E5%8A%A8%E5%9B%BE.gif" alt="树搜索-push-动图" data-fancybox="gallery"></p><h3 id="_5-实现-remove-方法" tabindex="-1">5. 实现 remove 方法 <a class="header-anchor" href="#_5-实现-remove-方法" aria-label="Permalink to &quot;5. 实现 remove 方法&quot;">​</a></h3><p><code>remove</code> 方法删除节点，这个方法是最复杂的一个方法，它要考虑的东西有很多</p><p>对于删除节点，可以分为三种类型</p><ol><li>删除叶子节点</li><li>删除的节点只有一个子节点</li><li>删除的节点有2个子节点</li></ol><p>如何实现，我们一步步来看</p><p>首先我们需要实现一个 <code>removeNode</code> 函数，来保证我们的类中的干净，我们先声明这个 <code>remove</code> 方法，在这里我们预定 <code>removeNode</code> 需要返回根节点</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">remove</span><span style="color:#A6ACCD;">(data) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">removeNode</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>来实现 <code>removeNode</code> 方法</p><p>首先我们先处理一些边界判断的工作</p><p>在这里我们先处理了空树的情况，当树为空时返回 <code>null</code> 即可，接着我们对需要删除的节点进行了搜索，这里利用的是递归实现的，当我们找到了这个节点时，当前的 <code>node</code> 就会指向了要删除的节点，然后进行判断</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">node</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">removeNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">removeNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 三个情况</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>第一种情况：删除叶子节点，也就是 <code>left,right</code> 都为 <code>null</code> 时，可以直接删除，让当前节点 <code>node = null</code> 即可</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">node</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/%E6%A0%91%E5%88%A0%E9%99%A4-1-%E5%8A%A8%E5%9B%BE.gif" alt="树删除-1-动图" data-fancybox="gallery"></p><p>第二种情况：删除只有一个子节点的节点</p><p>这种情况下，我们需要跳过当前节点，指向它的子节点，也可以说是用子节点替代它的位置</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">node</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">node</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/%E6%A0%91%E5%88%A0%E9%99%A4-2-%E5%8A%A8%E5%9B%BE.gif" alt="树删除-2-动图" data-fancybox="gallery"></p><p>第三种情况：删除两个子节点的节点</p><p>这种情况是最复杂的</p><ol><li>找到该节点的右子树中的最小值</li><li>然后用这个最小值，去替代当前的这个被删除的节点</li><li>之后我们需要删除右子树中的那个节点</li><li>最后返回更新后节点的引用</li></ol><p>在这里我们使用了一个自己封装的方法 <code>findMinNode</code> ，可以自己去试试如何实现，它的功能是，返回最小值的节点</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> min </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findMinNode</span><span style="color:#A6ACCD;">(node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right)</span></span>
<span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> min</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span></span>
<span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeNode</span><span style="color:#A6ACCD;">(node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">min</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> node</span></span></code></pre></div><p>这样我们就实现了这三种情况的判断，结合起来就可以正常工作了</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/%E6%A0%91%E5%88%A0%E9%99%A4-3-%E5%8A%A8%E5%9B%BE.gif" alt="树删除-3-动图" data-fancybox="gallery"></p><hr><p>到这里我们实现了几个很常用的方法，难度还是蛮大的，需要自己多练练</p><h2 id="八、leetcode-实战" tabindex="-1">八、LeetCode 实战 <a class="header-anchor" href="#八、leetcode-实战" aria-label="Permalink to &quot;八、LeetCode 实战&quot;">​</a></h2><p>以下这些 <code>leetcode</code> 题可以去尝试一下</p><ul><li><h4 id="_104-二叉树的最大深度" tabindex="-1"><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noreferrer">104. 二叉树的最大深度</a> <a class="header-anchor" href="#_104-二叉树的最大深度" aria-label="Permalink to &quot;[104. 二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/)&quot;">​</a></h4></li><li><h4 id="_111-二叉树的最小深度" tabindex="-1"><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noreferrer">111. 二叉树的最小深度</a> <a class="header-anchor" href="#_111-二叉树的最小深度" aria-label="Permalink to &quot;[111. 二叉树的最小深度](https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/)&quot;">​</a></h4></li><li><h4 id="_102-二叉树的层序遍历" tabindex="-1"><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noreferrer">102. 二叉树的层序遍历</a> <a class="header-anchor" href="#_102-二叉树的层序遍历" aria-label="Permalink to &quot;[102. 二叉树的层序遍历](https://leetcode-cn.com/problems/binary-tree-level-order-traversal/)&quot;">​</a></h4></li><li><h4 id="_112-路径总和" tabindex="-1"><a href="https://leetcode-cn.com/problems/path-sum/" target="_blank" rel="noreferrer">112. 路径总和</a> <a class="header-anchor" href="#_112-路径总和" aria-label="Permalink to &quot;[112. 路径总和](https://leetcode-cn.com/problems/path-sum/)&quot;">​</a></h4></li><li><h4 id="_96-不同的二叉搜索树" tabindex="-1"><a href="https://leetcode-cn.com/problems/unique-binary-search-trees/" target="_blank" rel="noreferrer">96. 不同的二叉搜索树</a> <a class="header-anchor" href="#_96-不同的二叉搜索树" aria-label="Permalink to &quot;[96. 不同的二叉搜索树](https://leetcode-cn.com/problems/unique-binary-search-trees/)&quot;">​</a></h4></li><li><h4 id="_98-验证二叉搜索树" tabindex="-1"><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noreferrer">98. 验证二叉搜索树</a> <a class="header-anchor" href="#_98-验证二叉搜索树" aria-label="Permalink to &quot;[98. 验证二叉搜索树](https://leetcode-cn.com/problems/validate-binary-search-tree/)&quot;">​</a></h4></li><li><h4 id="_99-恢复二叉搜索树" tabindex="-1"><a href="https://leetcode-cn.com/problems/recover-binary-search-tree/" target="_blank" rel="noreferrer">99. 恢复二叉搜索树</a> <a class="header-anchor" href="#_99-恢复二叉搜索树" aria-label="Permalink to &quot;[99. 恢复二叉搜索树](https://leetcode-cn.com/problems/recover-binary-search-tree/)&quot;">​</a></h4></li><li><h4 id="_226-翻转二叉树" tabindex="-1"><a href="https://leetcode-cn.com/problems/invert-binary-tree/" target="_blank" rel="noreferrer">226. 翻转二叉树</a> <a class="header-anchor" href="#_226-翻转二叉树" aria-label="Permalink to &quot;[226. 翻转二叉树](https://leetcode-cn.com/problems/invert-binary-tree/)&quot;">​</a></h4></li></ul><p>这些题都可以去尝试一下哦~</p><hr><h2 id="📖-总结" tabindex="-1">📖 总结 <a class="header-anchor" href="#📖-总结" aria-label="Permalink to &quot;📖 总结&quot;">​</a></h2><p>在这篇文章中我们从什么是树开始，最后封装了一颗二叉搜索树，难度还是有的，做树相关的题目，必须要理顺我们的思路，采用递归要确定好递归顺序。在我们做题的时候，不必封装一个完整的树，只需要我们知道有这个数据结构，在我们需要使用的时候，我们提取它的灵魂即可，学了这么多的数据结构，也能发现，它们都是通过数组或者对象封装而成的，因此它们的本质还是我们最熟悉的东西。</p><p>本文关于<strong>树</strong>的内容就到这里结束了，相信你一定能从中学到很多东西。下一篇文章将带你探索<strong>堆</strong>的奥秘。</p><p>欢迎大家关注本专栏，持续关注最新文章~</p><blockquote><p>最后，可能在很多地方讲诉的不够清晰，请见谅</p><p>💌 如果文章有什么错误的地方，或者有什么疑问，欢迎留言，也欢迎私信交流</p></blockquote>`,134),e=[p];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
