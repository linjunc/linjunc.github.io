import{_ as e,c as o,o as c,V as d}from"./chunks/framework.3d11d069.js";const u=JSON.parse('{"title":"【offer 收割计划】这几道常见的面试题，你会几道！","description":"","frontmatter":{},"headers":[],"relativePath":"pages/interview/heading/best2.md","filePath":"pages/interview/heading/best2.md","lastUpdated":1688305715000}'),a={name:"pages/interview/heading/best2.md"},t=d('<h1 id="【offer-收割计划】这几道常见的面试题-你会几道" tabindex="-1">【offer 收割计划】这几道常见的面试题，你会几道！ <a class="header-anchor" href="#【offer-收割计划】这几道常见的面试题-你会几道" aria-label="Permalink to &quot;【offer 收割计划】这几道常见的面试题，你会几道！&quot;">​</a></h1><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/offer%E6%94%B6%E5%89%B2%E8%AE%A1%E5%88%92-%E7%AC%AC%E4%BA%8C%E5%BC%B9.png" alt="offer收割计划-第二弹" data-fancybox="gallery"></p><blockquote><p>📢 大家好，我是小丞同学，一名<strong>大二的前端爱好者</strong></p><p>📢 这篇文章将来讲讲几道常见的面试题</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <strong>愿你忠于自己，热爱生活</strong></p></blockquote><h2 id="💡-知识点抢先看" tabindex="-1">💡 知识点抢先看 <a class="header-anchor" href="#💡-知识点抢先看" aria-label="Permalink to &quot;💡 知识点抢先看&quot;">​</a></h2><ol><li><code>BFC</code> 是什么</li><li><code>CSS</code> 实现毛玻璃</li><li>伪数组和数组的区别</li><li><code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt)</code></li><li>实现一个 sleep 函数</li><li><code>react-router</code> 里的 <code>&lt;Link&gt;</code> 标签和 <code>&lt;a&gt;</code> 标签有什么区别 <a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/135" target="_blank" rel="noreferrer">https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/135</a></li></ol><h2 id="一、请说说什么是-bfc" tabindex="-1">一、请说说什么是 BFC ？ <a class="header-anchor" href="#一、请说说什么是-bfc" aria-label="Permalink to &quot;一、请说说什么是 BFC ？&quot;">​</a></h2><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126132038720.png" alt="image-20211126132038720" data-fancybox="gallery"></p><p><strong>BFC</strong> 全称叫做块级格式化上下文，它是一个完全独立的布局空间，我们可以在这个空间当中对子元素进行布局，并且<strong>不会影响到空间外部</strong>的布局</p><p>在 <code>W3C</code> 中这样解释到</p><blockquote><p><code>BFC</code>它决定了元素如何对其内容进行定位，以及与其它元素的关系和相互作用，当涉及到可视化布局时，<code>Block Formatting Context</code>提供了一个环境，<code>HTML</code>在这个环境中按照一定的规则进行布局。</p></blockquote><p><strong>那么如何触发</strong> <code>BFC</code> 呢？</p><p>一些经典的话术</p><ul><li><code>float</code> 不为 <code>none</code></li><li><code>position</code> 的值不是 <code>static</code> 或者 <code>relative</code></li><li><code>display</code> 的值是 <code>inline-block</code> 、<code>table-cell</code>、<code>flex</code>、<code>table-caption</code> 以及 <code>inline-flex</code></li><li><code>overflow</code> 的值不是 <code>visible</code></li></ul><p>以及我比较喜欢用的 <code>display: flow-root</code></p><p>我把它理解为一种专门用来触发 <code>BFC</code> 的属性，它在块级元素的基础上进行了修正，在原来的块级盒子中，子元素开启 <code>float</code> 时，会有父元素<strong>高度塌陷</strong>等问题，父元素的高度，不会根据浮动元素的高度来设定，因此 <code>flow-root</code> 这种新的布局方式，解决了这个问题，开启了 <code>flow-root</code> 后，就会触发 <code>BFC</code>，从而解决高度塌陷等问题</p><p><code>BFC</code> <strong>有哪些布局规则呢？</strong></p><ul><li><code>BFC</code> 就是一个块级元素，它的子元素会在垂直方向，一个接一个的放置</li><li>垂直方向的距离由 <code>margin</code> 决定， 属于同一个 <code>BFC</code> 的两个相邻的外边距会重叠</li><li>计算 <code>BFC</code> 高度时，浮动元素需要参与计算</li></ul><p><code>BFC</code> <strong>解决了什么问题呢？</strong></p><ol><li>浮动元素导致的高度塌陷</li><li><code>margin</code> 外边距合并，造成的原因是根元素也是一个 <code>BFC</code> 元素</li><li>清除浮动</li></ol><h2 id="二、如何用-css-实现毛玻璃效果" tabindex="-1">二、如何用 CSS 实现毛玻璃效果？ <a class="header-anchor" href="#二、如何用-css-实现毛玻璃效果" aria-label="Permalink to &quot;二、如何用 CSS 实现毛玻璃效果？&quot;">​</a></h2><p>毛玻璃就是一种背景模糊的磨砂玻璃的效果，比较有层次感，有一种半透明的感觉</p><p>实现毛玻璃效果，主要依赖 <code>CSS</code> 属性 <code>backdrop-filter</code>，这个属性可以为元素后面区域添加图形效果，类似于模糊，颜色偏移，因为它适用于元素背后的所有元素，因此我们必须使元素或<strong>背景部分透明</strong></p><p><strong>如何实现呢</strong>？</p><p>我们采用这个属性，设置一点模糊即可，但是这个属性有兼容性问题噢，需要注意噢~</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126215914743.png" alt="image-20211126215914743" data-fancybox="gallery"></p><p>我们也可以看看和正常添加半透明效果的对比，可以看出第一个的透明感很强，没有<strong>磨砂的感觉</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126220139889.png" alt="image-20211126220139889" data-fancybox="gallery"></p><h2 id="三、你知道伪数组吗-说说它和数组的区别" tabindex="-1">三、你知道伪数组吗？说说它和数组的区别 <a class="header-anchor" href="#三、你知道伪数组吗-说说它和数组的区别" aria-label="Permalink to &quot;三、你知道伪数组吗？说说它和数组的区别&quot;">​</a></h2><p>了解。伪数组就是一个像数组的对象，它为什么像数组呢，因为它有 <code>length</code> 属性，同时它也和数组一样通过索引来存储数据</p><p>我们把符合以下条件的<strong>对象</strong>称为伪数组：</p><ul><li>具有 <code>length</code> 属性</li><li>按照索引方式来存储数据</li><li>不具有数组的 <code>push</code> 、<code>pop</code> 等方法</li></ul><p>常见的伪数组有，<code>argument</code>参数，<code>JQ</code> 对象、<code>document.querySelectorAll</code>、<code>document.getElementsByTagName</code> 等返回的对象都是伪数组</p><p>在我们初学 <code>DOM</code> 操作的时候，我们经常会获取到伪数组，我们最后都需要转化成真正的数组去操作，我们可以这样操作</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126221446767.png" alt="image-20211126221446767" data-fancybox="gallery"></p><p>这样我们就能将伪数组转成真正的数组了</p><p>👉 <strong>总结一下</strong></p><ol><li>都有 <code>length</code> 属性</li><li>都是对象</li><li>类数组的 <code>length</code> 属性不会自增</li><li>类数组没有原生数组的方法</li></ol><h2 id="四、来看看这题的输出-1-2-3-map-parseint" tabindex="-1">四、来看看这题的输出 <code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt)</code> <a class="header-anchor" href="#四、来看看这题的输出-1-2-3-map-parseint" aria-label="Permalink to &quot;四、来看看这题的输出 `[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt)`&quot;">​</a></h2><p>这题早已经看透了，答案我们后面再说</p><p>这题有两个考点，一个是 <code>map</code> 、一个是 <code>parseInt</code> ，这两个方法大家用的最多，但也是了解最少的，我们经常用 <code>map</code> 来进行遍历，传入一个回调函数，操作 <code>item</code> ，<code>parseInt</code> 我们经常用来做类型转化，这些我们都很常用，但没有我们想象的那么简单</p><p><strong>具体来看看 <code>parseInt</code> 方法</strong></p><p><code>parseInt</code> 函数接收两个参数，第一个参数是我们要操作的字符串，第二个参数是指定的基数，也就是我们以多少进制来看待这个字符串</p><p>例如：在这里我们同样都是操作 <code>100</code> 这个数，但是当我们第二个参数传入 <code>2</code> 时，就会得到不一样的结果，在这里，它把 <code>100</code> 看成了二进制的 <code>100</code> 因此转化结果为 <code>4</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126223557570.png" alt="image-20211126223557570" data-fancybox="gallery"></p><p>再来看看 <code>map</code> 方法，它创建一个新的数组，结果是这个数组中每一个元素都调用这个提供的函数后返回的结果</p><p>它接受的回调函数有三个参数，其中两个可选，第一个参数是当前遍历的元素 <code>item</code>，第二个是当前元素的索引，第三个是这个数组本身</p><p>知道了 <code>parseInt</code> 和 <code>map</code> 方法的具体使用规则后，我们来看看这道题</p><p>由于 <code>parseInt</code> 能够接收两个参数，字符串和基数， <code>map</code> 方法会默认传递这两个参数给 <code>parseInt</code> 方法，因此它实际上执行的是</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126224253651.png" alt="image-20211126224253651" data-fancybox="gallery"></p><p>这样就明朗了，由于 <code>2、3</code> 大于它们的基数 <code>1、2</code> 导致了它们无法被转化，返回 <code>NaN</code></p><blockquote><p>最终结果：<code>[1, NaN, NaN]</code></p></blockquote><p>那如果我们真的要实现这个将数字字符串数组，转化成纯数字数组需要怎么做呢？如下 👇👇👇</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126224607200.png" alt="image-20211126224607200" data-fancybox="gallery"></p><h2 id="五、来实现一个-sleep-函数" tabindex="-1">五、来实现一个 sleep 函数 <a class="header-anchor" href="#五、来实现一个-sleep-函数" aria-label="Permalink to &quot;五、来实现一个 sleep 函数&quot;">​</a></h2><p><code>sleep</code> 函数就是一个等待的函数，代码运行到这里时，需要等待 <code>sleep</code> 函数执行完毕后，再继续执行</p><p>这题考验的是对于异步编程的理解，回调函数、生成器、<code>async</code> 、<code>promise</code>，这些都可以实现</p><blockquote><p>关于异步编程，具体可以查看博主的另一篇文章：<a href="https://juejin.cn/post/6998293153824391182" target="_blank" rel="noreferrer">深入理解 JavaScript 中的异步编程</a></p></blockquote><p>首先我们先用最原始的<strong>回调函数</strong>的方法来实现</p><p>我们接收一个回调函数和睡眠时间，采用 <code>setTimeout</code> 来实现等待</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126225615822.png" alt="image-20211126225615822" data-fancybox="gallery"></p><p><strong>生成器</strong></p><p>利用 <code>yield</code> 和 <code>next</code> 来控制函数运行</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126225916370.png" alt="image-20211126225916370" data-fancybox="gallery"></p><p><strong>Promise</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126230123515.png" alt="image-20211126230123515" data-fancybox="gallery"></p><p><strong>async</strong></p><p>最优雅的写法</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126230312546.png" alt="image-20211126230312546" data-fancybox="gallery"></p><h2 id="六、react-router-dom-中的-link-标签和-a-标签有什么区别" tabindex="-1">六、react-router-dom 中的 <code>&lt;Link&gt;</code> 标签和 <code>&lt;a&gt;</code> 标签有什么区别 <a class="header-anchor" href="#六、react-router-dom-中的-link-标签和-a-标签有什么区别" aria-label="Permalink to &quot;六、react-router-dom 中的 `&lt;Link&gt;` 标签和 `&lt;a&gt;` 标签有什么区别&quot;">​</a></h2><p>首先，从 <code>DOM</code> 渲染出来的标签来看，它们都是 <code>a</code> 标签</p><p>它们的区别再于 <code>Link</code> 标签是 <code>react-router</code> 中实现路由跳转的链接，它和传统的页面跳转不一样， <code>Link</code> 跳转只会触发相匹配的 <code>Route</code> 对应的页面进行更新，不会刷新整个页面</p><p>而对于 <code>a</code> 标签来说，它会从当前页面跳转到 <code>href</code> 指向的另一个页面</p><p>因此也可以说，<code>LInk</code> 跳转不会刷新页面， <code>a</code> 标签跳转回刷新页面</p><p>我们再来看看 <code>Link</code> 标签在页面跳转的时候都做了什么</p><p>来看看源码</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211126232055665.png" alt="image-20211126232055665" data-fancybox="gallery"></p><ol><li>当有 <code>onClick</code> 事件时执行 <code>onClick</code></li><li><code>click</code> 时回阻止 <code>a</code> 标签的默认事件，防止 <code>a</code> 标签跳转</li><li>再取得 <code>href</code> ，用 <code>history</code> 的方式进行跳转，触发了页面的 <code>hashChange</code> 事件，<code>Router</code> 内部进行捕获监听来处理跳转逻辑，不刷新页面</li></ol><p>最后总结以下</p><ol><li><code>Link</code> 页面无刷新跳转，<code>a</code> 标签进行刷新</li><li><code>Link</code> 标签会阻止 <code>a</code> 标签的默认事件，采用 <code>history</code> 进行跳转</li></ol><hr><h2 id="📖-总结" tabindex="-1">📖 总结 <a class="header-anchor" href="#📖-总结" aria-label="Permalink to &quot;📖 总结&quot;">​</a></h2><p>通过这几道面试题，我们重新温习了 <code>BFC</code>、<code>map</code>、<code>parseInt</code> 这些小而却非常常用的方法，对于它们的细节我们也有了一定的学习，最后我们剖析了 <code>react-router-dom</code> 中 <code>Link</code> 和 <code>a</code> 标签的区别，感觉收获还是很大！</p><p>最后，我是小丞同学，欢迎大家关注本专栏，持续关注最新文章~祝愿大家拿到心仪的 <code>offer</code></p><blockquote><p>最后，可能在很多地方讲诉的不够清晰，请见谅</p><p>💌 如果文章有什么错误的地方，或者有什么疑问，欢迎留言，也欢迎私信交流</p></blockquote>',84),i=[t];function l(p,n,s,r,g,m){return c(),o("div",null,i)}const b=e(a,[["render",l]]);export{u as __pageData,b as default};
