import{_ as s,c as n,o,V as a}from"./chunks/framework.3d11d069.js";const C=JSON.parse('{"title":"🔨 新生代总结 JavaScript 运行机制解析","description":"引言 在一些面试中，我们或许会被问到这样的问题 还有可能会被问这样的代码 这些虽然看起来很深奥很复杂，但是如果你了解了 JavaScript 的运行机制，这些问题都能够一一化解","frontmatter":{"title":"🔨 新生代总结 JavaScript 运行机制解析","date":"2021-08-19T09:51:33.000Z","id":1635420393,"photos":"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/JavaScript%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.png","tags":["JavaScript"],"categories":[["前端总结","JavaScript精读"]],"keywords":"JavaScript,JavaScript运行机制","description":"引言 在一些面试中，我们或许会被问到这样的问题 还有可能会被问这样的代码 这些虽然看起来很深奥很复杂，但是如果你了解了 JavaScript 的运行机制，这些问题都能够一一化解"},"headers":[],"relativePath":"pages/summary/jsrun.md","filePath":"pages/summary/jsrun.md","lastUpdated":1687614843000}'),l={name:"pages/summary/jsrun.md"},p=a(`<blockquote><p>📢 大家好，我是小丞同学，一名<div color="#2e86de">准大二的前端爱好者</div></p><p>📢 这篇文章将带你一起学习理解 JavaScript 运行机制</p><p>📢 <div color="#f368e0"><strong>愿你忠于自己，热爱生活</strong></div></p></blockquote><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在一些面试中，我们或许会被问到这样的问题</p><blockquote><p>简述一下 JavaScript 的运行机制？</p></blockquote><p>还有可能会被问这样的代码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">定时器开始啦</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">马上执行for循环啦</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">99</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">执行then函数啦</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这些虽然看起来很深奥很复杂，但是如果你了解了 JavaScript 的运行机制，这些问题都能够一一化解</p><p>先附上本文的纲要，本文将会从这<strong>三个方面</strong>去解析 JavaScript 的运行机制</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210819095110499.png" alt="image-20210819095110499" data-fancybox="gallery"></p><p>首先我们来谈谈 JavaScript 的单线程</p><h2 id="_1-为什么是单线程" tabindex="-1">1. 为什么是单线程？ <a class="header-anchor" href="#_1-为什么是单线程" aria-label="Permalink to &quot;1. 为什么是单线程？&quot;">​</a></h2><p>众所周知，JavaScript 是一门单线程的语言，也因此带来了很多诟病，那么单线程如此不堪，为什么不把它设计成多线程的呢？</p><p>其实这个问题就出现在了 JavaScript 的<strong>应用场景</strong>上，我们通常采用 JavaScript 来操作 DOM 元素，这在现在来看没什么问题。但是我们想一想，如果 JavaScript 变成了一门多线程的语言，那会发生什么呢？</p><p>想象一下下面的场景</p><p>一段 JS 代码<strong>删除</strong> DOM 元素，一段 JS 代码<strong>更改</strong> DOM 元素样式，它们一起被执行了，这会发生什么？</p><p>先别说浏览器该怎么处理了，我都不知道该如何处理，那浏览器就会崩溃掉 ...</p><p>为了避免这样的情况， JavaScript 被设计成了一门单线程的语言</p><p>单线程就意味着，一次只能执行一个任务，其他任务都需要排队等待</p><p>但是为了能有多线程的功能，有了很多的尝试</p><p>在 HTML5 中提出了 <code>web worker</code> 标准，它提供了一套完整的 API 去允许在主线程以外<strong>去执行另一个线程</strong>，但是这<strong>不意味</strong>着 JavaScript 从此拥有了多线程的能力，同时我们也不能用它来操作 DOM 元素。</p><p>在 JavaScript 中还有着独特执行机制，它将主线程中的任务分为同步任务和异步任务</p><h2 id="_2-为什么需要异步" tabindex="-1">2. 为什么需要异步？ <a class="header-anchor" href="#_2-为什么需要异步" aria-label="Permalink to &quot;2. 为什么需要异步？&quot;">​</a></h2><blockquote><p>为了能够解决单线程带来的代码阻塞等问题</p></blockquote><p>JS 是单线程的，我们可以想象成有一个售票窗口，有很多人在窗口排队办理业务，而 JS 只能一个一个处理，那如果有一个客户的需求很多，办理业务的时间很长，那么这条队伍的其他人就只能干等着了，就相当于代码阻塞了，也就是浏览器<strong>假死</strong>，等待代码执行</p><p>因此有了同步任务和异步任务的概念</p><p>就是需要通过这样来区分，将那些办理业务时间长的分出来，等到其他客户处理完毕之后再统一处理</p><p>关于同步任务和异步任务是这样解释的</p><ul><li>同步任务：是在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务，例如：<code>console.log</code></li><li>异步任务：不进入主线程、通过事件循环机制处理，在任务队列中注册回调函数最终拿到结果，例如：<code>setTimeout</code></li></ul><p>了解了什么是同步，什么是异步，我们来一道非常简单的题目</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;},</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>结果输出 1 3 2</p><p>原因是 <code>setTimeout</code> 是异步任务，需要在同步代码执行之后再执行</p><p>接下来我们聊聊运行机制的核心：事件循环</p><h2 id="_3-事件循环" tabindex="-1">3. 事件循环 <a class="header-anchor" href="#_3-事件循环" aria-label="Permalink to &quot;3. 事件循环&quot;">​</a></h2><p>首先我们用一张图来理解事件循环</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210818224430488.png" alt="image-20210818224430488" data-fancybox="gallery"></p><p>它的运行机制如下：</p><ol><li>所有同步任务在主线程上执行，形成一个执行栈，也就是上图蓝色箭头表示</li><li>主线程以外有一个异步任务队列（红色箭头），会等到异步任务<strong>返回结果后</strong>将它放入<strong>任务队列</strong></li><li>当主线程中执行栈代码执行完毕，也就是同步任务执行完毕，就会<strong>开始读取</strong>任务队列代码，再放入执行栈中执行</li><li>不断地重复上面三步，这就是事件循环</li></ol><p>用图形来描绘的话，就是上图中的<strong>三个黑色箭头</strong>，连成的闭环</p><p>也就是说：<strong>只要主线程执行栈空了，就会去读取任务队列，这个过程是循环不断的，这种运行机制就叫做事件循环</strong></p><p>了解了事件循环，我们对前面那题做一个简单的升级</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;},</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;},</span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;},</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这次输出了 1 -- 5 -- 2 -- 4 -- 3</p><p>可能会有人会对 <code>3</code> 的输出有疑惑，首先定时器都是异步任务，会先被放入异步任务队列当中，需要等待异步任务<strong>返回结果后</strong>，再将回调函数放入任务队列当中，等待主线程来执行，因此，2 和 4 会在 3 之前输出</p><h2 id="_4-异步任务队列细节" tabindex="-1">4. 异步任务队列细节 <a class="header-anchor" href="#_4-异步任务队列细节" aria-label="Permalink to &quot;4. 异步任务队列细节&quot;">​</a></h2><p>常见的会放入异步任务队列的事件</p><ol><li>DOM 事件</li><li>Promise</li><li>Ajax 请求</li><li><code>setTimeout</code> 和 <code>setlnterval</code></li><li>文件上传</li></ol><p>至于加入异步任务队列的时间，是需要根据当前异步任务而定的，<strong>不是说</strong>拿到异步任务直接添加到任务队列里面，是要等到当前异步任务执行完成返回结果，才将其放到任务队列里</p><p>就拿 <code>setTimeout</code> 来说，是需要<strong>等待定时结束</strong>再将回调加入任务队列的</p><p>也可以结合下图理解</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210819002424355.png" alt="image-20210819002424355" data-fancybox="gallery"></p><p>了解了任务队列，我们需要再谈一谈异步任务当中，又被细分出来的宏任务和微任务</p><h2 id="_5-宏任务和微任务" tabindex="-1">5. 宏任务和微任务 <a class="header-anchor" href="#_5-宏任务和微任务" aria-label="Permalink to &quot;5. 宏任务和微任务&quot;">​</a></h2><p>宏任务队列可以有多个，微任务队列只有一个</p><p>那么什么是宏任务，什么是微任务呢？</p><ul><li>宏任务有：HTML解析、鼠标事件、键盘事件、网络请求、执行主线程js代码和定时器</li><li>微任务有：<code>promise.then</code>，DOM 渲染，<code>async</code>，<code>process.nextTick</code></li></ul><p>那它是怎么被执行的呢？</p><ol><li><p>当执行栈中的同步任务执行完毕后，先执行微任务</p></li><li><p>微任务队列执行完毕后，会读取宏任务</p></li><li><p>执行宏任务的过程中，遇到微任务，再加入微任务队列</p></li><li><p>宏任务执行完后，再次读取微任务队列，依次循环</p></li></ol><p>画个图来辅助理解一下</p><p>用一句简单的话来总结：<strong>微任务永远在宏任务执行之前被执行完毕</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210819001618159.png" alt="image-20210819001618159" data-fancybox="gallery"></p><p><strong>特别注意</strong>的是：由于代码的入口就是一个 <code>script</code> 标签。因此，全局任务属于宏任务</p><h2 id="_6-实战" tabindex="-1">6. 实战 <a class="header-anchor" href="#_6-实战" aria-label="Permalink to &quot;6. 实战&quot;">​</a></h2><p>在了解了这么多后，我们来看一到经典的面试题</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">6</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">7</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">9</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">11</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">12</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">13</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>答案是：1 -- 5 -- 11 -- 13 -- 6 -- 12 -- 2 -- 3 -- 4 -- 7 -- 8 -- 9 -- 10</p><p><strong>第一轮循环</strong></p><ul><li>从全局任务入口，首先<strong>打印</strong>日志 <code>1</code></li><li>遇到宏任务 <code>setTimeout</code> ，交给异步处理模块，记为<code>setTimeout1</code></li><li>再遇到 promise 对象，<strong>打印</strong>日志 <code>5</code> ，将 <code>promise.then</code> 加入微任务队列，记做 <code>p1</code></li><li>又遇到 <code>setTimeout</code> 交给异步处理模块，记为 <code>setTimeout2</code></li><li>又遇到 <code>setTimeout</code> 交给异步处理模块，记为 <code>setTimeout3</code></li><li>遇到 promise 对象，打印日志 <code>11</code> ，将 <code>promise.then</code> 加入微任务队列，记做 <code>p2</code></li><li>遇到打印语句，直接打印日志 <code>13</code></li></ul><p>本轮循环共打印：1 -- 5 -- 11 -- 13</p><p>当前循环结果</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210819084640821.png" alt="image-20210819084640821" data-fancybox="gallery"></p><p><strong>第二轮循环</strong></p><ul><li>首先执行微任务队列 <code>p1</code> 和 <code>p2</code> ，先进先出，先打印 <code>6</code> 再打印 <code>12</code></li><li>微任务事件处理完毕，开始执行宏任务 <code>setTimeout1</code></li><li>遇到打印语句，直接打印日志 <code>2</code></li><li>又遇到 promise 对象，打印日志 <code>3</code>，将 <code>promise.then</code> 加入微任务队列，记做 <code>p3</code></li></ul><p>第二轮循环结束</p><p>当前运行图为</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210819084924330.png" alt="image-20210819084924330" data-fancybox="gallery"></p><p><strong>第三轮循环</strong></p><ul><li>首先执行微任务队列，打印日志 <code>4</code></li><li>微任务处理完毕，执行宏任务 <code>setTimeout2</code></li><li>遇到打印语句，直接输出 <code>7</code></li></ul><p>本轮循环结束</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210819085314165.png" alt="image-20210819085314165" data-fancybox="gallery"></p><p><strong>第四轮循环</strong></p><ul><li>微任务队列为空，执行宏任务 <code>setTimeout3</code></li><li>遇到打印语句，打印日志 <code>8</code></li><li>遇到 promise 对象，执行打印语句，打印 <code>9</code></li><li>将 <code>promise.then</code> 加入微任务队列 记做 <code>p4</code></li></ul><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210819085545680.png" alt="image-20210819085545680" data-fancybox="gallery"></p><p><strong>第五轮循环</strong></p><ul><li>首先清空微任务队列，执行打印语句，打印 <code>10</code></li><li>执行完毕</li></ul><p>以上就是关于 JavaScript 运行机制的全部内容，希望能有所收获</p><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote>`,87),e=[p];function c(t,r,F,y,D,i){return o(),n("div",null,e)}const g=s(l,[["render",c]]);export{C as __pageData,g as default};
