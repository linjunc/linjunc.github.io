import{_ as s,c as a,o as n,V as o}from"./chunks/framework.3d11d069.js";const l="/assets/useReducer-dispatch.bfd1e9bd.png",p="/assets/useReducer-update.0ce62974.png",e="/assets/usestate-reducer.0673143e.png",h=JSON.parse('{"title":"useReducer 源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"pages/react/hard/hooks/usereducer.md","filePath":"pages/react/hard/hooks/usereducer.md","lastUpdated":1687700201000}'),t={name:"pages/react/hard/hooks/usereducer.md"},c=o(`<h1 id="usereducer-源码解析" tabindex="-1">useReducer 源码解析 <a class="header-anchor" href="#usereducer-源码解析" aria-label="Permalink to &quot;useReducer 源码解析&quot;">​</a></h1><p>在<a href="./useState.html">前面</a>，我们讲了 <code>useState</code> 的实现，以及 <code>hook</code> 的<a href="./hooks.html">调用流程</a>，相信你已经非常熟悉了， hooks 这部分的内容的相似度很高，只要对整个流程清楚了，剩下的就是 API 如何封装的事情了</p><p>这部分介绍 <code>useReducer</code> 的实现，<code>useReducer</code> 和 <code>useState</code> 非常相似，在 <code>update</code> 时，都调用 <code>updateReducer</code></p><h2 id="mount-时" tabindex="-1">Mount 时 <a class="header-anchor" href="#mount-时" aria-label="Permalink to &quot;Mount 时&quot;">​</a></h2><p>在 mount 阶段，当执行到 <code>useReducer</code> 方法时，会调用 <code>mountReducer</code> 进行处理</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> HooksDispatcherOnMount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dispatcher</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">useReducer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> mountReducer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p><code>mountReducer</code> 会创建 Hook 对象，得到初始状态，创建 queue，生成 <code>dispatch</code> 给用户使用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mountReducer</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">I</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">reducer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">A</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">initialArg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">I</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">init</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">I</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dispatch</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 创建 hook 对象</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hook</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">mountWorkInProgressHook</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 生成初始状态，是否有第三个参数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">initialState</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">init</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">initialState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">init</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">initialArg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">initialState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">initialArg</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">S</span><span style="color:#F07178;">);</span></span>
<span class="line"><span style="color:#F07178;">  }</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">hook</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">memoizedState</span><span style="color:#F07178;"> = </span><span style="color:#FFCB6B;">hook</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">baseState</span><span style="color:#F07178;"> = </span><span style="color:#FFCB6B;">initialState</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 创建 queue</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queue</span><span style="color:#F07178;">: </span><span style="color:#A6ACCD;">UpdateQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">S</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{...}</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">hook</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">queue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queue</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 生成 dispatch</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dispatch</span><span style="color:#F07178;">: </span><span style="color:#A6ACCD;">Dispatch</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dispatch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">dispatchReducerAction</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#F07178;">): </span><span style="color:#A6ACCD;">any</span><span style="color:#F07178;">));</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">hook</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">memoizedState</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dispatch</span><span style="color:#F07178;">];</span></span>
<span class="line"><span style="color:#F07178;">}</span></span></code></pre></div><p>完整的流程如下</p><ol><li>通过 <code>mountWorkInProgressHook</code> 创建 hook 对象</li><li>根据用户传递的参数，进行 state 的初始化</li><li>把初始状态挂到 <code>memoizedState</code> 和 <code>baseState</code> 上</li><li>创建 queue 链表，挂到 hook 上</li><li>生成 <code>dispatch</code> 并返回数组</li></ol><p>在这里有一点需要提醒的是，<code>useReducer</code> 支持第三个参数，这个参数是一个 Function，用于惰性初始化 state，其实 <code>useState</code> 也有这个功能， 惰性初始化是 React 用来优化的一种手段，我们可以看一个例子</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> initialState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> setCount</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useState</span><span style="color:#A6ACCD;">(initialState)</span></span></code></pre></div><p>当函数组件更新 <code>re-render</code> 时，函数组件内所有代码都会重新执行一遍。此时 <code>initialState</code> 的初始值是一个相对开销较大的 IO 操作。每次函数组件 <code>re-render</code> 时，第一行代码都会被执行一次，引起不必要的性能损耗。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> initialState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> setCount</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useState</span><span style="color:#A6ACCD;">(initialState)</span></span></code></pre></div><p>当 <code>initialState</code> 以函数形式传入时，它<strong>只会在函数组件初始化的时候执行一次</strong>，函数 <code>re-render</code> 时不会再被执行。<strong>这个函数即惰性初始化函数这个特性，可以在这种场景下规避不必要的性能问题。</strong></p><p>这就是惰性初始化的意义所在，避免计算不必要的 <code>state</code></p><h3 id="生成-dispatch-函数" tabindex="-1">生成 Dispatch 函数 <a class="header-anchor" href="#生成-dispatch-函数" aria-label="Permalink to &quot;生成 Dispatch 函数&quot;">​</a></h3><p>还有一个很关键的点，就是 <code>dispatch</code> 函数的生成，看到 <code>dispatchReducerAction</code> 这个方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dispatchReducerAction</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">fiber</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">queue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UpdateQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lane</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">requestUpdateLane</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fiber</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">update</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">lane</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    hasEagerState</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    eagerState</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">null</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">,</span></span>
<span class="line"><span style="color:#F07178;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  if </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">isRenderPhaseUpdate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">fiber</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    enqueueRenderPhaseUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">queue</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">update</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//将update,加入到queue.pending环状链表中</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//多次调用dispatch，创建的update都会加入到这个queue.pending环状链表中；</span></span>
<span class="line"><span style="color:#F07178;">    const </span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">enqueueConcurrentHookUpdate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">update</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lane</span><span style="color:#F07178;">);</span></span>
<span class="line"><span style="color:#F07178;">    if </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#F07178;"> !== </span><span style="color:#A6ACCD;font-style:italic;">null</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eventTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">requestEventTime</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">scheduleUpdateOnFiber</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lane</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eventTime</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">entangleTransitionUpdate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lane</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol><li>首先会去获取本次更新的优先级</li><li>然后创建 update</li><li>判断是否是 re-render 引起的更新（和 <code>dispatchSetState</code> 一样） <ol><li>如果是那就执行 <code>enqueueRenderPhaseUpdate</code>，会将 update 加到 queue.pending 中，具体可看<a href="./useState.html#在-mount-阶段的-mountstate">上一节</a></li></ol></li><li>如果不是 re-render 的更新，也会将 <code>queue</code> 加入到 queue.pending 中，返回当前的 <code>root</code> 节点，然后调用 <code>scheduleUpdateOnFiber</code> 开始更新调度</li></ol><p><img src="`+l+'" alt="" data-fancybox="gallery"> 图来自网络</p><h2 id="update-时-updatereducer" tabindex="-1">update 时，updateReducer <a class="header-anchor" href="#update-时-updatereducer" aria-label="Permalink to &quot;update 时，updateReducer&quot;">​</a></h2><p>这部分和 <code>useState</code> 一致，可以看<a href="./useState.html#在-update-阶段，updatestate">前面的</a></p><ol><li>根据上次更新或加载后，存储的组件 <code>fiber</code> 的 <code>hook</code> 对象，创建新的 <code>hook</code> 对象；</li><li>拿到 <code>hook</code> 的更新对象环状链表 <code>queue.pending</code>，循环环状链表，算出新的状态；</li><li>判断新老状态，如果不一样就标记更新；</li><li>把新的状态存储到 hook 对象；</li><li>把新的状态和 dispatch 返回给用户；</li></ol><p><img src="'+p+'" alt="" data-fancybox="gallery"> 图来自网络</p><h2 id="usestate-和-usereducer-的区别" tabindex="-1">useState 和 useReducer 的区别 <a class="header-anchor" href="#usestate-和-usereducer-的区别" aria-label="Permalink to &quot;useState 和 useReducer 的区别&quot;">​</a></h2><p>看到这里你一定很疑惑，<code>useReducer</code> 和 <code>useState</code> 这么相似，为啥还要搞两个 API，这不自找麻烦咩</p><p>首先，一些明显的不同，在使用上也能感受到</p><ul><li><code>useState</code> 只需要传递一个状态即可，而 <code>useReducer</code> 需要 <code>reducer</code> 和状态，使用上来说，<code>useState</code> 对开发者更加友好</li><li>调用 <code>dispatch</code> 时，<code>useState</code> 需要判断状态是否相等再判断需不需要更新，而 <code>useReducer</code> 是一把梭，因为它的状态由 reducer 来控制，reducer 是一个纯函数</li></ul><p>对于一些使用场景，React 官方会更加推荐使用 <code>useReducer</code>，可以看<a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables" target="_blank" rel="noreferrer">官网</a></p><p>前面 useState 和 useReducer 都没有讲到一个很重要的东西，<strong>就是 <code>batchUpdate</code></strong>，当多次调用 <code>dispatch</code> 时，React 是怎么处理批量更新的？</p><p>这个其实依赖的是 React 的 Scheduler 调度器实现的，当 <code>dispatch</code> 触发后，并不会立刻的去更新，而是调用的 <code>scheduleUpdateOnFiber</code> 来调度更新，在这里面，会把 更新处理添加到一个微任务队列里，好像叫 <code>scheduleMicrotask</code> （忘记了，不想找），这样可以调用多次 <code>dispatch</code> ，而只执行一次更新</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>useState</code> 和 <code>useReducer</code> 的执行过程</p><p><img src="'+e+'" alt="usestate-reducer" data-fancybox="gallery"></p>',35),r=[c];function F(y,D,i,A,C,d){return n(),a("div",null,r)}const g=s(t,[["render",F]]);export{h as __pageData,g as default};
