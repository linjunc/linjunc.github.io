import{_ as o,c as e,o as c,U as a}from"./chunks/framework.4d5e0f31.js";const k=JSON.parse('{"title":"【offer 收割计划】你能说说使用 hooks 的好处吗？","description":"","frontmatter":{},"headers":[],"relativePath":"pages/interview/heading/best1.md","lastUpdated":1680375359000}'),d={name:"pages/interview/heading/best1.md"},i=a('<h1 id="【offer-收割计划】你能说说使用-hooks-的好处吗" tabindex="-1">【offer 收割计划】你能说说使用 hooks 的好处吗？ <a class="header-anchor" href="#【offer-收割计划】你能说说使用-hooks-的好处吗" aria-label="Permalink to &quot;【offer 收割计划】你能说说使用 hooks 的好处吗？&quot;">​</a></h1><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/offer%E6%94%B6%E5%89%B2%E8%AE%A1%E5%88%92-%E7%AC%AC%E4%B8%89%E5%BC%B9.png" alt="offer收割计划-第三弹" data-fancybox="gallery"></p><blockquote><p>📢 大家好，我是小丞同学，一名<strong>大二的前端爱好者</strong></p><p>📢 这篇文章将来讲讲几道常见的面试题</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <strong>愿你忠于自己，热爱生活</strong></p></blockquote><h2 id="💡-知识点抢先看" tabindex="-1">💡 知识点抢先看 <a class="header-anchor" href="#💡-知识点抢先看" aria-label="Permalink to &quot;💡 知识点抢先看&quot;">​</a></h2><ol><li><code>link</code> 与 <code>@import</code> 的区别</li><li>多种方式实现数组去重</li><li>说说你对闭包的了解</li><li>JavaScript 中解决跨域问题的方法</li><li>Hooks 好处</li></ol><h2 id="一、能说说-link-和-import-两种方式引入-css-的区别吗" tabindex="-1">一、能说说 link 和 @import 两种方式引入 CSS 的区别吗 <a class="header-anchor" href="#一、能说说-link-和-import-两种方式引入-css-的区别吗" aria-label="Permalink to &quot;一、能说说 link 和 @import 两种方式引入 CSS 的区别吗&quot;">​</a></h2><p>在我们刚开始学习前端的时候，我们都是通过 <code>link</code> 来引入 <code>CSS</code> 文件，但是后来发现我们也可以通过 <code>@import</code> 去引入</p><p>首先它们在用法上存在着区别</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128212500226.png" alt="image-20211128212500226" data-fancybox="gallery"></p><p>从它们的用法上，我们可以很清晰的看出它们之间的区别</p><ol><li><code>link</code> 是 <code>html</code> 标签，它不仅可以加载 <code>CSS</code> 文件，还可以定义 <code>rel</code> 连接属性等，而 <code>@import</code> 是 <code>CSS</code> 的语法，只有导入样式表的作用</li><li>浏览器在加载页面时，同步加载 <code>link</code> 引入的 <code>CSS</code> 文件，<strong>页面加载完成后</strong>，再加载 <code>@import</code> 引入的 <code>CSS</code> 样式</li><li><code>@import</code> 只有 <code>IE5</code> 以上才能使用，而 <code>link</code> 的兼容性更好</li><li><code>JavaScript</code> 只能控制 <code>dom</code> 改变 <code>link</code> 的引入的样式，而不能控制 <code>@import</code> 的样式</li><li><code>link</code> 的样式权重高于 <code>@import</code> 的权重</li></ol><h2 id="二、实现数组去重你有多少种方法" tabindex="-1">二、实现数组去重你有多少种方法 <a class="header-anchor" href="#二、实现数组去重你有多少种方法" aria-label="Permalink to &quot;二、实现数组去重你有多少种方法&quot;">​</a></h2><p>数组去重在前端的应用中还是很多的，虽然我现在一时半会想不起来，但是真的很重要</p><p>在这里将介绍几种简单一点的去重方法，双循环检验这种就不介绍了</p><p><strong>第一种：indexOf 去重</strong></p><p>这个方法的核心在于：利用 <code>indexOf</code> 来判断这个元素在数组中首次出现的未知下标和当前的下标是否相等，不相等则说明没有有重复的，删除掉</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128214735820.png" alt="image-20211128214735820" data-fancybox="gallery"></p><p><strong>第二种：filter</strong></p><p>利用 <code>filter</code> 来过滤数组</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128215521939.png" alt="image-20211128215521939" data-fancybox="gallery"></p><p><strong>第三种：Set</strong></p><p>利用 <code>Set</code> 集合的独一特性来去重，这个方法就书写起来最方便的</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128215726707.png" alt="image-20211128215726707" data-fancybox="gallery"></p><p>去重的方法数不胜数，其他的就不介绍了，平时我用的多的是 <code>Set</code> 去重</p><h2 id="三、说说你对闭包的理解" tabindex="-1">三、说说你对闭包的理解 <a class="header-anchor" href="#三、说说你对闭包的理解" aria-label="Permalink to &quot;三、说说你对闭包的理解&quot;">​</a></h2><p>对于闭包这个概念，每个人都会有不一样的理解，我们先看看几本书上的解释</p><blockquote><p>闭包是指有权访问另一个函数作用域中的变量的函数；</p></blockquote><blockquote><p>从技术的角度讲，所有的JavaScript函数都是闭包：它们都是对象，它们都关联到作用域链。</p></blockquote><blockquote><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p></blockquote><p>以上是三本前端经典书籍的描述，从上面的描述来看，我们总结不出啥来。</p><p>谈谈我的理解吧</p><p>一个函数，能够记住并访问它范围外的变量，这个函数和这个变量就形成闭包，用个例子来说的话就是：在函数 A 内定义一个变量 B，想在函数 A 外去访问，这时候在函数 A 内定义一个 函数 C ，把 B 作为函数 C 的返回值，然后在函数 A 中返回函数 C</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128221900875.png" alt="image-20211128221900875" data-fancybox="gallery"></p><h2 id="四、解决跨域问题你能想到几种方法" tabindex="-1">四、解决跨域问题你能想到几种方法？ <a class="header-anchor" href="#四、解决跨域问题你能想到几种方法" aria-label="Permalink to &quot;四、解决跨域问题你能想到几种方法？&quot;">​</a></h2><p>在前后端交互的过程中，经常会遇到跨域的问题，在我们使用 <code>React</code> 、<code>Vue</code> 这些脚手架来搭建项目时，我们可以很方便的通过配置代理来解决跨域的问题，但是在我们初学前端时，这个问题真的是非常棘手的，就我来说，我还没有使用过原生 <code>JS</code> 来解决过跨域的问题，我想很多人都是这样的，接下来来了解一下如何来解决跨域问题</p><p>首先跨域是由于浏览器的同源策略引起的，它是浏览器的安全功能，为了防止 <code>XSS</code>、<code>CSRF</code> 攻击。所谓的同源指的是 <strong>协议、域名、端口</strong>三者的相同，即使<strong>两个域名指向同一台服务器</strong>这也属于非同源</p><p>首先我们讲讲</p><h3 id="_1-jsonp-解决跨域" tabindex="-1">1. <code>Jsonp</code> 解决跨域 <a class="header-anchor" href="#_1-jsonp-解决跨域" aria-label="Permalink to &quot;1. `Jsonp` 解决跨域&quot;">​</a></h3><p>这其实利用的是 <code>HTML</code> 标签的一个漏洞来解决的</p><p>有三个标签是允许跨域加载资源的 <code>Img</code> 、<code>link</code> 、<code>script</code> 标签</p><p><code>Jsonp</code> 就是利用 <code>script</code> 标签来跨域加载资源，但是这种方法需要后端服务器的配合才能实现，同时只支持 <code>Get</code> 请求</p><ol><li>首先我们在前端中需要声明一个回调函数</li><li>通过 <code>params</code> 传参的方式，将我们的请求参数拼接在 <code>url</code> 路径上</li><li>将 <code>url</code> 加到 <code>script</code> 标签的 <code>src</code> 属性上</li><li>服务器也需要专门针对于这种请求方式进行接收和特殊的处理，才能得到结果</li></ol><p>因此如果纯前端的话，是无法通过 <code>Jsonp</code> 来解决跨域问题的</p><h3 id="_2-实现-cors" tabindex="-1">2. 实现 CORS <a class="header-anchor" href="#_2-实现-cors" aria-label="Permalink to &quot;2. 实现 CORS&quot;">​</a></h3><p>这种方法是最简单的，只需要后端服务器中配置 <code> Access-Control-Allow-Origin</code> 就可以开启 <code>CORS</code> ，可以设置哪些域名可以访问资源，这样就没有前端什么事了，</p><h3 id="_3-nginx-反向代理" tabindex="-1">3. Nginx 反向代理 <a class="header-anchor" href="#_3-nginx-反向代理" aria-label="Permalink to &quot;3. Nginx 反向代理&quot;">​</a></h3><p>如果是前后端分离的项目，我们可以在前端服务器的 <code>Nginx</code> 配置中，配置代理</p><p>前端先在配置 <code>baseUrl</code> 时，请求前端服务器，并且添加一个可标识的后缀，例如 <code>/api</code></p><p>在前端服务器上配置</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/imgs/image-20211128224442518.png" alt="image-20211128224442518" data-fancybox="gallery"></p><h3 id="_4-浏览器开启跨域" tabindex="-1">4. 浏览器开启跨域 <a class="header-anchor" href="#_4-浏览器开启跨域" aria-label="Permalink to &quot;4. 浏览器开启跨域&quot;">​</a></h3><p>这种方法还是不建议了，由于跨域问题是浏览器的策略引起的，因此我们可以想办法<strong>关闭浏览器跨域的限制</strong></p><p>怎么关闭，自己找找，关了难免会出什么问题，日后可能忘记开回来啥的，不大好</p><hr><p>我能想到的，有了解过的就这些了，还有很多解决跨域的方法，但是我还不是很了解，就不误导大家了</p><h2 id="五、你能说说使用-hooks-有什么好处吗" tabindex="-1">五、你能说说使用 Hooks 有什么好处吗？ <a class="header-anchor" href="#五、你能说说使用-hooks-有什么好处吗" aria-label="Permalink to &quot;五、你能说说使用 Hooks 有什么好处吗？&quot;">​</a></h2><p>首先最明显的好处就是代码写起来更加流畅了，相比于类式组件来说， <code>hooks</code> 不需要使用像 <code>componentWillMount</code> 等这类生命周期钩子，代码写起来更加自由了，没有那么多的限制，通过一个 <code>useEffect</code> hook 就能一次实现 3 个生命周期的功能，这对开发者来说十分的友好。</p><p>再从应用上来说，采用 <code>hooks</code> 不再需要时刻关注 <code>this</code> 指向的问题，在类式组件中，我们需要时时刻刻地关注着 <code>this</code> 的指向，生怕哪里指错了导致出了问题</p><p><code>hooks</code> 最大的好处就是组件的复用，对于每一个使用该组件的地方，就会开辟一个独立的内存空间，就像是在调用函数一样，十分的简单</p><p>代码的可读性强，我们不需要专门使用生命周期函数就能实现功能的聚合，更加方便阅读和代码的维护</p><p><code>hooks</code> 底层实现已经帮助我们优化了很多的代码，我们只需要在使用 <code>hooks</code> 时，避免组件的重复渲染，适当控制渲染次数即可做到很好的优化，同时 <code>hooks</code> 也提供了类似于 <code>useMemo</code> <code>useCallback</code> 这样的 <code>hook</code> 来给我们做性能优化</p><p>因此我觉得 <code>hooks</code> 在写法上、可读性上、可复用性、性能上（大部分情况）都优于类式组件</p><hr><h2 id="📖-总结" tabindex="-1">📖 总结 <a class="header-anchor" href="#📖-总结" aria-label="Permalink to &quot;📖 总结&quot;">​</a></h2><p>通过这几道面试题，自己也思考了很多，关于闭包关于 hooks ，都有一个我的认识和理解，每个人的理解各有千秋，也想听听你们的看法~</p><p>最后，我是小丞同学，欢迎大家关注本专栏，持续关注最新文章~祝愿大家拿到心仪的 <code>offer</code></p><blockquote><p>最后，可能在很多地方讲诉的不够清晰，请见谅</p><p>💌 如果文章有什么错误的地方，或者有什么疑问，欢迎留言，也欢迎私信交流</p></blockquote>',67),t=[i];function l(p,s,r,n,h,g){return c(),e("div",null,t)}const b=o(d,[["render",l]]);export{k as __pageData,b as default};
