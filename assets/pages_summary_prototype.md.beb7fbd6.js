import{_ as s,c as o,o as a,V as n}from"./chunks/framework.3d11d069.js";const F=JSON.parse('{"title":"三张图轻松KO⚡ JS 原型和原型链","description":"引言 原型和原型链据说是面试常考的东西，对于初学者来说有一定的难度，但是其实它也非常的简单，几个概念理解好了就没什么问题了，我们先从一个例子出发，然后再引出相关的知识点","frontmatter":{"title":"三张图轻松KO⚡ JS 原型和原型链","date":"2021-08-20T07:14:21.000Z","id":1635409101,"photos":"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/js%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.png","tags":["JavaScript"],"categories":[["前端总结","JavaScript精读"]],"keywords":"原型,原型链","description":"引言 原型和原型链据说是面试常考的东西，对于初学者来说有一定的难度，但是其实它也非常的简单，几个概念理解好了就没什么问题了，我们先从一个例子出发，然后再引出相关的知识点"},"headers":[],"relativePath":"pages/summary/prototype.md","filePath":"pages/summary/prototype.md","lastUpdated":1688462198000}'),p={name:"pages/summary/prototype.md"},e=n(`<blockquote><p>📢 大家好，我是小丞同学，这一篇是 JS 高程精读系列的第 n 篇文章，主要解释 JS 中的原型和原型链</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <div color="#e84393">愿你生活明朗，万物可爱</div></p></blockquote><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>原型和原型链据说是面试常考的东西（没面试过，不大清楚），对于初学者来说有一定的难度，但是其实它也非常的简单，几个概念理解好了就没什么问题了，我们先从一个例子出发，然后再引出相关的知识点，下面我们<strong>先来看一个例子</strong></p><p>先定义一个类，添加一些属性和方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">score</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">score</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">score</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">say</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">我是</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">考了</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">score</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>然后我们 <code>new</code> 一个实例对象出来</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> student </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Student</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">小丞同学</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">99</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>接着我们想要输出一下这个学生的姓名和成绩</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(student</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> student</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">score)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>很顺利，控制台输出 小丞同学 99 ，接下来我们想要调用一下 <code>say</code> 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">student</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">say</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p>成功输出<img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816085505993.png" alt="image-20210816085505993" data-fancybox="gallery"></p><p>没什么问题，很完美，接下来我们来打印一下实例化出来的对象 <code>student</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(student)</span></span></code></pre></div><p>我们看一下控制台输出</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816085704178.png" alt="image-20210816085704178" data-fancybox="gallery"></p><p>咦，我们发现在这个 <code>student</code> 对象上<strong>只有两个</strong>属性 <code>name</code> 和 <code>score</code> ，那我刚刚调用的 <code>say</code> 方法是哪里来的呢？</p><p>当我们展开 <code>__proto__</code> 时就会发现，我们的 <code>say</code> 方法在其中，那这其实是因为我们在类中添加的方法，会被添加到这个类的原型对象上</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816092625358.png" alt="image-20210816092625358" data-fancybox="gallery"></p><p>当我们在调用 <code>say</code> 方法时，在自身上并没有找到这个方法，就会在自身的 <code>__proto__</code> 上去找，而这个 <code>__proto__</code> 也叫做<strong>隐式原型</strong></p><p>接下来我们再看一个有意思的事情</p><p>我们说 <code>student</code> 这个实例对象是由这个大写的类 <code>Student</code> 来创建的，那么我们打印一下这个类，来看一下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Student)</span></span></code></pre></div><p>打印出来就是一个类</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816094116614.png" alt="image-20210816094116614" data-fancybox="gallery"></p><p>而在这个类上会有一个方法 <code>prototype</code> ，我们来打印一下看看它是什么</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Student</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816094325491.png" alt="image-20210816094325491" data-fancybox="gallery"></p><p>我们会发现在它的上面也有一个 <code>say</code> 方法，同时是不是觉得这个又点眼熟呢</p><p>我们在控制台打印一下实例对象的隐式原型</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(student</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816101622378.png" alt="image-20210816101622378" data-fancybox="gallery"></p><p>你会发现它们两个尽然长的是一样的，我们可以比对一下，看看它们是不是完全相等的</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816101744210.png" alt="image-20210816101744210" data-fancybox="gallery"></p><p>可以看到，它们两个指向的是同一个对象，那么通过上面的一步步推理，我们可以得到这样一张图</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816103010784.png" alt="image-20210816103010784" data-fancybox="gallery"></p><p>那到底什么是原型呢？</p><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h2><p>原型又分为显式原型和隐式原型</p><h3 id="proto-隐式原型" tabindex="-1"><code>__proto__</code> 隐式原型 <a class="header-anchor" href="#proto-隐式原型" aria-label="Permalink to &quot;\`__proto__\`  隐式原型&quot;">​</a></h3><p>在对象上有一个属性叫做 <code>__proto__ </code>，这个属性是对象所特有的，也叫做隐式原型，当我们尝试在一个对象上查找属性或者方法时，如果说找不到这个属性或者方法，就会在它的隐式原型上查找</p><h3 id="prototype-显式原型" tabindex="-1">prototype 显式原型 <a class="header-anchor" href="#prototype-显式原型" aria-label="Permalink to &quot;prototype 显式原型&quot;">​</a></h3><p><code>prototype</code> 是函数所特有的属性，它是从一个函数指向一个对象，它的含义是函数的原型对象。</p><p>它的作用是什么呢？</p><p><strong>它的作用</strong>就是包含所有实例对象共享的属性和方法，这也就是为了让该函数所实例化的对象们都可以找到<strong>公共的属性和方法</strong></p><p><strong>特别注意</strong>的是，任何函数在创建的时候，都会默认创建该函数的 <code>prototype</code> 对象</p><h2 id="constructor-构造函数" tabindex="-1">constructor 构造函数 <a class="header-anchor" href="#constructor-构造函数" aria-label="Permalink to &quot;constructor 构造函数&quot;">​</a></h2><p>在前面没有提这个属性，就是怕指向太多容易混乱</p><p>其实在对象上除了具有 <code>__proto__</code> 属性外，原型对象上还有一个 <code>constructor</code> 属性值得我们注意，这一点在我们打印对象的时候也能够注意到，那它是干什么的呢？</p><p>我们在控制台上输出对象本身、隐式原型、<code>constructor</code> 三个结果</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(student)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(student</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(student</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor)</span></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816111821169.png" alt="image-20210816111821169" data-fancybox="gallery"></p><p>我们可以发现 <code>constructor</code> 属性的值是创建 <code>student</code> 的类，也就是构造函数</p><p>这也就是 <code>constructor</code> 的含义，它指向该对象的构造函数，它的作用就是用来保存自己的构造函数引用</p><p>需要<strong>特别注意</strong>的是，所有的 <code>constructor</code> 属性的终点都是 <code>Function</code></p><p>这是因为 <code>Function</code> 既可以看成是一个函数，也可以是对象，所有的函数和对象都是由 <code>Function</code> 构造函数而来 <img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816113534547.png" alt="image-20210816113534547" data-fancybox="gallery"></p><p>这里留下一个问题？</p><blockquote><p>修改了构造函数的原型对象，<code>constructor</code>指向谁</p><p><code>functionName.prototype = {}</code></p></blockquote><h2 id="原型对象、实例对象、构造函数之间的关系" tabindex="-1">原型对象、实例对象、构造函数之间的关系 <a class="header-anchor" href="#原型对象、实例对象、构造函数之间的关系" aria-label="Permalink to &quot;原型对象、实例对象、构造函数之间的关系&quot;">​</a></h2><p>一张图搞定，前面的内容懂了，自己推一下</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/foo.png" alt="foo" data-fancybox="gallery"></p><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>原型链其实也很简单：对象 =&gt; 对象的原型 =&gt; 原型的原型 =&gt; 原型的原型的原型 =&gt; null，这就是原型链</p><p>那这是什么意思呢，在我们前面在讲查找原则的时候，其实也有提到，当一个要查找对象上的属性或者方法时，如果在自身上没有找到，就会在隐式原型对象下查找，直到找到，或者到达尽头 <code>null</code></p><p>在这个查找的过程形成的一条由 <code>__proto__</code> 连接而成的链就是原型链</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210816123733433.png" alt="image-20210816123733433" data-fancybox="gallery"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li><code>__proto__</code> 和 <code>constructor</code> 属性是对象所特有的</li></ol><blockquote><p><code>constructor</code> 是原型对象所特有的，每个对象上必然能找到 <code>constructor</code> 属性</p></blockquote><ol><li><code>prototype</code> 属性是函数特有的</li><li><code>__proto__</code> 的作用是作为桥梁提供一种成员访问机制，不停的通过 <code>__proto__</code> 去查找</li><li><code>prototype</code> 的作用是让函数所实例化的对象拥有公共的属性和方法</li><li><code>constructor</code> 属性的含义是指向对象的构造函数</li><li>修改构造函数的原型对象，需要手动调整 <code>constructor</code></li></ol><blockquote><p>以上就是本文的全部内容了，希望你能喜欢💛，有什么问题可以评论区留言噢~</p></blockquote>`,71),l=[e];function t(c,r,i,d,y,g){return a(),o("div",null,l)}const C=s(p,[["render",t]]);export{F as __pageData,C as default};
