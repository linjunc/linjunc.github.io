import{_ as s,c as a,o as n,V as l}from"./chunks/framework.3d11d069.js";const i=JSON.parse('{"title":"Hard 题","description":"","frontmatter":{},"headers":[],"relativePath":"pages/tschallenge/hard.md","filePath":"pages/tschallenge/hard.md","lastUpdated":1687532274000}'),p={name:"pages/tschallenge/hard.md"},o=l(`<h1 id="hard-题" tabindex="-1">Hard 题 <a class="header-anchor" href="#hard-题" aria-label="Permalink to &quot;Hard 题&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">我的 Issue 提交记录</p><p>Github Issue 记录，<a href="https://github.com/type-challenges/type-challenges/issues/created_by/linjunc" target="_blank" rel="noreferrer">点击查看</a></p></div><h2 id="_6-·-simple-vue" tabindex="-1">6 · Simple Vue <a class="header-anchor" href="#_6-·-simple-vue" aria-label="Permalink to &quot;6 · Simple Vue&quot;">​</a></h2><p>实现类似Vue的类型支持的简化版本。</p><p>通过提供一个函数SimpleVue（类似于Vue.extend或defineComponent），它应该正确地推断出 computed 和 methods 内部的this类型。</p><p>在此挑战中，我们假设SimpleVue接受只带有data，computed和methods字段的Object作为其唯一的参数，</p><ul><li><p>data是一个简单的函数，它返回一个提供上下文this的对象，但是你无法在data中获取其他的计算属性或方法。</p></li><li><p>computed是将this作为上下文的函数的对象，进行一些计算并返回结果。在上下文中应暴露计算出的值而不是函数。</p></li><li><p>methods是函数的对象，其上下文也为this。函数中可以访问data，computed以及其他methods中的暴露的字段。 computed与methods的不同之处在于methods在上下文中按原样暴露为函数。</p></li></ul><p>SimpleVue的返回值类型可以是任意的。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> instance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleVue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      firstname</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      lastname</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Challenges</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      amount</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">fullname</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">firstname</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">lastname</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">hi</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">fullname</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><details class="details custom-block"><summary>查看解答</summary><p>由于没有学过 Vue，所以写起来有点难，看了题解写的，其实不算很难，简单聊聊</p><p><code>SimpleVue</code> 接受的参数是一个对象，也就是 <code>data</code>、<code>computed</code>、<code>methods</code> 这些，这题写的就是这些方法的类型</p><p>那么我们根据泛型来接受它的参数，再通过题目的意思一一返回</p><ul><li><code>Data</code> 返回一个提供上下文 this 的对象</li><li><code>computed</code> 返回 this 作为上下文的函数的对象，进行一些计算并返回结果，因此需要返回 <code>computed</code> 和 This，<code>ThisType</code> 是内置的方法</li><li><code>methods</code> 可以访问其他几个字段</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetComputed</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TComputed</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#FFCB6B;">key</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">keyof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TComputed</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TComputed</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">key</span><span style="color:#A6ACCD;">] </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Result</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Result</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Options</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TData</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TComputed</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TMethods</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TData</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TComputed</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ThisType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TData</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TMethods</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ThisType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TData</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetComputed</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TComputed</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TMethods</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleVue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TData</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TComputed</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TMethods</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Options</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TData</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TComputed</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TMethods</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">;</span></span></code></pre></div></details><h2 id="_17-·-currying" tabindex="-1">17 · currying <a class="header-anchor" href="#_17-·-currying" aria-label="Permalink to &quot;17 · currying&quot;">​</a></h2><p>[Currying]（<a href="https://en.wikipedia.org/wiki/Currying" target="_blank" rel="noreferrer">https://en.wikipedia.org/wiki/Currying</a>）是一种将带有多个参数的函数转换为每个带有一个参数的函数序列的技术。</p><p>例如：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> add </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> three </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> curriedAdd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Currying</span><span style="color:#A6ACCD;">(add)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> five </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">curriedAdd</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>传递给Currying的函数可能有多个参数，您需要正确键入它。</p><p>在此挑战中，curried函数一次仅接受一个参数。分配完所有参数后，它应返回其结果。</p><details class="details custom-block"><summary>查看解答</summary><p><a href="https://www.typescriptlang.org/play?ssl=39&amp;ssc=48&amp;pln=33&amp;pc=1#code/PQKgUABBCMDsEFoKHvzQM4mDRlGlEN37ARgJ4QCCAdgC4AWA9uSQGICuEAFAAICGVAZswEoIAYkAPaoD60kVwBO0rkWzZhyiIAyMwHduiqAD4IgRldA7DGAZa0BXgYAqlQN-+gRejAMP+Aia0Bz8RAAKAJQiBOU0Db8dcAUsYHnEwCAGLQhtQAp1QBNrQERjQAwjQFo5QC+9QDrowH95QApXABUiAAcAUwBlAGNpAEtsyggAFgA6AAYQgG0AYWZZIhLyAHMAXUAIf+pKSmyAZwAuYGBc8mqAdxKAazLcgBMSrmraaU7gOcXgFraOzsBIf8B6M0AAOUBZz0AwHUAyPUBIc0AsTUAqOUAh5UAHU0AQt0BfxXfAG3jAEbGgC45QDz1s8Huc3l9foB4vUA6EqfQABRoB6c2CUGwgGj5QBBmoAsf5CAANCZRhthCvRhhUuMtlhAALzsLijCDkZgAWwIuWkABoIAQmSz2ZyhLTdFwIABqXmk8kVGjSXK5OkQKnLNjQHkAJgEITJ5ApEEKrVKK1I1KVB2k7S6bBV2qguv1vBKADdFfTDbISibqWwtWwAMx2iCE-EhQAE8oAkBMAm374i1Wzr4n7vQD3yoBfgKeUJsgAqDQAA6YBAyMAxtaAOw9AHSpgFNFQDB2miINhIrE4jYPcblr9zoBCa0Ao3KAUuNAOvKkI+gUAYEqAWUTADHagAEje4fQBwKjYK4AUvUAK-GAPbVAG6KgGW-QA55tXsLowhAAOIlGjMAgQQBQcoBT80A0O44gZDMYTYmFajVABWww2W2AcGAAC9qAQJoADkwBAYAwEg0AIAAfTg+CEPgiBAAN5T5AGO5QBAD1gxCcJgiBwLASgckVABJVlsgAGwAHkYchdHpWiIFyAAPSgpmWYZ2DYaoeJkToxggDpeE5MgtmGYVdCEkTXCDKA5PkhSoAAflE-imNY9jOIaKTpAgRgeR46odIgVxcgpbpsEUqyFJUth5iZRgJIgMjKKo7jeLEplTIpJzXG0SzrMCryAsChT+VyV1pEg5ZckKCiZEVfhyEKSgSnoCA4yOGi6LYXhyAc8gBCZFzqNo-yoJAbDcIQiBAGlbQBV6LSDEququD8IgkpyM2WViIgABvCAAFEAEdmC4CieUG5i8hSiAAF8IF4aRaFZCAAHIOCIvIEBfcaKKmTozOAZhUoo4Y1sgh0KibL1lmgc0jXjNgbSZClSi6Hk+WZNkOW5A0mQIWhaH2ngnMoaRmFybUroNI1bo1B7DmtF6IDeo5Pv5H7OR5QoAaBkHyB5ZY8eB3IeB5XISYJnleFe8H0YgToqbJwq6V0cHIe1QjesKLhhjMpUGmwKaZsoKiRrG6iAq23JaF4WHPRWdUGTp97OictgvoFX6Ndx3l8ZZsGIdyXdtC5YXptisWJfGqjpeIuWFebDUeRRtGug1rWsekXXmdBtn2GJ-XSf9kV2Ep4OCY12nUfpj2A7YJnI8NgOOZNnQzbACzILAaDWpqwBoOXOQBTaxa1r2tz8AdAgQdAGq5VDAGPIwAVbzvQYRnGYBn1fD8v22X8eGGGZOX-QCQN3CAb2b1uHw7rv30-TY+9gYBhmBk60r1cfABezR4NGn9un2GF9597kegNAgiwCAA" target="_blank" rel="noreferrer">链接</a></p><p>在有多个参数的函数中，通过调用函数返回函数的思路，每次返回一个只带有一个变量的函数，通过 infer + 递归</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Fn</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fn</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Args</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">F</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Rest</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">k</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">F</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Impl</span><span style="color:#89DDFF;">&lt;(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Rest</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Currying</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Fn</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fn</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Fn</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></details><h2 id="_55-·-union-to-intersection" tabindex="-1">55 · Union to Intersection <a class="header-anchor" href="#_55-·-union-to-intersection" aria-label="Permalink to &quot;55 · Union to Intersection&quot;">​</a></h2><p>实现高级util类型 <code>UnionToIntersection&lt;U&gt;</code></p><p>例如：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">I</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Union2Intersection</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">true</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// expected to be &#39;foo&#39; &amp; 42 &amp; true</span></span></code></pre></div><details class="details custom-block"><summary>查看解答</summary><ol><li><code>U extends unknown ? (args: U) =&gt; void : never</code> 将生成函数的联合函数类型 比如：((args: true) =&gt; void) | ((args: 42) =&gt; void) | ((args: &quot;foo&quot;) =&gt; void)</li><li><code>extends (args: infer T) =&gt; void ? T : never</code> 将联合函数聚合成一个函数，👆的联合函数将变为交叉参数的函数 (args: &#39;foo&#39; &amp; 42 &amp; true) =&gt; void</li><li>返回出函数参数</li></ol><p>知识点：第二步骤 联合函数的类型，怎么就变成了交叉参数的一个函数？ ts对应<a href="https://github.com/Microsoft/TypeScript/pull/21496" target="_blank" rel="noreferrer">PR</a></p><p>即：在 逆变位置 的同一类型变量中的多个候选会被 推断 成 交叉类型。【函数参数是逆变的，而对象属性是协变的。】</p><p>关于 <a href="https://jkchao.github.io/typescript-book-chinese/tips/covarianceAndContravariance.html" target="_blank" rel="noreferrer">逆变与协变</a></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ToFunc</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UnionToIntersection</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">U</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ToFunc</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">U</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">infer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Arg</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">never</span></span></code></pre></div></details>`,22),e=[o];function t(c,r,y,A,F,C){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
