import{_ as a,c as s,o,U as e}from"./chunks/framework.4d5e0f31.js";const D=JSON.parse('{"title":"浅析 Map 和 WeakMap 区别以及使用场景","description":"希望这一篇文章能让你对 Map 有更好的理解，或者能够帮你理解 Map 和 WeakMap 这篇文章会先从Map再到WeakMap","frontmatter":{"title":"浅析 Map 和 WeakMap 区别以及使用场景","date":"2021-07-25T17:34:27.000Z","id":1635420087,"photos":"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/map.png","tags":["JavaScript"],"categories":[["前端总结","JavaScript精读"]],"keywords":"Map,weakMap","description":"希望这一篇文章能让你对 Map 有更好的理解，或者能够帮你理解 Map 和 WeakMap 这篇文章会先从Map再到WeakMap"},"headers":[],"relativePath":"pages/summary/weakmap.md","lastUpdated":1680360770000}'),n={name:"pages/summary/weakmap.md"},l=e(`<blockquote><p>在阅读红宝书时遇到了 <code>WeakMap</code> 这个关键字，第一次见感觉没啥用，是我见识浅了，其实还是有点用的，有多大我不知道（快跑）</p></blockquote><p>希望这一篇文章能让你对 <code>Map</code> 有更好的理解，或者能够帮你理解 <code>Map</code> 和 <code>WeakMap</code></p><p>这篇文章会先从<code>Map</code>再到<code>WeakMap</code></p><h2 id="一、为什么是-map" tabindex="-1">一、为什么是 Map ？ <a class="header-anchor" href="#一、为什么是-map" aria-label="Permalink to &quot;一、为什么是 Map ？&quot;">​</a></h2><h3 id="_1-传统对象结构" tabindex="-1">1. 传统对象结构 <a class="header-anchor" href="#_1-传统对象结构" aria-label="Permalink to &quot;1. 传统对象结构&quot;">​</a></h3><p><code>Map</code>本质上是一个键值对的集合。和传统对象结构相比，传统的对象只能用<strong>字符串作为键名</strong>，这就在使用上造成了很大的限制了。这也是新增 <code>Map</code> 的原因之一。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// element 为节点对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(element)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出 div.node 对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将对象转化成字符串输出 [object HTMLDivElement]</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用点操作符不能有空格，所以采用中括号的形式给对象赋值</span></span>
<span class="line"><span style="color:#A6ACCD;">data[element] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">objectData</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出 objectData，说明在对象中存在[object HTMLDivElement]键名</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(data[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[object HTMLDivElement]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在上面的代码中，我们创建了一个对象并将一个节点对象作为了它的键名，并进行了代码测试，首先验证了获取到的<code>element</code>节点为一个对象，再确定了经过<code>toString</code>方法转化后的结果，以这个值为键名成功的输出了<code>value</code>值<code>objectData</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724161150545.png" alt="image-20210724161150545" data-fancybox="gallery"></p><p>通过上面的测试，确定了传统对象的键名会通过<code>toString</code>方法转化为<strong>字符串类型</strong></p><blockquote><p>注意：在我们访问对象成员时，键名<strong>有空格</strong>时不能采用点访问，例如<code>data.ab c</code></p><p>这样是<strong>错误的</strong>。我们需要采用<code>data[&#39;ab c&#39;]</code>的形式来访问</p></blockquote><h3 id="_2-map-结构" tabindex="-1">2. Map 结构 <a class="header-anchor" href="#_2-map-结构" aria-label="Permalink to &quot;2. Map 结构&quot;">​</a></h3><p><code>Map</code>类似于对象，但是键名不限于字符串，可以说<code>Object</code>结构提供<code>键-值</code>对应，<code>Map</code>结构提供<code>值-值</code>对应因此其实采用<code>map</code>结构会优于传统对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. 通过new Map来创建dataMap容器</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dataMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 获取节点对象，作为测试数据</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. 通过 set 方法给 dataMap 中指定键和对应的值</span></span>
<span class="line"><span style="color:#A6ACCD;">dataMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(element</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">objectData</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 4. 通过 get 来从 dataMap 中获取键名对应的值</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dataMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(element))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 5. 揭开面目</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dataMap)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>从上面的代码中，我们可以清楚的看到，第 8 行代码获取值时直接传入了<code>element</code>对象，</p><p>可以成功的获取到对应的值，在最后打印<code>dataMap</code>时更是验证了上诉说法</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724164519441.png" alt="image-20210724164519441" data-fancybox="gallery"></p><p>成功的将对象作为了键名，弥补了传统对象的不足</p><h3 id="_3-map-的特点" tabindex="-1">3. Map 的特点 <a class="header-anchor" href="#_3-map-的特点" aria-label="Permalink to &quot;3. Map 的特点&quot;">​</a></h3><ol><li><p>Map 默认情况下不包含任何键，所有键都是自己添加进去的。不同于 Object 原型链上有一些默认的键。</p></li><li><p>Map 的键可以是<strong>任意类型</strong>数据，就连函数都可以。</p></li><li><p>Map 的键值对个数可以<strong>轻易</strong>通过<code>size</code>属性获取，Object 需要手动计算。</p></li><li><p>Map 在频繁增删键值对的场景下<strong>性能</strong>要比 Object 好。</p></li></ol><h3 id="_4-什么时候用-map" tabindex="-1">4. 什么时候用 Map <a class="header-anchor" href="#_4-什么时候用-map" aria-label="Permalink to &quot;4. 什么时候用 Map&quot;">​</a></h3><ol><li>要添加的键值名和 Object 上的默认键值名冲突，又不想改名时，<strong>用 Map</strong></li><li>需要 String 和 Symbol 以外的数据类型做键值时，<strong>用 Map</strong></li><li>键值对很多，有需要计算数量时，<strong>用 Map</strong></li><li>需要频繁增删键值对时，<strong>用 Map</strong></li></ol><h2 id="二、map-实例属性和方法" tabindex="-1">二、Map 实例属性和方法 <a class="header-anchor" href="#二、map-实例属性和方法" aria-label="Permalink to &quot;二、Map 实例属性和方法&quot;">​</a></h2><p>在上面我们已经接触到了<code>Map</code>的个别 API，接下来简单说说</p><h3 id="_1-set" tabindex="-1">1. set <a class="header-anchor" href="#_1-set" aria-label="Permalink to &quot;1. set&quot;">​</a></h3><p><code>set</code>方法设置键名<code>key</code>对应的键值为<code>value</code>，然后会返回整个<code>Map</code>结构，如果设置的<code>key</code>已经存在，则会更新<code>value</code>值，否则会新生成该键</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724170830046.png" alt="image-20210724170830046" data-fancybox="gallery"></p><p>也可以采用链式写法设置多组数据</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724171054240.png" alt="image-20210724171054240" data-fancybox="gallery"></p><p>成功输出如下：</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724171030502.png" alt="image-20210724171030502" data-fancybox="gallery"></p><h3 id="_2-get" tabindex="-1">2. get <a class="header-anchor" href="#_2-get" aria-label="Permalink to &quot;2. get&quot;">​</a></h3><p>通过<code>get</code>方法读取<code>key</code>对应的键值，如果传入的键值不存在，则会返回<code>undefined</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724170801123.png" alt="image-20210724170801123" data-fancybox="gallery"></p><p>控制台成功输出<code>ljc</code></p><h3 id="_3-has" tabindex="-1">3. has <a class="header-anchor" href="#_3-has" aria-label="Permalink to &quot;3. has&quot;">​</a></h3><p>判断传入的键是否存在当前<code>Map</code>对象中，该方法返回一个布尔值</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724202711276.png" alt="image-20210724202711276" data-fancybox="gallery"></p><p>在上面的代码中，存在<code>name</code>为<code>true</code>，不存在<code>sex</code>返回<code>false</code></p><h3 id="_4-delete" tabindex="-1">4. delete <a class="header-anchor" href="#_4-delete" aria-label="Permalink to &quot;4. delete&quot;">​</a></h3><p>删除传入的键，返回<code>true</code>，如果删除失败，则返回<code>false</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724203222536.png" alt="image-20210724203222536" data-fancybox="gallery"></p><h3 id="_5-clear" tabindex="-1">5. clear <a class="header-anchor" href="#_5-clear" aria-label="Permalink to &quot;5. clear&quot;">​</a></h3><p>清除所有成员，没有返回值</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724204013186.png" alt="image-20210724204013186" data-fancybox="gallery"></p><p><code>clear</code>前后结果对比，注意<code>clear</code>没有<strong>返回值</strong>！</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724203849295.png" alt="image-20210724203849295" data-fancybox="gallery"></p><h2 id="三、遍历方法" tabindex="-1">三、遍历方法 <a class="header-anchor" href="#三、遍历方法" aria-label="Permalink to &quot;三、遍历方法&quot;">​</a></h2><p>可以采用<code>for...of</code>循环和<code>forEach</code>两种方法。由于<code>Map</code>实例会维护键值对的插入顺序，因此可以根据插入顺序进行遍历</p><p>采用<strong>for...of</strong></p><blockquote><p><code>for...of</code>可以遍历有<code>iterator</code>接口的数据结构</p></blockquote><ul><li><code>keys()</code>：返回键名的遍历器</li><li><code>values()</code>：返回键值的遍历器</li><li><code>entries()</code>：返回键值对的遍历器</li><li><code>forEach()</code>：使用回调函数遍历每个成员</li></ul><h4 id="map-entries" tabindex="-1">map.entries() <a class="header-anchor" href="#map-entries" aria-label="Permalink to &quot;map.entries()&quot;">​</a></h4><p>在<code>Map</code>实例中<strong>有一个迭代器</strong>，能以插入顺序生成<code>[key,value]</code>形式的数据。</p><p>我们可以通过<code>entries</code>方法来获得这个迭代器，从而利用<code>for...of</code>进行遍历操作</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724223527628.png" alt="image-20210724223527628" data-fancybox="gallery"></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210724223611443.png" alt="image-20210724223611443" data-fancybox="gallery"></p><p>也可以采用如下进行遍历，每次<code>item</code>获取到一个数组</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725104827297.png" alt="image-20210725104827297" data-fancybox="gallery"></p><p>又因为<code>entries</code>是<strong>默认</strong>的迭代器，所以可以直接对<code>Map</code>实例使用扩展操作或者直接采用<code>map</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725104331505.png" alt="image-20210725104331505" data-fancybox="gallery"></p><p>采用<strong>扩展</strong>操作</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725104503000.png" alt="image-20210725104503000" data-fancybox="gallery"></p><h4 id="map-values" tabindex="-1">map.values() <a class="header-anchor" href="#map-values" aria-label="Permalink to &quot;map.values()&quot;">​</a></h4><p>可以采用遍历<code>map.values()</code>的方式来遍历<code>map</code>容器的属性值</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725105131665.png" alt="image-20210725105131665" data-fancybox="gallery"></p><h4 id="map-keys" tabindex="-1">map.keys() <a class="header-anchor" href="#map-keys" aria-label="Permalink to &quot;map.keys()&quot;">​</a></h4><p>可以采用<code>map.keys()</code>来遍历键名</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725105326525.png" alt="image-20210725105326525" data-fancybox="gallery"></p><h4 id="采用-foreach-回调遍历" tabindex="-1">采用 forEach() 回调遍历 <a class="header-anchor" href="#采用-foreach-回调遍历" aria-label="Permalink to &quot;采用 forEach() 回调遍历&quot;">​</a></h4><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725110225814.png" alt="image-20210725110225814" data-fancybox="gallery"></p><p>通过回调的方式遍历<code>map</code></p><h2 id="四、map-类型转化" tabindex="-1">四、Map 类型转化 <a class="header-anchor" href="#四、map-类型转化" aria-label="Permalink to &quot;四、Map 类型转化&quot;">​</a></h2><p>几种与<code>map</code>相互类型转化的方法</p><h4 id="map-转为数组" tabindex="-1">Map 转为数组 <a class="header-anchor" href="#map-转为数组" aria-label="Permalink to &quot;Map 转为数组&quot;">​</a></h4><p>通过扩展运算符实现</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">map]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h4 id="数组转为-map" tabindex="-1">数组转为 Map <a class="header-anchor" href="#数组转为-map" aria-label="Permalink to &quot;数组转为 Map&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">(arr)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h4 id="map-转为对象" tabindex="-1">Map 转为对象 <a class="header-anchor" href="#map-转为对象" aria-label="Permalink to &quot;Map 转为对象&quot;">​</a></h4><p>通过遍历利用<code>set</code>将键值对加入对象中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> v</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> map) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">k</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="对象转为-map" tabindex="-1">对象转为 Map <a class="header-anchor" href="#对象转为-map" aria-label="Permalink to &quot;对象转为 Map&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> k </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(obj)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">k</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="五、什么是-weakmap" tabindex="-1">五、什么是 WeakMap ？ <a class="header-anchor" href="#五、什么是-weakmap" aria-label="Permalink to &quot;五、什么是 WeakMap ？&quot;">​</a></h2><p>总所周知，<code>WeakMap</code>是 ES6 中新增的一种集合类型，叫做“弱映射”。它和<code>Map</code>是兄弟关系，与<code>Map</code>的区别就在于这个<strong>弱字</strong>，API 还是<code>Map</code>的那套（只有<code>set</code> <code>get</code> <code>has</code> <code>delete</code>)</p><p>那它真正是什么意思呢？</p><blockquote><p>这其实描述的是 JS 中<strong>垃圾回收</strong>程序对待“弱映射”中键的方式</p></blockquote><p>那为什么要有 WeakMap 呢？它解决了什么问题呢？这些问题后面都会讲到</p><h2 id="六、weakmap-的特性" tabindex="-1">六、WeakMap 的特性 <a class="header-anchor" href="#六、weakmap-的特性" aria-label="Permalink to &quot;六、WeakMap 的特性&quot;">​</a></h2><p>我们先从 WeakMap 的特性讲起</p><h3 id="_1-weakmap-只能将对象作为键名" tabindex="-1">1. WeakMap 只能将对象作为键名 <a class="header-anchor" href="#_1-weakmap-只能将对象作为键名" aria-label="Permalink to &quot;1. WeakMap 只能将对象作为键名&quot;">​</a></h3><ul><li>只接受对象作为键名（<code>null</code> 除外），不接受其他类型的值作为键名</li></ul><p><strong>null 除外</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725145126758.png" alt="image-20210725145126758" data-fancybox="gallery"></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725145141515.png" alt="image-20210725145141515" data-fancybox="gallery"></p><p><strong>正常添加</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725145321219.png" alt="image-20210725145321219" data-fancybox="gallery"></p><h3 id="_2-weakmap-的键名引用的对象是弱引用" tabindex="-1">2. WeakMap 的键名引用的对象是弱引用 <a class="header-anchor" href="#_2-weakmap-的键名引用的对象是弱引用" aria-label="Permalink to &quot;2. WeakMap 的键名引用的对象是弱引用&quot;">​</a></h3><p>这里懵了挺久的，但是这是<code>WeakMap</code>结构的关键所在</p><p>要想读懂这句话，不容易，我们需要先知道<strong>强引用和弱引用</strong></p><h4 id="_2-1-什么是强引用" tabindex="-1">2.1 什么是强引用？ <a class="header-anchor" href="#_2-1-什么是强引用" aria-label="Permalink to &quot;2.1 什么是强引用？&quot;">​</a></h4><p>我们先来看看<strong>强引用</strong>，这是阮一峰老师书上的例子</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725151557054.png" alt="image-20210725151557054" data-fancybox="gallery"></p><p>在上面的代码中，<code>e1</code>和<code>e2</code>是两个对象，通过<code>arr</code>数组对这两个对象添加一些文字说明。但是这样就形成了<code>arr</code>对<code>e1</code>和<code>e2</code>的引用，而这种引用又是强引用。它的区别就体现在。当我们不再需要这两个对象时，我们必须手动的删除这个引用，解除<code>arr</code>都两个对象的引用关系，否则垃圾回收机制不会释放<code>e1</code>和<code>e2</code>占用的内存。因为，<code>arr</code><strong>仍然存在着对对象的引用！</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725152942154.png" alt="image-20210725152942154" data-fancybox="gallery"></p><p><strong>麻烦的操作势必会造成问题，当忘记了手动删除引用，就会造成内存泄漏</strong></p><h4 id="_2-2-什么是弱引用" tabindex="-1">2.2 什么是弱引用？ <a class="header-anchor" href="#_2-2-什么是弱引用" aria-label="Permalink to &quot;2.2 什么是弱引用？&quot;">​</a></h4><p>对于<strong>弱引用</strong>，百度百科给出的答案：</p><blockquote><p>在计算机程序设计中，弱引用与强引用相对，是指不能确保其引用的对象不会被垃圾回收器回收的引用。 一个对象若只被弱引用所引用，则被认为是不可访问（或弱可访问）的，并因此可能在任何时刻被回收。</p></blockquote><p>也就是说<strong>如果</strong>我们能这样创建一个弱引用的对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//假设</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakObject</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>我们就可以静静的等待垃圾车来把它拖走了，<code>obj</code>所引用的对象就会被回收</p><p>如果还没有理解的话，我们再来看看</p><h4 id="_2-3-弱引用和强引用图解" tabindex="-1">2.3 弱引用和强引用图解 <a class="header-anchor" href="#_2-3-弱引用和强引用图解" aria-label="Permalink to &quot;2.3 弱引用和强引用图解&quot;">​</a></h4><p>从 1 套代码结合两张图来理解</p><p>对于强引用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> my </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ljc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sex</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">男</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(my</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(myMap)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725161643051.png" alt="image-20210725161643051" data-fancybox="gallery"></p><p>对于弱引用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> my </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ljc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sex</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">男</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(my</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(myMap)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725161619701.png" alt="image-20210725161619701" data-fancybox="gallery"></p><p>图一中的数据被<code>my</code>和<code>myMap</code>实例对象所引用，引用计数为 2，图 2 中建立了<code>myMap</code>对<code>my</code>所引用的对象的<strong>弱引用</strong>，引用计数为 1</p><p>在上面我们谈到强引用数据被删除时，需要手动解除引用，而弱引用则可以等待垃圾回收机制自动清除</p><p><strong>弱引用与垃圾回收</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725162356371.png" alt="image-20210725162356371" data-fancybox="gallery"></p><p>当执行<code>my = null</code>时会解除<code>my</code>对原数据的引用，而<code>myMap</code>实例对象对<code>my</code>所引用对象是弱引用关系，该数据的<strong>引用计数为 0</strong> ，程序垃圾回收机制在执行时会将引用对象回收。而如果时强引用关系则<strong>引用计数为 1</strong> ，不会被垃圾回收机制清除。</p><blockquote><p>总的来说， <code>WeakMap</code> 保持了对键名所引用的对象的弱引用，即垃圾回收机制不将该引用考虑在内。只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，<code>WeakMap</code> 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。</p></blockquote><h3 id="_3-不可遍历" tabindex="-1">3. 不可遍历 <a class="header-anchor" href="#_3-不可遍历" aria-label="Permalink to &quot;3. 不可遍历&quot;">​</a></h3><p>正因为<code>WeakMap</code>对键名所引用的对象是弱引用关系，因此<code>WeakMap</code>内部成员是会<strong>却决于垃圾回收机制有没有执行</strong>，运行前后成员个数很可能是不一样的，而垃圾回收机制的执行又是<strong>不可预测</strong>的，因此不可遍历</p><blockquote><p>了解了<code>WeakMap</code>的特性，相信对“为什么要有<code>WeakMap</code>？”已经有了一定的答案</p></blockquote><h2 id="七、map-和-weakmap-的区别" tabindex="-1">七、Map 和 WeakMap 的区别 <a class="header-anchor" href="#七、map-和-weakmap-的区别" aria-label="Permalink to &quot;七、Map 和 WeakMap 的区别&quot;">​</a></h2><blockquote><p>看到这里相信心中已经有答案了</p></blockquote><ul><li><code>Map</code> 的键可以是任意类型，<code>WeakMap</code> 只接受对象作为键（null 除外），不接受其他类型的值作为键</li><li><code>Map</code> 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键； <code>WeakMap</code> 的键是弱引用，键所指向的对象可以被垃圾回收，此时键是无效的</li><li><code>Map</code> 可以被遍历， <code>WeakMap</code> 不能被遍历</li></ul><h2 id="八、weakmap-的使用场景" tabindex="-1">八、WeakMap 的使用场景 <a class="header-anchor" href="#八、weakmap-的使用场景" aria-label="Permalink to &quot;八、WeakMap 的使用场景&quot;">​</a></h2><h3 id="_1-dom-节点元数据" tabindex="-1">1. DOM 节点元数据 <a class="header-anchor" href="#_1-dom-节点元数据" aria-label="Permalink to &quot;1. DOM 节点元数据&quot;">​</a></h3><blockquote><p>用红宝书的例子</p></blockquote><p>因为 weakMap 不会影响垃圾回收，所以可以用来关联元数据</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725171056590.png" alt="image-20210725171056590" data-fancybox="gallery"></p><p>当上面代码执行后，登录按钮从 DOM 树中被删除了，但由于 Map 对节点对象是强引用关系，仍然保存着对按钮的引用，所以会引起内存泄漏</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725171352098.png" alt="image-20210725171352098" data-fancybox="gallery"></p><p>因此可以采用<code>WeakMap</code>当节点删除后，引用计数为 0，等待垃圾回收机制回收</p><h3 id="_2-部署私有属性" tabindex="-1">2. 部署私有属性 <a class="header-anchor" href="#_2-部署私有属性" aria-label="Permalink to &quot;2. 部署私有属性&quot;">​</a></h3><p>利用弱映射，将内部属性设置为实例的弱引用对象，当实例删除时，私有属性也会随之消失，因此不会内存泄漏</p><p>阮一峰老师的代码实例</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725172559971.png" alt="image-20210725172559971" data-fancybox="gallery"></p><h3 id="_3-数据缓存" tabindex="-1">3. 数据缓存 <a class="header-anchor" href="#_3-数据缓存" aria-label="Permalink to &quot;3. 数据缓存&quot;">​</a></h3><p>当我们需要在不修改原有对象的情况下储存某些属性等，而又不想管理这些数据时，可以使用<code>WeakMap</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210725173257029.png" alt="image-20210725173257029" data-fancybox="gallery"></p><hr><blockquote><p>非常感谢您的阅读，欢迎提出你的意见，有什么问题欢迎指出，谢谢！🎈</p></blockquote>`,151),p=[l];function c(t,r,i,d,y,g){return o(),s("div",null,p)}const F=a(n,[["render",c]]);export{D as __pageData,F as default};
