import{_ as s,c as a,o as l,V as n}from"./chunks/framework.3d11d069.js";const d=JSON.parse('{"title":"大厂面经","description":"","frontmatter":{},"headers":[],"relativePath":"pages/interview/internet/baidu.md","filePath":"pages/interview/internet/baidu.md","lastUpdated":1690294571000}'),o={name:"pages/interview/internet/baidu.md"},e=n(`<h1 id="大厂面经" tabindex="-1">大厂面经 <a class="header-anchor" href="#大厂面经" aria-label="Permalink to &quot;大厂面经&quot;">​</a></h1><h2 id="百度面经" tabindex="-1">百度面经 <a class="header-anchor" href="#百度面经" aria-label="Permalink to &quot;百度面经&quot;">​</a></h2><blockquote><p>百度面经合集</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提前批一面 <a href="https://www.nowcoder.com/discuss/399332676883197952?sourceSSR=search" target="_blank" rel="noreferrer">https://www.nowcoder.com/discuss/399332676883197952?sourceSSR=search</a></p></div><h3 id="axios-底层实现-ajax-怎么实现的-优点在哪儿-axios-和-ajax-的关系" tabindex="-1">axios 底层实现，ajax 怎么实现的，优点在哪儿，axios 和 ajax 的关系 <a class="header-anchor" href="#axios-底层实现-ajax-怎么实现的-优点在哪儿-axios-和-ajax-的关系" aria-label="Permalink to &quot;axios 底层实现，ajax 怎么实现的，优点在哪儿，axios 和 ajax 的关系&quot;">​</a></h3><h3 id="用户输入-url-到页面渲染的全过程" tabindex="-1">用户输入 url 到页面渲染的全过程 <a class="header-anchor" href="#用户输入-url-到页面渲染的全过程" aria-label="Permalink to &quot;用户输入 url 到页面渲染的全过程&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li>首先浏览器会对输入的内容进行预估，就是对历史访问过的网站进行匹配</li><li>当用户输入 URL 时，浏览器进程会去解析，并把网络请求传给网络进程，网络进程收到请求任务后，会发起请求。在此之前，浏览器仍会保留当前页面的展示，直到收到请求响应并渲染后，才会更新页面</li><li>（重要）网络进程在收到请求任务后，并不会立即去发送请求，而是先检查本地是否有缓存，如果有本地缓存未过期，会走本地缓存，就是强缓存。 <ul><li>否则会进行 DNS 解析获取 IP 地址，建立 TCP 链接，进行服务端协商缓存</li></ul></li><li>在 TCP 连接前，需要确认对方的身份以及位置，也就是确认 IP 地址。通过 DNS 解析获取 IP 地址，IP 地址可以被缓存，优先走缓存 <ul><li>DNS 解析会优先查看本地的 host 文件是否有映射关系表，没有的话会走本地 DNS 服务器查找，然后到顶级域名服务器找，总之最终会找到 IP 地址</li><li>CDN 就不用去目标服务器找，而去最近的服务器获取，资源更新的话 CDN 再向目标服务器更新</li></ul></li><li>找到 IP 后，会进行 TCP 三次握手。</li><li>浏览器发送HTTP 请求报文</li><li>服务器处理请求，返回 HTTP 响应</li><li>服务端处理完请求后，结果会通过网络发回客户端的浏览器。浏览器会对服务端响应解析，状态码、请求头、请求体等。</li><li>浏览器进程向渲染进程发送提交文档的信息，渲染进程收到提交文档的消息后，会和网络进程建立 IPC 通信。渲染进程会返回确认提交给浏览器进程，浏览器进程在收到确认提交的消息后，会更新浏览器界面状态，包括安全状态、地址栏的 URL、前进后退的历史状态，并渲染HTML然后更新。 <ul><li>这同时也解释了为什么在浏览器的地址栏里面输入了一个地址后，如果加载速度比较慢，之前的页面不会立马消失，而是需要等待加载一会才能把页面内容更新。</li></ul></li><li>接下来到了渲染进程的工作，渲染进程首先会对获取到的 HTML 字节流文件进行解析，这里会通过 HTML Parser 模块，通过分词器，将字节流分为 token，这一步的目的是把标签区分开。再对 token 进行组装，构建 DOM 树。</li><li>在构建完 DOM 树后，还需要 CSS ，在拿到 CSS样式表首先会进行一次标准化，将属性值统一，这里面同时也会对百分比、继承、calc 等进行转化，生成 renderObject。但这些 CSS 还需要转成 StyleSheets</li><li>在 CSSOM 和 DOM 树构建完成后，会对 DOM 树中不可见节点进行剔除，比如 head，然后会对 <code>display: none</code> 这些节点筛除，不出现在 layout tree 中，因为这些节点不会影响到布局。接下来会对节点进行布局，计算节点的坐标位置、大小</li><li>接下来会对布局树进行分层，生成 Layer Tree</li><li>在拿到 Layer Tree 后，会对每个图层进行绘制，会把图层的绘制拆分成很多的绘制指令，形成一个绘制指令列表，记录需要执行的绘制操作，然后 commit 到合成线程中</li><li>在合成线程中会将图层进行分块，形成图块，按照视口来优先生成位图</li><li>在 raster 完成后，合成线程会生成绘制图块命令 draw quad ，并生成 draw quads 给浏览器进程，viz 组件会调用 GL 指令把 draw quads 最终输出到屏幕上</li></ol><p>在最后 commit raster 数据的时候，会有缓冲机制，通过 pending Tree</p><p>Compositor thread 有三棵 cc::LayerImpl 树：</p><ul><li>Pending tree: 负责接收 commit，然后将 LayerImpl 进行 Raster</li><li>Active tree: 会从这里取出栅格化好的 LayerImpl 进行 Draw 操作</li><li>Recycle tree：为避免频繁创建 LayerImpl 对象，Pending tree 后续不会被销毁，而是退化成 Recycle tree。</li></ul></div><h3 id="js-的数据类型" tabindex="-1">js 的数据类型 <a class="header-anchor" href="#js-的数据类型" aria-label="Permalink to &quot;js 的数据类型&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>undefined</code>、<code>null</code>、<code>number</code>、<code>string</code>、<code>boolean</code>、<code>object</code>、<code>bigint</code>、<code>Symbol</code></p></div><h3 id="null-和-undefined-的区别-使用场景上" tabindex="-1">null 和 undefined 的区别，使用场景上 <a class="header-anchor" href="#null-和-undefined-的区别-使用场景上" aria-label="Permalink to &quot;null 和 undefined 的区别，使用场景上&quot;">​</a></h3><ul><li><p>null 表示&quot;没有对象&quot;，即该处不应该有值</p></li><li><p>undefined 表示&quot;缺少值&quot;，就是此处应该有一个值，但是还没有定义</p></li><li><p>null 的用法：表示函数的参数不是对象、作为对象原型链的终点</p></li><li><p>undefined 的用法：声明未赋值、参数为传递，对象没有值、函数返回值</p></li></ul><h3 id="_1-new-number-1-相等吗" tabindex="-1"><code>1 === new Number(1)</code> 相等吗 <a class="header-anchor" href="#_1-new-number-1-相等吗" aria-label="Permalink to &quot;\`1 === new Number(1)\` 相等吗&quot;">​</a></h3><p>不相等，<code>new Number</code> 返回的是包装对象，这里涉及到包装类的知识</p><p>以字符串为例子，在我们操作一个字符串时，例如 <code>str.substring</code>，我们操作的原始类型 string 原本是没有这个方法的，它会通过 <code>new String(str)</code>，把 str 包装成对象调用</p><p>内部是这样的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(str)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span></code></pre></div><p>大概意思就是包装类型使用完就会被销毁，不会存在内存中</p><h3 id="if-if-if-0-是true还是false" tabindex="-1"><code>if（{}） if（[ ]）if（0）</code>是true还是false <a class="header-anchor" href="#if-if-if-0-是true还是false" aria-label="Permalink to &quot;\`if（{}） if（[ ]）if（0）\`是true还是false&quot;">​</a></h3><p>对象是引用，原始值是 false</p><h3 id="symbol-类型-写一下怎么用" tabindex="-1">symbol 类型 写一下怎么用 <a class="header-anchor" href="#symbol-类型-写一下怎么用" aria-label="Permalink to &quot;symbol 类型 写一下怎么用&quot;">​</a></h3><h3 id="script-会阻塞-html-嘛-css-呢" tabindex="-1">script 会阻塞 html 嘛 css 呢 <a class="header-anchor" href="#script-会阻塞-html-嘛-css-呢" aria-label="Permalink to &quot;script 会阻塞 html 嘛 css 呢&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>script 的加载如果没有 defer 或者 async 的话，会在同步解析，遇到 script 标签会暂停解析，先下载 script 再执行，执行完再继续解析</p><p>如果有 defer 的话，遇到 script 会下载，但会等待 html 解析完，loaded 事件触发前执行</p><p>如果是 async 的话，遇到 script 会下载，但不会停止解析，等待 script 下载完立刻执行</p></div><p>DOM 解析和 CSS 解析是并行的，因此 CSS 加载不会阻塞 DOM 树的解析，但是 CSS 加载会阻塞 DOM 树的渲染</p><ul><li>css 加载不会阻塞DOM树的解析</li><li>css 加载会阻塞DOM树的渲染</li><li>css 加载会阻塞后面js语句的执行</li></ul><h3 id="async-和-defer-怎么用-区别" tabindex="-1">async 和 defer 怎么用 区别 <a class="header-anchor" href="#async-和-defer-怎么用-区别" aria-label="Permalink to &quot;async 和 defer 怎么用 区别&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在实践中，defer 用于需要整个 DOM 或其相对执行顺序很重要的 scripts。而 async 则用于独立的 scripts，如计数器或广告，而它们的相对执行顺序并不重要。</p><p>async 下载完立刻执行，因此和下载速度有关</p><p>defer 下载完等待 HTML 解析完成后，按顺序执行</p></div><h3 id="let-const-和-var-的区别" tabindex="-1">let const 和 var 的区别 <a class="header-anchor" href="#let-const-和-var-的区别" aria-label="Permalink to &quot;let const 和 var 的区别&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>var 声明是全局作用域或函数作用域，而 let 和 const 是块作用域。</p><p>var 变量可以在其作用域内更新和重新声明； let 变量可以更新但不能重新声明； const 变量既不能更新也不能重新声明。 它们都被提升到了作用域的顶部。</p></div><h3 id="html-渲染的过程-html-和-css-是怎么渲染的-重绘是什么阶段完成的-若果要加载一个js-会引发重绘嘛-怎么判断这个js执行完没有" tabindex="-1">html 渲染的过程 html 和 css 是怎么渲染的，重绘是什么阶段完成的，若果要加载一个js，会引发重绘嘛，怎么判断这个js执行完没有 <a class="header-anchor" href="#html-渲染的过程-html-和-css-是怎么渲染的-重绘是什么阶段完成的-若果要加载一个js-会引发重绘嘛-怎么判断这个js执行完没有" aria-label="Permalink to &quot;html 渲染的过程 html 和 css 是怎么渲染的，重绘是什么阶段完成的，若果要加载一个js，会引发重绘嘛，怎么判断这个js执行完没有&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提前批一面 <a href="https://www.nowcoder.com/discuss/395306690277543936?sourceSSR=search" target="_blank" rel="noreferrer">https://www.nowcoder.com/discuss/395306690277543936?sourceSSR=search</a></p></div><h3 id="水平垂直居中布局" tabindex="-1">水平垂直居中布局？ <a class="header-anchor" href="#水平垂直居中布局" aria-label="Permalink to &quot;水平垂直居中布局？&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>text-align + line-height：子元素是 inline-block</li><li>bsolute + margin</li><li>absolute + calc</li><li>flex</li><li>grid</li></ul></div><h3 id="dom、bom常用的api" tabindex="-1">DOM、BOM常用的API？ <a class="header-anchor" href="#dom、bom常用的api" aria-label="Permalink to &quot;DOM、BOM常用的API？&quot;">​</a></h3><h3 id="浏览器缓存机制" tabindex="-1">浏览器缓存机制？ <a class="header-anchor" href="#浏览器缓存机制" aria-label="Permalink to &quot;浏览器缓存机制？&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>强缓存和协商缓存，在浏览器发起 HTTP 请求前，先会检查 Expires，和 <code>Cache-Control</code> 是否过期，如果强缓存有效，则不会发起请求，直接返回静态资源。</p><p>否则进入协商缓存，请求资源时，把用户本地该资源的 etag 同时带到服务端，服务端和最新资源做对比。 如果资源没更改，返回304，浏览器读取本地缓存。 如果资源有更改，返回200，返回最新的资源。</p></div><h3 id="重排、重绘-怎么减少重排重绘的开销" tabindex="-1">重排、重绘？怎么减少重排重绘的开销？ <a class="header-anchor" href="#重排、重绘-怎么减少重排重绘的开销" aria-label="Permalink to &quot;重排、重绘？怎么减少重排重绘的开销？&quot;">​</a></h3><ul><li>重排是指当前页面中的元素布局、尺寸、位置发生变化，浏览器需要重新计算当前元素的布局信息。</li><li>重绘，当页面中元素视觉变化时，如颜色、背景等，不影响布局时，浏览器需要重新绘制这些元素。</li></ul><p>减少重排重绘的开销的方法有很多</p><ol><li>避免逐个样式的变更，将多个样式更改合并到一个 CSS 类中，然后一次性添加一个类，这样只会触发一次重排重绘</li><li>避免使用 table 布局，table 绘导致整个表格重排</li><li>使用 transfrom、filter 这些属性来进行动画，因为这些属性的变化不会触发重排，只会重绘，而且会在合成线程执行，GPU 优化渲染</li><li>对于频繁变化的元素，可以脱离文档流，不会影响到其他元素</li><li>有些 DOM 访问操作会导致浏览器进行重排，如果需要多次访问这些属性，可以设置缓存，然后再使用</li><li>对于大量 DOM 操作场景，可以使用 文档碎片 document fragment 或者离线 dom进行操作，避免触发多次重排重绘</li><li>不可见元素可以设置 display 为 none，避免触发重排重绘</li></ol><h3 id="网页加载很慢的话-怎么做性能优化" tabindex="-1">网页加载很慢的话，怎么做性能优化？ <a class="header-anchor" href="#网页加载很慢的话-怎么做性能优化" aria-label="Permalink to &quot;网页加载很慢的话，怎么做性能优化？&quot;">​</a></h3><h3 id="sessionstorage、localstorage、cookie区别" tabindex="-1">sessionStorage、localStorage、cookie区别？ <a class="header-anchor" href="#sessionstorage、localstorage、cookie区别" aria-label="Permalink to &quot;sessionStorage、localStorage、cookie区别？&quot;">​</a></h3><p>首先这三个都是客户端存储数据的方法，在存储容量上，生命周期、作用域、数据传输上有些不同</p><p>先说说 sessionStorage 和 localStorage ，他们的存储空间大小都是 5 MB 左右，作用域都是在同源页面，不能跨域访问。sessionStorage 仅在本次会话期间有效，浏览器标签页关闭数据就会被清除，localStorage 没有过期时间，一直保留在客户端。</p><p>而 cookie 来说，大小不超过 4 kb，只能存一些简单的数据，做会话标识，cookie 可以设置过期时间，过期自动删除，如果没有设置，那么会在浏览器关闭时删除。</p><p>cookie 的作用域可以自己设置，设置 domain 和 path，用于限制 cookie 只能被特定域名和路径访问，默认情况下 cookie 只能被创建它的同源页面访问。</p><p>cookie 在每次 http 请求时，会自动附加在请求头上发送给服务端。</p><h3 id="用过-localstorage-吗-如果要实现存储数据的时间不超过24小时怎么做" tabindex="-1">用过 localStorage 吗？如果要实现存储数据的时间不超过24小时怎么做？ <a class="header-anchor" href="#用过-localstorage-吗-如果要实现存储数据的时间不超过24小时怎么做" aria-label="Permalink to &quot;用过 localStorage 吗？如果要实现存储数据的时间不超过24小时怎么做？&quot;">​</a></h3><p>有的，localStorage 本身没有提供设置过期时间的功能，但是可以通过在存储数据时添加一个额外的过期时间戳来实现这个需求。</p><p>在获取数据时，先判断是否过期，如果过期则删除 key</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 设置数据到 localStorage</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setItemWithExpiry</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ttl</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">now</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ttl 是以毫秒为单位的时间长度</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">expiryTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">now</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ttl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> expiry</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">expiryTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 从 localStorage 获取数据</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getItemWithExpiry</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parsedData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">now</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果数据已过期，删除它并返回 null</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">now</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parsedData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">expiry</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeItem</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parsedData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 示例：存储一个值，过期时间为 24 小时</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ttl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">24</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">60</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">60</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 24 小时</span></span>
<span class="line"><span style="color:#82AAFF;">setItemWithExpiry</span><span style="color:#A6ACCD;">(key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ttl)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取存储的值（如果已过期，将返回 null）</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> storedValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getItemWithExpiry</span><span style="color:#A6ACCD;">(key)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(storedValue)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="跨域怎么做-谁来做" tabindex="-1">跨域怎么做？谁来做？ <a class="header-anchor" href="#跨域怎么做-谁来做" aria-label="Permalink to &quot;跨域怎么做？谁来做？&quot;">​</a></h3><p>跨域问题主要是因为浏览器的同源策略引起的，当域名、协议、端口不一致时，就会有跨域的问题。</p><p>跨域的解决方法有很多，大多数都需要服务端配合，比较常用的 JSONP 解决跨域，利用 script 标签，img 标签可以加载跨域资源的原理，服务端返回一个包含回调函数的 json 数据，客户端调用回调来处理数据，只支持 get 请求</p><p>第二种是 cors 资源共享，服务端设置响应头 <code>Access-Control-Allow-Origin</code> 来允许特定源的请求</p><p>第三种是代理服务器，做 ng 请求转发到目标服务器</p><p>第四种是用 postMessage 做跨域通信，但不是跨域请求。</p><p>第五种是用 websocket 它没有同源策略的限制，跨域实现跨域通信</p><h3 id="响应式布局实现-媒体查询、vh、vw、rem、em" tabindex="-1">响应式布局实现？媒体查询、vh、vw、rem、em？ <a class="header-anchor" href="#响应式布局实现-媒体查询、vh、vw、rem、em" aria-label="Permalink to &quot;响应式布局实现？媒体查询、vh、vw、rem、em？&quot;">​</a></h3><h3 id="react、vue了解多少-框架底层原理" tabindex="-1">react、vue了解多少？框架底层原理？ <a class="header-anchor" href="#react、vue了解多少-框架底层原理" aria-label="Permalink to &quot;react、vue了解多少？框架底层原理？&quot;">​</a></h3><h3 id="node了解多少-node里的http" tabindex="-1">node了解多少？node里的http？ <a class="header-anchor" href="#node了解多少-node里的http" aria-label="Permalink to &quot;node了解多少？node里的http？&quot;">​</a></h3><h3 id="get、post区别-长度限制、安全性等" tabindex="-1">get、post区别？长度限制、安全性等？ <a class="header-anchor" href="#get、post区别-长度限制、安全性等" aria-label="Permalink to &quot;get、post区别？长度限制、安全性等？&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提前批一面 <a href="https://www.nowcoder.com/discuss/399928752820559872?sourceSSR=search" target="_blank" rel="noreferrer">https://www.nowcoder.com/discuss/399928752820559872?sourceSSR=search</a></p></div><h3 id="手写-instanceof" tabindex="-1">手写 instanceof <a class="header-anchor" href="#手写-instanceof" aria-label="Permalink to &quot;手写 instanceof&quot;">​</a></h3><h3 id="原型链原理" tabindex="-1">原型链原理 <a class="header-anchor" href="#原型链原理" aria-label="Permalink to &quot;原型链原理&quot;">​</a></h3><h3 id="http-和-https-区别" tabindex="-1">http 和 https 区别 <a class="header-anchor" href="#http-和-https-区别" aria-label="Permalink to &quot;http 和 https 区别&quot;">​</a></h3><p>HTTPS 相对于 HTTP 提高了更高的安全性，HTTP 基于 3次握手就可以进行通信，HTTPS 在 HTTP 的基础上还需要进行 TLS 四次握手，对服务端身份进行确认，确保服务器可信</p><p>HTTPS 使用 TLS 对传输数据进行加密，确保数据在传输过程中的安全性，即使数据被拦截也无法轻易破解。同时 HTTPS 可以确保数据在传输过程中未被篡改，通过对数据进行数字签名，可以检测数据是否被篡改</p><p>HTTPS 的端口号是 443，HTTP 是 80</p><h3 id="对称加密和非对称加密" tabindex="-1">对称加密和非对称加密 <a class="header-anchor" href="#对称加密和非对称加密" aria-label="Permalink to &quot;对称加密和非对称加密&quot;">​</a></h3><p>对称加密是指加密和解密用的相同密钥的加密算法，发送方和接收方需要共享一个密钥，用于加解密，例如 HTTPS 的 ECDHE 算法，就采用的对称加密，采用非对称加密的方式生成共享密钥。</p><p>非对称加密是指在加密和解密过程中用的不同的密钥。每个用户都有一对密钥，一个公钥一个私钥。</p><p>非对称加密的优点是密钥管理简单，安全性高，比如 RSA 就是非对称加密，生成 3 个随机数。</p><p>在实际应用中，通常会将对称加密和非对称加密结合使用。例如，使用非对称加密算法安全地传输对称加密算法的密钥，然后使用对称加密算法加密和解密数据。这样既保证了数据传输的安全性，又提高了加密和解密的效率。</p><h3 id="追问-什么时候使用非对称加密" tabindex="-1">（追问）什么时候使用非对称加密 <a class="header-anchor" href="#追问-什么时候使用非对称加密" aria-label="Permalink to &quot;（追问）什么时候使用非对称加密&quot;">​</a></h3><p>数字签名就是用的非对称加密，发送方使用自己的私钥对消息生成数字签名，接收方使用发送方的公钥验证数字签名。</p><p>非对称加密可以确保数据在传输过程中未被篡改</p><h3 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h3><h3 id="tcp、udp-以及应用场景" tabindex="-1">TCP、UDP 以及应用场景 <a class="header-anchor" href="#tcp、udp-以及应用场景" aria-label="Permalink to &quot;TCP、UDP 以及应用场景&quot;">​</a></h3><p>TCP 和 UDP 的是传输层协议 它们有一定的区别</p><p>TCP 是面向连接的可靠的数据传输协议，在数据传输前，需要通过 3 次握手来简历连接，然后通过序号、确认应答、滑动窗口，超时重传、流量控制、拥塞控制等手段来保证数据的可靠传输</p><p>而对于 UDP 而言它是无连接的，不可靠的传输协议，它不需要建立连接即可以进行数据传输，传输速度较快。在 HTTP 3 中就采用了 UDP 来做传输层协议。</p><p>采用 QUIC 结合了 TCP 的可靠性和高效性，来保证 UDP 的安全性，自己实现了一套基于帧和流的二进制传输方式，以及多路复用，同时也有超时重传等能力，保障基于 UDP 实现的不可靠问题，让 UDP 变得可靠。</p><p>对于应用场景而言，TCP 因为它的可靠性以及数据的完整性，决定了它的使用场景，网页内容、文件传输、邮件、远程登录</p><p>而 UDP 则因为它的速度快和实时性，让它在视频会议、实时通话、在线游戏等场景更受青睐</p><h3 id="手写-css-垂直居中" tabindex="-1">手写 CSS 垂直居中 <a class="header-anchor" href="#手写-css-垂直居中" aria-label="Permalink to &quot;手写 CSS 垂直居中&quot;">​</a></h3><h3 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h3><h3 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h3><h3 id="react-生命周期" tabindex="-1">react 生命周期 <a class="header-anchor" href="#react-生命周期" aria-label="Permalink to &quot;react 生命周期&quot;">​</a></h3><h3 id="react-有哪些-hooks" tabindex="-1">react 有哪些 hooks <a class="header-anchor" href="#react-有哪些-hooks" aria-label="Permalink to &quot;react 有哪些 hooks&quot;">​</a></h3><h3 id="react-router" tabindex="-1">react router <a class="header-anchor" href="#react-router" aria-label="Permalink to &quot;react router&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提前批一面<a href="https://www.nowcoder.com/discuss/394976882133934080?sourceSSR=search" target="_blank" rel="noreferrer">https://www.nowcoder.com/discuss/394976882133934080?sourceSSR=search</a></p></div><h3 id="水平垂直居中" tabindex="-1">水平垂直居中 <a class="header-anchor" href="#水平垂直居中" aria-label="Permalink to &quot;水平垂直居中&quot;">​</a></h3><h3 id="position-有哪些值" tabindex="-1">position 有哪些值 <a class="header-anchor" href="#position-有哪些值" aria-label="Permalink to &quot;position 有哪些值&quot;">​</a></h3><h3 id="说一下-bfc" tabindex="-1">说一下 BFC <a class="header-anchor" href="#说一下-bfc" aria-label="Permalink to &quot;说一下 BFC&quot;">​</a></h3><p>BFC 指的是块级格式化上下文，它是一种布局概念吧，每个元素都是一个盒子模型，BFC 定义了盒子模型的布局规则，决定块级盒子如何排列，以及它们之间的相互作用和外边距折叠</p><p>它有以下主要特性，BFC 区域不会和浮动元素重叠，算是一个独立的容器，不会受外部盒子外边距干扰，可以解决外边距合并的问题。</p><p>触发的条件的话有很多，display 设置为 block inline block，table等，float 不为 none 还有 flow-root，以及 overflow 不为 visible等</p><h3 id="js-基本数据类型" tabindex="-1">js 基本数据类型 <a class="header-anchor" href="#js-基本数据类型" aria-label="Permalink to &quot;js 基本数据类型&quot;">​</a></h3><p>number、string、boolean、object、null、undefined、symbol、bigint</p><h3 id="instanceof-原理" tabindex="-1">instanceof 原理 <a class="header-anchor" href="#instanceof-原理" aria-label="Permalink to &quot;instanceof 原理&quot;">​</a></h3><h3 id="说一下-es6-新增" tabindex="-1">说一下 ES6 新增 <a class="header-anchor" href="#说一下-es6-新增" aria-label="Permalink to &quot;说一下 ES6 新增&quot;">​</a></h3><h3 id="for-in-和for-of区别" tabindex="-1">for in 和for of区别 <a class="header-anchor" href="#for-in-和for-of区别" aria-label="Permalink to &quot;for in 和for of区别&quot;">​</a></h3><h3 id="object-defineproperty-定义的对象的属性有哪些" tabindex="-1">Object.defineProperty 定义的对象的属性有哪些 <a class="header-anchor" href="#object-defineproperty-定义的对象的属性有哪些" aria-label="Permalink to &quot;Object.defineProperty 定义的对象的属性有哪些&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p><h3 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h3><p>事件循环是 JS 的一种执行机制，用于处理异步操作，因为 JS 是单线程的嘛，事件循环主要为了避免长耗时操作阻塞主线程，事件循环允许异步任务在特定时机执行，从而实现非阻塞的程序执行。</p><p>事件循环主要涉及到 1 个栈和两个队列，调用栈、消息队列、微任务队列。消息队列主要存储异步</p><p>首先会先执行调用栈中的同步任务，当调用栈为空时，会检查微任务队列是否为空，依次执行微任务队列，直到队列为空。检查消息队列，如果消息队列不为空，取出第一个任务，将其回调函数压入调用栈并执行。</p><p>消息队列主要存的是宏任务，微任务队列优先级更高。</p><h3 id="http-缓存" tabindex="-1">HTTP 缓存 <a class="header-anchor" href="#http-缓存" aria-label="Permalink to &quot;HTTP 缓存&quot;">​</a></h3><h3 id="http-状态码" tabindex="-1">HTTP 状态码 <a class="header-anchor" href="#http-状态码" aria-label="Permalink to &quot;HTTP 状态码&quot;">​</a></h3><h3 id="http2-0-新增特性" tabindex="-1">HTTP2.0 新增特性 <a class="header-anchor" href="#http2-0-新增特性" aria-label="Permalink to &quot;HTTP2.0 新增特性&quot;">​</a></h3><h3 id="git-常用操作" tabindex="-1">Git 常用操作 <a class="header-anchor" href="#git-常用操作" aria-label="Permalink to &quot;Git 常用操作&quot;">​</a></h3><h3 id="webpack-loader-plugin区别" tabindex="-1">webpack loader plugin区别 <a class="header-anchor" href="#webpack-loader-plugin区别" aria-label="Permalink to &quot;webpack loader plugin区别&quot;">​</a></h3><h3 id="说一下知道的plugin" tabindex="-1">说一下知道的plugin <a class="header-anchor" href="#说一下知道的plugin" aria-label="Permalink to &quot;说一下知道的plugin&quot;">​</a></h3><h3 id="vue双向绑定原理-数组是怎么做双向绑定" tabindex="-1">Vue双向绑定原理 数组是怎么做双向绑定 <a class="header-anchor" href="#vue双向绑定原理-数组是怎么做双向绑定" aria-label="Permalink to &quot;Vue双向绑定原理 数组是怎么做双向绑定&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>百度提前批 前端 一二三面面经 <a href="https://www.nowcoder.com/discuss/395239030223384576?sourceSSR=search" target="_blank" rel="noreferrer">https://www.nowcoder.com/discuss/395239030223384576?sourceSSR=search</a></p></div><p>一面：</p><p>主要是做了三道题，其他没太问（做太久了后面没时间了）</p><p>二分查找（如果排序是逆序怎么处理）</p><p>实现 instanceof （null、undefined 怎么处理）</p><p>实现水波跳动效果</p><p>二面：</p><p>key 的作用 -- 虚拟 dom 的构建</p><p>防抖节流，简述实现</p><p>简述 cookie</p><p>闭包为啥会性能不好 -- 变量一直被引用，无法回收 --- 垃圾回收机制：标记清楚法、引用计数法</p><p>两个盒子水平垂直居中的方法</p><p>简述暂时性死区</p><p>简述 async await</p><p>promise.all 的返回值，如果有一个报错呢</p><p>webpack 打包出来的内容特别大怎么办</p><p>实习遇到的问题</p><p>实习过程中的收获：技术上、代码规范、逻辑思维</p><p>三面</p><p>扫码登陆原理</p><p>大文件上传(断点上传怎么实现)</p><h2 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h2><h3 id="随机打乱一个数组" tabindex="-1">随机打乱一个数组 <a class="header-anchor" href="#随机打乱一个数组" aria-label="Permalink to &quot;随机打乱一个数组&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shuffle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">array</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temporaryValue</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">randomIndex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 当数组中还有元素时</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">currentIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 随机选取一个元素</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">randomIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentIndex</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">currentIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 与当前元素交换位置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">temporaryValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">currentIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">currentIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">randomIndex</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">randomIndex</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temporaryValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 示例</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> shuffledArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shuffle</span><span style="color:#A6ACCD;">(myArray)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(shuffledArray)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="字符串-kebab-case-转换成-camelcase" tabindex="-1">字符串 kebab-case 转换成 camelCase <a class="header-anchor" href="#字符串-kebab-case-转换成-camelcase" aria-label="Permalink to &quot;字符串 kebab-case 转换成 camelCase&quot;">​</a></h3><h3 id="手写数组括号匹配" tabindex="-1">手写数组括号匹配 <a class="header-anchor" href="#手写数组括号匹配" aria-label="Permalink to &quot;手写数组括号匹配&quot;">​</a></h3><h3 id="全排列" tabindex="-1">全排列 <a class="header-anchor" href="#全排列" aria-label="Permalink to &quot;全排列&quot;">​</a></h3>`,143),p=[e];function t(r,c,i,y,F,h){return l(),a("div",null,p)}const u=s(o,[["render",t]]);export{d as __pageData,u as default};
