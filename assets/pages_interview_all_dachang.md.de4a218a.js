import{_ as l,c as e,o as s,V as p}from"./chunks/framework.3d11d069.js";const b=JSON.parse('{"title":"大厂面经","description":"","frontmatter":{},"headers":[],"relativePath":"pages/interview/all/dachang.md","filePath":"pages/interview/all/dachang.md","lastUpdated":1689430844000}'),a={name:"pages/interview/all/dachang.md"},o=p(`<h1 id="大厂面经" tabindex="-1">大厂面经 <a class="header-anchor" href="#大厂面经" aria-label="Permalink to &quot;大厂面经&quot;">​</a></h1><h2 id="百度面经" tabindex="-1">百度面经 <a class="header-anchor" href="#百度面经" aria-label="Permalink to &quot;百度面经&quot;">​</a></h2><blockquote><p>百度面经合集</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提前批一面 <a href="https://www.nowcoder.com/discuss/399332676883197952?sourceSSR=search" target="_blank" rel="noreferrer">https://www.nowcoder.com/discuss/399332676883197952?sourceSSR=search</a></p></div><ol><li><p>axios 底层实现，ajax 怎么实现的，优点在哪儿，axios 和 ajax 的关系</p></li><li><p>用户输入 url 到页面渲染的全过程</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li>首先浏览器会对输入的内容进行预估，就是对历史访问过的网站进行匹配</li><li>当用户输入 URL 时，浏览器进程会去解析，并把网络请求传给网络进程，网络进程收到请求任务后，会发起请求。在此之前，浏览器仍会保留当前页面的展示，直到收到请求响应并渲染后，才会更新页面</li><li>（重要）网络进程在收到请求任务后，并不会立即去发送请求，而是先检查本地是否有缓存，如果有本地缓存未过期，会走本地缓存，就是强缓存。 <ul><li>否则会进行 DNS 解析获取 IP 地址，建立 TCP 链接，进行服务端协商缓存</li></ul></li><li>在 TCP 连接前，需要确认对方的身份以及位置，也就是确认 IP 地址。通过 DNS 解析获取 IP 地址，IP 地址可以被缓存，优先走缓存 <ul><li>DNS 解析会优先查看本地的 host 文件是否有映射关系表，没有的话会走本地 DNS 服务器查找，然后到顶级域名服务器找，总之最终会找到 IP 地址</li><li>CDN 就不用去目标服务器找，而去最近的服务器获取，资源更新的话 CDN 再向目标服务器更新</li></ul></li><li>找到 IP 后，会进行 TCP 三次握手。</li><li>浏览器发送HTTP 请求报文</li><li>服务器处理请求，返回 HTTP 响应</li><li>服务端处理完请求后，结果会通过网络发回客户端的浏览器。浏览器会对服务端响应解析，状态码、请求头、请求体等。</li><li>浏览器进程向渲染进程发送提交文档的信息，渲染进程收到提交文档的消息后，会和网络进程建立 IPC 通信。渲染进程会返回确认提交给浏览器进程，浏览器进程在收到确认提交的消息后，会更新浏览器界面状态，包括安全状态、地址栏的 URL、前进后退的历史状态，并渲染HTML然后更新。 <ul><li>这同时也解释了为什么在浏览器的地址栏里面输入了一个地址后，如果加载速度比较慢，之前的页面不会立马消失，而是需要等待加载一会才能把页面内容更新。</li></ul></li><li>接下来到了渲染进程的工作，渲染进程首先会对获取到的 HTML 字节流文件进行解析，这里会通过 HTML Parser 模块，通过分词器，将字节流分为 token，这一步的目的是把标签区分开。再对 token 进行组装，构建 DOM 树。</li><li>在构建完 DOM 树后，还需要 CSS ，在拿到 CSS样式表首先会进行一次标准化，将属性值统一，这里面同时也会对百分比、继承、calc 等进行转化，生成 renderObject。但这些 CSS 还需要转成 StyleSheets</li><li>在 CSSOM 和 DOM 树构建完成后，会对 DOM 树中不可见节点进行剔除，比如 head，然后会对 <code>display: none</code> 这些节点筛除，不出现在 layout tree 中，因为这些节点不会影响到布局。接下来会对节点进行布局，计算节点的坐标位置、大小</li><li>接下来会对布局树进行分层，生成 Layer Tree</li><li>在拿到 Layer Tree 后，会对每个图层进行绘制，会把图层的绘制拆分成很多的绘制指令，形成一个绘制指令列表，记录需要执行的绘制操作，然后 commit 到合成线程中</li><li>在合成线程中会将图层进行分块，形成图块，按照视口来优先生成位图</li><li>在 raster 完成后，合成线程会生成绘制图块命令 draw quad ，并生成 draw quads 给浏览器进程，viz 组件会调用 GL 指令把 draw quads 最终输出到屏幕上</li></ol><p>在最后 commit raster 数据的时候，会有缓冲机制，通过 pending Tree</p><p>Compositor thread 有三棵 cc::LayerImpl 树：</p><ul><li>Pending tree: 负责接收 commit，然后将 LayerImpl 进行 Raster</li><li>Active tree: 会从这里取出栅格化好的 LayerImpl 进行 Draw 操作</li><li>Recycle tree：为避免频繁创建 LayerImpl 对象，Pending tree 后续不会被销毁，而是退化成 Recycle tree。</li></ul></div><ol start="3"><li>js 的数据类型</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>undefined</code>、<code>null</code>、<code>number</code>、<code>string</code>、<code>boolean</code>、<code>object</code>、<code>bigint</code>、<code>Symbol</code></p></div><ol start="4"><li>null 和 undefined 的区别，使用场景上</li></ol><ul><li><p>null 表示&quot;没有对象&quot;，即该处不应该有值</p></li><li><p>undefined 表示&quot;缺少值&quot;，就是此处应该有一个值，但是还没有定义</p></li><li><p>null 的用法：表示函数的参数不是对象、作为对象原型链的终点</p></li><li><p>undefined 的用法：声明未赋值、参数为传递，对象没有值、函数返回值</p></li></ul><ol start="5"><li><code>1 === new Number(1)</code> 相等吗</li></ol><p>不相等，<code>new Number</code> 返回的是包装对象，这里涉及到包装类的知识</p><p>以字符串为例子，在我们操作一个字符串时，例如 <code>str.substring</code>，我们操作的原始类型 string 原本是没有这个方法的，它会通过 <code>new String(str)</code>，把 str 包装成对象调用</p><p>内部是这样的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(str)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span></code></pre></div><p>大概意思就是包装类型使用完就会被销毁，不会存在内存中</p><ol start="6"><li><code>if（{}） if（[ ]）if（0）</code>是true还是false</li></ol><p>对象是引用，原始值是 false</p><ol start="7"><li><p>symbol 类型 写一下怎么用</p></li><li><p>script 会阻塞 html 嘛 css 呢</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>script 的加载如果没有 defer 或者 async 的话，会在同步解析，遇到 script 标签会暂停解析，先下载 script 再执行，执行完再继续解析</p><p>如果有 defer 的话，遇到 script 会下载，但会等待 html 解析完，loaded 事件触发前执行</p><p>如果是 async 的话，遇到 script 会下载，但不会停止解析，等待 script 下载完立刻执行</p></div><p>DOM 解析和 CSS 解析是并行的，因此 CSS 加载不会阻塞 DOM 树的解析，但是 CSS 加载会阻塞 DOM 树的渲染</p><ul><li>css 加载不会阻塞DOM树的解析</li><li>css 加载会阻塞DOM树的渲染</li><li>css 加载会阻塞后面js语句的执行</li></ul><ol start="9"><li>async 和 defer 怎么用 区别</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在实践中，defer 用于需要整个 DOM 或其相对执行顺序很重要的 scripts。而 async 则用于独立的 scripts，如计数器或广告，而它们的相对执行顺序并不重要。</p><p>async 下载完立刻执行，因此和下载速度有关</p><p>defer 下载完等待 HTML 解析完成后，按顺序执行</p></div><ol start="10"><li>let const 和 var 的区别</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>var 声明是全局作用域或函数作用域，而 let 和 const 是块作用域。</p><p>var 变量可以在其作用域内更新和重新声明； let 变量可以更新但不能重新声明； const 变量既不能更新也不能重新声明。 它们都被提升到了作用域的顶部。</p></div><ol start="11"><li>html 渲染的过程 html 和 css 是怎么渲染的，重绘是什么阶段完成的，若果要加载一个js，会引发重绘嘛，怎么判断这个js执行完没有</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提前批一面 <a href="https://www.nowcoder.com/discuss/395306690277543936?sourceSSR=search" target="_blank" rel="noreferrer">https://www.nowcoder.com/discuss/395306690277543936?sourceSSR=search</a></p></div><ol><li>水平垂直居中布局？</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>text-align + line-height：子元素是 inline-block</li><li>bsolute + margin</li><li>absolute + calc</li><li>flex</li><li>grid</li></ul></div><ol start="2"><li><p>DOM、BOM常用的API？</p></li><li><p>浏览器缓存机制？</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>强缓存和协商缓存，在浏览器发起 HTTP 请求前，先会检查 Expires，和 <code>Cache-Control</code> 是否过期，如果强缓存有效，则不会发起请求，直接返回静态资源。</p><p>否则进入协商缓存，请求资源时，把用户本地该资源的 etag 同时带到服务端，服务端和最新资源做对比。 如果资源没更改，返回304，浏览器读取本地缓存。 如果资源有更改，返回200，返回最新的资源。</p></div><ol start="4"><li><p>重排、重绘？怎么减少重排重绘的开销？</p></li><li><p>网页加载很慢的话，怎么做性能优化？</p></li><li><p>sessionStorage、localStorage、cookie区别？</p></li><li><p>用过 localStorage 吗？如果要实现存储数据的时间不超过24小时怎么做？</p></li><li><p>跨域怎么做？谁来做？</p></li><li><p>响应式布局实现？媒体查询、vh、vw、rem、em？</p></li><li><p>react、vue了解多少？框架底层原理？</p></li><li><p>node了解多少？node里的http？</p></li><li><p>get、post区别？长度限制、安全性等？</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提前批一面 <a href="https://www.nowcoder.com/discuss/399928752820559872?sourceSSR=search" target="_blank" rel="noreferrer">https://www.nowcoder.com/discuss/399928752820559872?sourceSSR=search</a></p></div><ol><li><p>手写instanceof</p></li><li><p>原型链原理</p></li><li><p>http和https区别</p></li><li><p>对称加密和非对称加密</p></li><li><p>跨域</p></li><li><p>TCP、UDP 以及应用场景</p></li><li><p>手写CSS垂直居中</p></li><li><p>BFC</p></li><li><p>盒模型</p></li><li><p>react生命周期</p></li><li><p>react有哪些hooks</p></li><li><p>react router</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提前批一面<a href="https://www.nowcoder.com/discuss/394976882133934080?sourceSSR=search" target="_blank" rel="noreferrer">https://www.nowcoder.com/discuss/394976882133934080?sourceSSR=search</a></p></div><p>水平垂直居中</p><p>position有哪些值</p><p>说一下 BFC</p><p>js 基本数据类型</p><p>instanceof 原理</p><p>说一下ES6新增</p><p>for in 和for of区别</p><p>Object.defineProperty 定义的对象的属性有哪些</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p><p>事件循环</p><p>HTTP 缓存</p><p>HTTP 状态码</p><p>HTTP2.0 新增特性</p><p>Git 常用操作</p><p>webpack loader plugin区别</p><p>说一下知道的plugin</p><p>Vue双向绑定原理 数组是怎么做双向绑定</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>百度提前批 前端 一二三面面经 <a href="https://www.nowcoder.com/discuss/395239030223384576?sourceSSR=search" target="_blank" rel="noreferrer">https://www.nowcoder.com/discuss/395239030223384576?sourceSSR=search</a></p></div><p>一面：</p><p>主要是做了三道题，其他没太问（做太久了后面没时间了）</p><p>二分查找（如果排序是逆序怎么处理）</p><p>实现 instanceof （null、undefined 怎么处理）</p><p>实现水波跳动效果</p><p>二面：</p><p>key 的作用 -- 虚拟 dom 的构建</p><p>防抖节流，简述实现</p><p>简述 cookie</p><p>闭包为啥会性能不好 -- 变量一直被引用，无法回收 --- 垃圾回收机制：标记清楚法、引用计数法</p><p>两个盒子水平垂直居中的方法</p><p>简述暂时性死区</p><p>简述 async await</p><p>promise.all 的返回值，如果有一个报错呢</p><p>webpack 打包出来的内容特别大怎么办</p><p>实习遇到的问题</p><p>实习过程中的收获：技术上、代码规范、逻辑思维</p><p>三面</p><p>扫码登陆原理</p><p>大文件上传(断点上传怎么实现)</p><h2 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h2><h3 id="随机打乱一个数组" tabindex="-1">随机打乱一个数组 <a class="header-anchor" href="#随机打乱一个数组" aria-label="Permalink to &quot;随机打乱一个数组&quot;">​</a></h3><h3 id="字符串-kebab-case-转换成-camelcase" tabindex="-1">字符串 kebab-case 转换成 camelCase <a class="header-anchor" href="#字符串-kebab-case-转换成-camelcase" aria-label="Permalink to &quot;字符串 kebab-case 转换成 camelCase&quot;">​</a></h3><h3 id="手写数组括号匹配" tabindex="-1">手写数组括号匹配 <a class="header-anchor" href="#手写数组括号匹配" aria-label="Permalink to &quot;手写数组括号匹配&quot;">​</a></h3><h3 id="全排列" tabindex="-1">全排列 <a class="header-anchor" href="#全排列" aria-label="Permalink to &quot;全排列&quot;">​</a></h3>`,79),i=[o];function t(c,r,n,d,u,h){return s(),e("div",null,i)}const S=l(a,[["render",t]]);export{b as __pageData,S as default};
