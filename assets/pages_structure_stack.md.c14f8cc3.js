import{_ as s,c as a,o as n,V as l}from"./chunks/framework.3d11d069.js";const A=JSON.parse('{"title":"【化解数据结构】详解栈结构，并实现一个栈结构","description":"关于栈数据结构你了解多少呢？入栈？出栈？如此简单，不如自己手写实现一个栈数据结构吧，那就从这篇文章开始栈的学习之旅吧~","frontmatter":{"title":"【化解数据结构】详解栈结构，并实现一个栈结构","date":"2021-10-29T21:51:14.000Z","id":1635515474,"photos":"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88.png","tags":["数据结构","栈"],"categories":["化解数据结构"],"keywords":"数据结构,栈,小丞同学","description":"关于栈数据结构你了解多少呢？入栈？出栈？如此简单，不如自己手写实现一个栈数据结构吧，那就从这篇文章开始栈的学习之旅吧~"},"headers":[],"relativePath":"pages/structure/stack.md","filePath":"pages/structure/stack.md","lastUpdated":1687671096000}'),p={name:"pages/structure/stack.md"},o=l(`<blockquote><p>📢 大家好，我是小丞同学，一名<strong>大二的前端爱好者</strong></p><p>📢 这篇文章将讲解数据结构中的栈</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <strong>愿你忠于自己，热爱生活</strong></p></blockquote><h2 id="💡-内容抢先看" tabindex="-1">💡 内容抢先看 <a class="header-anchor" href="#💡-内容抢先看" aria-label="Permalink to &quot;💡 内容抢先看&quot;">​</a></h2><ul><li>什么是栈？</li><li>栈结构有哪些方法</li><li>实现一个栈</li><li><code>LeetCode</code> 实战</li></ul><p>📢 <strong>碎碎念</strong></p><blockquote><p>这篇文章将总结学习的第一个数据结构：<strong>栈</strong>。 栈在前端的应用也是非常广泛的，例如：<strong>函数调用堆栈，进制转化，有效括号</strong>这些问题都涉及到栈结构 我们一起来看看吧</p></blockquote><h2 id="一、什么是栈结构" tabindex="-1">一、什么是栈结构？ <a class="header-anchor" href="#一、什么是栈结构" aria-label="Permalink to &quot;一、什么是栈结构？&quot;">​</a></h2><p>栈是一种特殊的线性表，它可以用数组或链表来实现，通常用数组来实现，但是它和数组又很不一样。 <strong>对于数组而言</strong>，我们可以随意的从数组中取出一个元素，也可以在数组的任意位置插入一个元素。 但是<strong>对于栈结构而言</strong>，相对于数组做了一定的限制，它只允许在<strong>栈顶进行取出和插入操作</strong> 因此，栈有着<strong>先进后出</strong>的特点</p><p>如图，可以很形象的描述一个栈结构</p><p>这就像生活中的桶一样，只能从桶口放东西进去，从桶顶取东西出来</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20211029223113404.png" alt="image-20211029223113404" data-fancybox="gallery"></p><p>在生活中还有着很多例子，例如：装羽毛球的球桶，我们每次都只能拿最上面的羽毛球，放到最上面</p><p>因此对于一个栈有栈顶和栈底之分</p><p><strong>栈顶可以形象的理解为桶口</strong></p><p><strong>栈底则可以是桶底</strong></p><p>在 <code>JS</code> 中，熟悉的<strong>执行上下文</strong>也使用<strong>栈结构</strong>来维护的，栈底是<strong>全局作用域（GO）</strong>，当前执行代码的执行上下文依次加入栈中，栈顶的元素永远是<strong>正在执行的上下文对象</strong>。</p><h2 id="二、栈结构有哪些方法呢" tabindex="-1">二、栈结构有哪些方法呢？ <a class="header-anchor" href="#二、栈结构有哪些方法呢" aria-label="Permalink to &quot;二、栈结构有哪些方法呢？&quot;">​</a></h2><p>和一般的数据结构一样，它有着插入，取出的方法，我们把它们叫作：入栈和出栈 为了丰富一下栈中的方法，我们多实现一些，例如，判断栈顶是否为空、返回栈中的元素个数、清空栈、返回栈顶元素</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>push()</code></td><td>添加一个新元素到栈顶</td></tr><tr><td><code>pop()</code></td><td>移除栈顶元素，同时返回被移除的元素</td></tr><tr><td><code>peek()</code></td><td>返回栈顶元素，不改变栈</td></tr><tr><td><code>isEmpty()</code></td><td>判断栈是否为空</td></tr><tr><td><code>clear()</code></td><td>移除栈中所有元素</td></tr><tr><td><code>size()</code></td><td>返回栈中的元素个数</td></tr></tbody></table><p><strong>接下来我们就一一实现它们</strong></p><p>👇 👇 👇</p><h2 id="三、手写实现一个栈结构" tabindex="-1">三、手写实现一个栈结构 <a class="header-anchor" href="#三、手写实现一个栈结构" aria-label="Permalink to &quot;三、手写实现一个栈结构&quot;">​</a></h2><p>在这里我采用数组来实现栈这个数据结构，因为 <code>JS</code> 数组中封装了大量的原生 <code>API</code>，可以通过这些 <code>API</code> 很方便的实现我们的功能</p><h3 id="_1-创建一个-stack-类" tabindex="-1">1. 创建一个 Stack 类 <a class="header-anchor" href="#_1-创建一个-stack-类" aria-label="Permalink to &quot;1. 创建一个 Stack 类&quot;">​</a></h3><p>首先我们先创建一个 <code>class</code> 类，并采用 <code>stackData</code> 数组来存储我们的数据</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Stack</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_2-实现-push-方法" tabindex="-1">2. 实现 push 方法 <a class="header-anchor" href="#_2-实现-push-方法" aria-label="Permalink to &quot;2. 实现 push 方法&quot;">​</a></h3><p>实现<strong>入栈</strong>的方法，这里就是我们采用数组的好处了 根据栈的规则，我们<strong>只能在栈顶添加元素</strong>，也就是在数组的最后一位插入，对应到的就是数组的 <code>push</code> 方法 因此实现栈结构的入栈方法，也就是调用数组的 <code>push</code> 方法</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(element) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">element</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_3-实现-pop-方法" tabindex="-1">3. 实现 pop 方法 <a class="header-anchor" href="#_3-实现-pop-方法" aria-label="Permalink to &quot;3. 实现 pop 方法&quot;">​</a></h3><p>实现出栈的方法，根据后进先出的原则，也就是取出栈顶元素，相当于取出数组的最后一位 因此我们可以采用数组的 <code>pop</code> 方法来实现</p><blockquote><p><code>pop</code> 方法：删除数组的最后一位，并返回删除的值</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">pop</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>实现了入栈和出栈，一个简单的栈结构就已经基本实现了，我们来试试操作它吧</p><p>首先我们需要 <code>new</code> 一个对象示例，然后适当的调用一下方法来演示一下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Stack</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p><strong>动图效果</strong></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%A0%88-push-pop-%E5%8A%A8%E5%9B%BE.gif" alt="栈-push-pop-动图" data-fancybox="gallery"></p><p>可以看到每次都在数组尾部添加元素， <code>pop</code> 时也是弹出数组尾部的元素</p><h3 id="_4-实现-peek-方法" tabindex="-1">4. 实现 peek 方法 <a class="header-anchor" href="#_4-实现-peek-方法" aria-label="Permalink to &quot;4. 实现 peek 方法&quot;">​</a></h3><p><code>peek</code> 是查看栈顶的元素，也就是数组的最后一个元素，同时这个操作不会改变栈噢~<strong>只是查看</strong></p><p>实现的方法也很简单，我们只要返回<strong>数组的最后一位</strong>就可以了</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">peek</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>使用 <code>peek</code> 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Stack</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">peek</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 9</span></span></code></pre></div><h3 id="_5-实现-size-方法" tabindex="-1">5. 实现 size 方法 <a class="header-anchor" href="#_5-实现-size-方法" aria-label="Permalink to &quot;5. 实现 size 方法&quot;">​</a></h3><p><code>size</code> 方法：返回栈中的元素个数，也就是返回数组的长度</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">size</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>调用 <code>size</code> 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Stack</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 2</span></span></code></pre></div><h3 id="_6-实现-isempty-方法" tabindex="-1">6. 实现 isEmpty 方法 <a class="header-anchor" href="#_6-实现-isempty-方法" aria-label="Permalink to &quot;6. 实现 isEmpty 方法&quot;">​</a></h3><p><code>isEmpty</code> 方法：查看当前栈中是否有值，是空返回 <code>true</code></p><p>我们直接判断一下 <code>length</code> 就好了</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">isEmpty</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>使用 <code>isEmpty</code> 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Stack</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isEmpty</span><span style="color:#A6ACCD;">()  </span><span style="color:#676E95;font-style:italic;">// false  不为空</span></span></code></pre></div><h3 id="_7-实现-clear-方法" tabindex="-1">7. 实现 clear 方法 <a class="header-anchor" href="#_7-实现-clear-方法" aria-label="Permalink to &quot;7. 实现 clear 方法&quot;">​</a></h3><p><code>clear</code> 方法：清空栈，也就是重置一下栈</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">clear</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_8-完整的栈结构" tabindex="-1">8. 完整的栈结构 <a class="header-anchor" href="#_8-完整的栈结构" aria-label="Permalink to &quot;8. 完整的栈结构&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Stack</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 入栈</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">element</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 出栈</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pop</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取栈顶</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">peek</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 检查是否为空</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">isEmpty</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 清空栈</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">clear</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 返回元素个数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">size</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">stackData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="四、leetcode-实战" tabindex="-1">四、LeetCode 实战 <a class="header-anchor" href="#四、leetcode-实战" aria-label="Permalink to &quot;四、LeetCode 实战&quot;">​</a></h2><h4 id="_20-有效的括号" tabindex="-1"><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noreferrer"> 20. 有效的括号</a> <a class="header-anchor" href="#_20-有效的括号" aria-label="Permalink to &quot;[ 20. 有效的括号](https://leetcode-cn.com/problems/valid-parentheses/)&quot;">​</a></h4><blockquote><p>给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。</p></blockquote><p>这是一道很经典的题目，我们可以利用栈后进先出的特点来解题，因为我们需要左右括号匹配</p><ul><li>当我们遇到左括号时，就把这个括号入栈</li><li>遇到右括号时，我们需要判断一下当前的栈顶是不是和这个括号匹配</li><li>如果匹配则说明符合，继续遍历，不匹配则直接返回 <code>false</code></li><li>同时还有一种特殊情况，当输入的字符串 <code>s</code> 的长度是<strong>奇数</strong>时，不可能满足题意</li></ul><p>因此我们可以编写代码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> isValid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 新建一个栈</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stack</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 扫描字符串，遇到左括号入栈，遇到和栈顶括号类型匹配的右括号就出栈，类型不匹配直接 false</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果为奇数直接弹出false</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 遇到左括号push</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stack</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">                (</span><span style="color:#A6ACCD;">t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">||</span></span>
<span class="line"><span style="color:#F07178;">                (</span><span style="color:#A6ACCD;">t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">||</span></span>
<span class="line"><span style="color:#F07178;">                (</span><span style="color:#A6ACCD;">t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="📖-总结" tabindex="-1">📖 总结 <a class="header-anchor" href="#📖-总结" aria-label="Permalink to &quot;📖 总结&quot;">​</a></h2><ol><li>利用数组封装了一个栈结构</li><li>了解了栈结构的基本方法</li><li>对数据结构有了进一步的了解</li></ol><hr><p>本文关于栈的内容就到这里结束了，相信你一定能从中学到很多东西。下一篇文章将带你探索<strong>队列</strong>的奥秘</p><p>欢迎大家关注本专栏，持续关注最新文章~</p><blockquote><p>最后，可能在很多地方讲诉的不够清晰，请见谅</p><p>💌 如果文章有什么错误的地方，或者有什么疑问，欢迎留言，也欢迎私信交流</p></blockquote>`,73),e=[o];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
