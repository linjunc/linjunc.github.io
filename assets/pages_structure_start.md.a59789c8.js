import{_ as s,c as a,o,U as n}from"./chunks/framework.4d5e0f31.js";const C=JSON.parse('{"title":"【化解数据结构】从这里开启数据结构和算法","description":"在数据结构中，时间复杂度和空间复杂度是优化算法性能的关键，因此在学习数据结构和算法时一定要学会如何去计算时间空间复杂度！","frontmatter":{"title":"【化解数据结构】从这里开启数据结构和算法","date":"2021-10-29T14:43:37.000Z","id":1635489817,"photos":"https://ljcimg.oss-cn-beijing.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%90%AF%E8%88%AA.png","tags":["数据结构","时间空间复杂度"],"categories":["化解数据结构"],"keywords":"小丞同学,数据结构,时间空间复杂度计算,为什么学习算法？","description":"在数据结构中，时间复杂度和空间复杂度是优化算法性能的关键，因此在学习数据结构和算法时一定要学会如何去计算时间空间复杂度！"},"headers":[],"relativePath":"pages/structure/start.md","lastUpdated":1686714236000}'),l={name:"pages/structure/start.md"},e=n(`<blockquote><p>📢 大家好，我是小丞同学，一名<strong>大二的前端爱好者</strong></p><p>📢 这篇文章是数据结构与算法专栏的第一篇博文</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 <strong>愿你忠于自己，热爱生活</strong></p></blockquote><h2 id="💡-知识点抢先看" tabindex="-1">💡 知识点抢先看 <a class="header-anchor" href="#💡-知识点抢先看" aria-label="Permalink to &quot;💡 知识点抢先看&quot;">​</a></h2><ul><li>算法基础</li><li>计算时间复杂度</li><li>计算空间复杂度</li><li><strong>数据结构和算法的学习指南</strong></li></ul><blockquote><p>❗❗❗ <strong>文末有惊喜噢~</strong></p></blockquote><h2 id="专栏简介" tabindex="-1">专栏简介 <a class="header-anchor" href="#专栏简介" aria-label="Permalink to &quot;专栏简介&quot;">​</a></h2><blockquote><p>按照惯例，每个专栏的第一篇文章都会简单的介绍一下这个专栏的内容，以及未来的更文计划</p></blockquote><p>本专栏 【化解数据结构】，将在这里总结自己学习数据结构和算法的学习笔记，从这篇算法入门开始，未来更文将涉及栈、队列、链表、堆、树、图...等数据结构，以及经典排序算法，算法设计思想等进阶算法...，同时将会结合 <code>LeetCode</code> 题目对每篇文章进行巩固和提升，欢迎大家关注本专栏或添加作者本文联系方式，一起努力，一起刷题，一起进步 🏆</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210929202048085.png" alt="image-20210929202048085" data-fancybox="gallery"></p><p>（图片来源于慕课网截图）</p><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在正式写这个之前，先来讲讲为什么要学数据结构和算法？</p><ul><li>为了计算出最优解</li></ul><p>这是我的答案，当我打开 <code>LeetCode</code> 第一题两数之和的提交记录时，我发现自己半年前的代码，耗时 <code>240ms</code>，内存占用 <code>40多mb</code> 时，我感受到了它的魅力</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20211029151803918.png" alt="image-20211029151803918" data-fancybox="gallery"></p><p>在最新的代码中，我采用了 <code>map</code> 的容器，通过 <code>has</code> 方法替代了先前采用的 <code>indexof</code> 方法，从查到的资料来看，<code>map</code> 的查找的时间复杂度为 <code>O(1)</code> ，<code>indexOf</code> 为 <code>O(n)</code> ，在 <code>map</code> 的底层实现中采用了哈希表的数据结构，极大的优化了查找的复杂度</p><p>接下来我们来看看如何计算时间、空间复杂度！</p><h2 id="一-大-o-表示法" tabindex="-1">一. 大 O 表示法 <a class="header-anchor" href="#一-大-o-表示法" aria-label="Permalink to &quot;一. 大 O 表示法&quot;">​</a></h2><p>关于复杂度的计算，我们采用的是 <strong>大 O 表示法</strong> ，它用来描述算法性能和复杂程度</p><p>常见的表示</p><table><thead><tr><th>符号大O标记法</th><th>名称</th></tr></thead><tbody><tr><td><strong>O(1)</strong></td><td>常数</td></tr><tr><td><strong>O(log N)</strong></td><td>对数</td></tr><tr><td><strong>O(N)</strong></td><td>线性</td></tr><tr><td><strong>O(N log N)</strong></td><td>对数多项式</td></tr><tr><td><strong>O(N^2)</strong></td><td>二次</td></tr><tr><td><strong>O(2^N)</strong></td><td>指数</td></tr><tr><td><strong>O(N!)</strong></td><td>阶乘</td></tr></tbody></table><p>大 O 表示法一般考虑的是 <code>CPU</code> 占用时间，它可以粗略的了解代码运行的时间效率</p><p>例如</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">num</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>我们调用这个函数一次，执行时间是 <code>t</code> ，我们再调用一次，执行时间还是 <code>t</code>，和传入的参数无关， <code>test</code> 函数的性能都一样，因此它的复杂度为 <code>O(1)</code></p><p>当循环 <code>n</code> 次时，就是 <code>O(n)</code></p><h2 id="二-时间复杂度" tabindex="-1">二. 时间复杂度 <a class="header-anchor" href="#二-时间复杂度" aria-label="Permalink to &quot;二. 时间复杂度&quot;">​</a></h2><p>大 <code>O</code> 表示法表明的是该段代码执行时间随数据规模增大的变化趋势，它的特点是</p><ul><li>只关注量级最大的时间复杂度</li></ul><p>常见的时间复杂度量级 <code>O(1) &lt; O(logn) &lt; O(n) &lt; O(n^2)</code></p><p>对于 <code>O(2)、O(3)</code> 这些，我们都叫做 <code>O(1)</code> 常数级</p><p>例如：</p><h3 id="_1-o-1" tabindex="-1">1. O(1) <a class="header-anchor" href="#_1-o-1" aria-label="Permalink to &quot;1. O(1)&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 每次执行代码只执行一次 O(1)</span></span>
<span class="line"></span></code></pre></div><p>这段代码每次只执行一次，因此为 <code>O(1)</code></p><h3 id="_2-o-n" tabindex="-1">2. O(n) <a class="header-anchor" href="#_2-o-n" aria-label="Permalink to &quot;2. O(n)&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>再上面这段代码中，我们每次都需要执行 <code>n</code> 次的 <code>log</code> ，因此我们可以把它看作 <code>O(n)</code></p><p>同样的我们再来看一个</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> navigator</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这种代码我们经常写，前面是我们刚刚计算的 <code>O(1)</code>，后面是 <code>O(n)</code> ，它们并行排列，时间复杂度相加，取最大的那个</p><ul><li>因此它的时间复杂度同样是 <code>O(n)</code></li></ul><h3 id="_3-o-log-n" tabindex="-1">3. O(log(n)) <a class="header-anchor" href="#_3-o-log-n" aria-label="Permalink to &quot;3. O(log(n))&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> n) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>对于 <code>log(n)</code> 的情况，在个时间复杂度是很好的，当然 <code>O(1)</code> 是最好的，但是在解题的时候，如果能优化到 <code>log(n)</code> 也是很不错的了</p><p>那它是如何计算的呢？</p><p>我们可以看到，这里采用了 变量<code>i</code>来控制循环的终止，每次循环体中，都需要 <code>2 * i</code> 的操作</p><p>因此对于时间复杂度的计算 <code>2^t = n</code> 解得 <code>t = log(n)</code></p><h3 id="_4-o-n-2" tabindex="-1">4. O(n^2) <a class="header-anchor" href="#_4-o-n-2" aria-label="Permalink to &quot;4. O(n^2)&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>对于这种嵌套排列，时间复杂度是 <code>n^2</code> ，外面一层 <code>n</code> ，里面一层 <code>n</code> 乘一下就是 <code>n^2</code>，冒泡排序的时间复杂度就是 <code>O(n^2)</code></p><p>关于时间复杂度就介绍这么多，其他的思路都差不多</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20211029161002646.png" alt="image-20211029161002646" data-fancybox="gallery"></p><h2 id="三、空间复杂度" tabindex="-1">三、空间复杂度 <a class="header-anchor" href="#三、空间复杂度" aria-label="Permalink to &quot;三、空间复杂度&quot;">​</a></h2><p>空间复杂度表示的是：存储空间随数据规模的增长趋势，在 <code>LeetCode</code> 中最直接的反应就是<strong>内存消耗</strong></p><p>例如</p><h3 id="_1-o-1-1" tabindex="-1">1. O(1) <a class="header-anchor" href="#_1-o-1-1" aria-label="Permalink to &quot;1. O(1)&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在这里我们申请了单个变量的内存空间，为 <code>O(1)</code></p><h3 id="_2-o-n-1" tabindex="-1">2. O(n) <a class="header-anchor" href="#_2-o-n-1" aria-label="Permalink to &quot;2. O(n)&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>像这样的一个数组，并给它填满值，<code>n</code> 越大，它需要分配的空间就越多，它的空间复杂度就是 <code>O(n)</code></p><h3 id="_3-o-n-2" tabindex="-1">3. O(n^2) <a class="header-anchor" href="#_3-o-n-2" aria-label="Permalink to &quot;3. O(n^2)&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">int arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [][]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 遍历赋值</span></span>
<span class="line"></span></code></pre></div><p>声明一个二维数组，填满值，它的空间复杂度就是 <code>O(n^2)</code> ，你可以理解为一个矩阵，<code>n*n</code> 为 <code>n^2</code></p><h2 id="📌-总结" tabindex="-1">📌 总结 <a class="header-anchor" href="#📌-总结" aria-label="Permalink to &quot;📌 总结&quot;">​</a></h2><ol><li>复杂度计算按最高阶来计算</li><li>时间、空间复杂度描述的都是随数据规模的变化趋势</li><li>时间复杂度的重点在于循环嵌套</li><li>空间复杂度关注于内存</li></ol><h2 id="🐣-博主有话说" tabindex="-1">🐣 博主有话说 <a class="header-anchor" href="#🐣-博主有话说" aria-label="Permalink to &quot;🐣 博主有话说&quot;">​</a></h2><p>关于如何学习数据结构和算法，以及前端仔为什么要学算法？我想说</p><h3 id="_1-如何学习数据结构和算法" tabindex="-1">1. 如何学习数据结构和算法？ <a class="header-anchor" href="#_1-如何学习数据结构和算法" aria-label="Permalink to &quot;1. 如何学习数据结构和算法？&quot;">​</a></h3><p>首先，我个人觉得学习任何东西，都需要一个适合自己的方法，其次是需要懂得如何去<strong>获取学习资源</strong>，如何找到<strong>优质的学习资料</strong>，这些都是很重要的，这不仅仅是对于数据结构和算法而言，学习什么都是如此。</p><p>再谈谈如何学习数据结构和算法：（拿我自己来说），其实这篇文章的内容没有什么特别难的东西，可以说基本看一眼就会了，那我为什么还要写它呢，<strong>习惯和想法</strong>。</p><p>对我自己，我偏向于看视频来初次学习，这样可以跟着老师的思路，很快的找到门路，也能很好的帮助我引导我学下去。在看视频的同时，<strong>一定要动手动手动手</strong>！有题目的时候可以暂停下来，自己先<strong>理一遍思路</strong>，动手敲一下，再看老师是如何解的。这样更加能提升自己的代码能力。同时对于同一道题目，我喜欢<strong>尝试多种解法</strong>，以<strong>最优雅</strong>的 <code>JS</code> 代码来解题，一直是我在算题中的小目标。</p><p>在学习完之后，我会总结自己的学习笔记，例如之前的 <code>react</code> <a href="https://juejin.cn/column/6996319003169800205" target="_blank" rel="noreferrer">学习笔记</a>是在每天学习之后，晚上整理的，从每个知识点到 <code>Demo</code> 中的每个功能的实现，都有记录，这也算是对自己学习的复盘吧～再到 <a href="https://juejin.cn/column/7013008639174639652" target="_blank" rel="noreferrer">从零实现一个任务管理系统</a> 的专栏了，这个是在做完整个项目之后，<strong>自己又重头再梳理一遍整个项目的逻辑过程</strong>，以及每个 <code>hook</code> 的功能实现。在我的观念中，只有把总结写好了，才算学会了，不然都是会忘记的。因此，我觉得<strong>笔记十分重要</strong>！</p><p><strong>总结一下就是：学的时候多敲代码，学完之后总结笔记</strong></p><h3 id="_2-说说为什么要学数据结构和算法吧" tabindex="-1">2. 说说为什么要学数据结构和算法吧？ <a class="header-anchor" href="#_2-说说为什么要学数据结构和算法吧" aria-label="Permalink to &quot;2. 说说为什么要学数据结构和算法吧？&quot;">​</a></h3><ol><li><p>第一点：如文章开头所言，我想要写出最优的代码，这点是个人观念的原因，在学习了 <code>ES6+</code> 语法之后，以前很多的代码都显得冗余复杂了，<code>map</code> 和 <code>set</code> 就是最好的例子</p></li><li><p>第二点：提高代码运行效率，这一点不仅仅体现在刷算法题上，更体现在实际场景中，我们可能会因为我们的算法问题导致了时间复杂度过高，导致发送无用请求，导致前台页面等待时间过长等问题，这些都是我们前端需要懂得优化的</p></li><li><p>第三点：为了面试，这就很真实了，在网上看了很多的面经，算法都是必要的一环，所以学习好数据结构和算法也能为自己以后面试提前做好准备</p></li></ol><p><strong>一些小的建议</strong>：不要盲目的刷题，可以有<strong>针对性</strong>的，按照某一个<strong>类型</strong>的题来刷，比如这段时间我就刷关于树这个数据结构的题，下一段时间我刷堆的题，这样可以保证我们的刷题质量，同时把大量的时间花在刷算法题上是很不可取的噢～每天抽一点时间写 2，3 道这样慢慢积累，循循渐进～</p><h3 id="_3-学习资料分享" tabindex="-1">3. 学习资料分享 <a class="header-anchor" href="#_3-学习资料分享" aria-label="Permalink to &quot;3. 学习资料分享&quot;">​</a></h3><p>书籍：《JavaScript 数据结构和算法》</p><p><a href="https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md" target="_blank" rel="noreferrer">Github</a>仓库：<a href="https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md" target="_blank" rel="noreferrer">JavaScript 算法与数据结构</a></p><p>视频推荐：B站 <code>coderwhy</code> 老师的<a href="https://www.bilibili.com/video/BV1a5411t7vZ?p=22" target="_blank" rel="noreferrer">视频</a></p><p>刷题地址：<code>acwing</code>，<code>leetcode</code></p><blockquote><p>以上资源没有广告费，纯好感！！书籍没有的话可以联系我噢~</p></blockquote><hr><blockquote><p>💌 最后，可能在很多地方讲诉的不够清晰，请见谅</p><p>💌 如果文章有什么错误的地方，或者有什么疑问，欢迎留言，也欢迎私信交流</p></blockquote>`,85),p=[e];function t(c,r,i,d,y,D){return o(),a("div",null,p)}const h=s(l,[["render",t]]);export{C as __pageData,h as default};
