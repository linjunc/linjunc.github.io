import{_ as s,c as n,o as a,V as o}from"./chunks/framework.3d11d069.js";const d=JSON.parse('{"title":"useContext 源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"pages/react/hard/hooks/usecontext.md","filePath":"pages/react/hard/hooks/usecontext.md","lastUpdated":1688304706000}'),l={name:"pages/react/hard/hooks/usecontext.md"},e=o(`<h1 id="usecontext-源码解析" tabindex="-1">useContext 源码解析 <a class="header-anchor" href="#usecontext-源码解析" aria-label="Permalink to &quot;useContext 源码解析&quot;">​</a></h1><h2 id="入口" tabindex="-1">入口 <a class="header-anchor" href="#入口" aria-label="Permalink to &quot;入口&quot;">​</a></h2><p>我们看到 <code>HooksDispatcherOnUpdate</code> 和 <code>HooksDispatcherOnMount</code> 里，关于 <code>useContext</code> 的定义，都是 <code>readContext</code> 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> HooksDispatcherOnMount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dispatcher</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">useContext</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> readContext</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>也就是说，无论是更新还是挂载，<code>useContext</code> 最终执行的都是 <code>readContext</code> 方法，下面来看看这个方法都做了什么吧</p><h2 id="readcontext" tabindex="-1">readContext <a class="header-anchor" href="#readcontext" aria-label="Permalink to &quot;readContext&quot;">​</a></h2><p>首先我们需要知道 <code>useContext</code> 的作用就是返回 context 当前的值，因此 <code>readContext</code> 的主要作用就是绑定依赖，以及返回当前值</p><p>FC 通过 <code>readContext</code>，将函数组件的 <code>dependencies</code> 和当前 <code>context</code> 建立起关联，context 改变，将当前函数组件设置高优先级，促使其渲染。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">readContext</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactContext</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 适配多平台,这两个的值是一样的</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isPrimaryRenderer</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_currentValue</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_currentValue2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">lastFullyObservedContext</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Nothing to do. We already observe everything in this context.</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 新建 context 链表的节点，节点上存储着用户传递的 context 对象，和 value</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">contextItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      context</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ReactContext</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">mixed</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">),</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">memoizedValue</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">value</span><span style="color:#F07178;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">next</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#F07178;">,</span></span>
<span class="line"><span style="color:#F07178;">    };</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// fiber 和 context 建立连接</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">lastContextDependency</span><span style="color:#F07178;"> === </span><span style="color:#A6ACCD;font-style:italic;">null</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 这是组件的第一个依赖项，创建一个新的 context 依赖列表</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">lastContextDependency</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">contextItem</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">      currentlyRenderingFiber.</span><span style="color:#A6ACCD;">dependencies</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        lanes</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NoLanes</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        firstContext</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">contextItem</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">      if </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">enableLazyContextPropagation</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">currentlyRenderingFiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">flags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NeedsPropagation</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 添加新的依赖项</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">lastContextDependency</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastContextDependency</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">contextItem</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  }</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">}</span></span></code></pre></div><ol><li>首先会创建一个 <code>contextItem</code> ，上述说到过 fiber 上会存在多个 <code>dependencies</code> ，它们以链表的形式联系到一起</li><li>如果不存在最后一个 <code>contextDependency</code> ，那证明 <code>contextDependencies</code> 为空 ，那么会创建第一个 <code>dependency</code> ，</li><li>如果存在最后一个 <code>dependency</code> ，那么 <code>contextItem</code> 会以链表形式保存，并变成最后一个 <code>lastContextDependency</code> 。</li><li>最后返回 context 对象上取出来的 <code>currentValue</code></li></ol><div class="tip custom-block"><p class="custom-block-title">重点</p><p>主要的工作就是将 Fiber 和 context 建立连接，如果已经存在 <code>dependencies</code> 那就直接以链表的形式连接到 next 指针上，不然就初始化为第一个 <code>dependencies</code></p></div><p><code>useContext</code> 需要结合 <code>createContext</code> 使用才有意义，通过 <code>createContext</code> 来创建 <code>context</code>，<code>useContext</code> 来从顶层获取到 <code>context</code>，实现全局状态管理的一种方式</p><p>那么 <code>createContext</code> 的实现也很重要，下面来看看</p><h2 id="createcontext-实现" tabindex="-1">createContext 实现 <a class="header-anchor" href="#createcontext-实现" aria-label="Permalink to &quot;createContext 实现&quot;">​</a></h2><p>这个方法的实现在 <code>ReactContext.js</code> 中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createContext</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">defaultValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactContext</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ReactContext</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ReactContext中的$$typeof是作为createElement中的属性type中的对象进行存储的</span></span>
<span class="line"><span style="color:#F07178;">    $$typeof</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">REACT_CONTEXT_TYPE</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    _currentValue</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defaultValue</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    _currentValue2</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defaultValue</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    _threadCount</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 追踪 context 的并发渲染器数量</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// These are circular</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">Provider</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">null</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">, </span><span style="color:#676E95;font-style:italic;">// 提供组件</span></span>
<span class="line"><span style="color:#F07178;">    Consumer: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">null</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">,</span></span>
<span class="line"><span style="color:#F07178;">    _defaultValue: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">null</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">,</span></span>
<span class="line"><span style="color:#F07178;">    _globalName: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">null</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">,</span></span>
<span class="line"><span style="color:#F07178;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 给context对象添加 Provider 属性，并且 Provider 中的_context指向的是 context 对象</span></span>
<span class="line"><span style="color:#F07178;">  context.Provider = </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    $$typeof</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">REACT_PROVIDER_TYPE</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    _context</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 为了保证Consumer拿到最新的值，直接让Consumer=React.Context，</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Consumer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在 <code>createContext</code> 中，构建一个 <code>context</code> 对象，将传递进来的 <code>defaultValue</code> 赋值给 <code>context</code> 对象的 <code>_currentValue</code> 和 <code>_currentValue2</code> 属性， 并在 <code>context</code> 对象上定义了一个用来追踪 <code>context</code> 并发渲染器数量的 <code>_threadCount</code> 属性， 以及一个为 Consumer 组件提供 value 的 Provider 组件，和一个用于消费 context 的 Consumer组件。</p><blockquote><p>_currentValue 和_currentValue2 两个属性是为了适配不同的平台，如 Web端、移动端。这两个属性在 context 对象初始化时都会赋值为传入的 defaultValue 。 在 React 更新的过程中，会一直有一个叫做 valueCursor 的栈，这个栈可以帮助记录当前的 context，每次更新组件的时候，_currentValue 和_currentValue2 都会被赋值为最新的value</p></blockquote><p>如上可以很容易的看清楚 context 对象的本质，三个属性重要的属性</p><ul><li><code>Provider</code> 本质上是一个 element 对象，REACT_PROVIDER_TYPE 类型</li><li><code>Consumer</code> 本质上也是一个 element 对象，REACT_CONTEXT_TYPE 类型</li><li><code>_currentValue</code> 这个用来保存传递给 Provider 的 value</li></ul><p><code>context</code> 对象构建好之后，就将当前的 context 对象分别挂载到 Provider 组件和 Consumer 组件上。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>createContext</code> 就是创建了一个包含 <code>Provider</code> 和 <code>Consumer</code> 的对象，<code>useContext</code> 就是建立 context 和 Fiber 的连接，然后返回 value</p><p>以上就是 <code>useContext</code> 的实现，讲的很简单，原因是这一块涉及到的东西太多了，今晚好困（2022.8.14 23.40 星期天），不想写了，草草了事</p><p>关于 Context 的实现原理，<strong>估计后面还会出一篇文单独讲吧</strong>，这篇算个小铺垫吧，其实没写啥</p>`,25),p=[e];function t(c,r,F,y,D,i){return a(),n("div",null,p)}const A=s(l,[["render",t]]);export{d as __pageData,A as default};
