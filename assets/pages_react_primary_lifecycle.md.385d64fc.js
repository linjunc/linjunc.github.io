import{_ as e,c as o,o as a,V as t}from"./chunks/framework.3d11d069.js";const D=JSON.parse('{"title":"React 入门学习（三） -- 组件的生命周期","description":"在 React 中为我们提供了一些生命周期钩子函数，让我们能在 React 执行的重要阶段，在钩子函数中做一些事情。","frontmatter":{"title":"React 入门学习（三） -- 组件的生命周期","date":"2021-08-22T16:11:56.000Z","id":1635581516,"tags":["react","生命周期"],"categories":["React入门学习"],"keywords":"react,组件的生命周期,小丞同学","description":"在 React 中为我们提供了一些生命周期钩子函数，让我们能在 React 执行的重要阶段，在钩子函数中做一些事情。"},"headers":[],"relativePath":"pages/react/primary/lifecycle.md","filePath":"pages/react/primary/lifecycle.md","lastUpdated":1687533080000}'),s={name:"pages/react/primary/lifecycle.md"},n=t(`<p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-study-lifecycle.png" alt="react-study-lifecycle" data-fancybox="gallery"></p><blockquote><p>📢 大家好，我是小丞同学，这一篇是关于 React 的学习笔记，关于组件的生命周期</p><p>📢 非常感谢你的阅读，不对的地方欢迎指正 🙏</p><p>📢 愿你生活明朗，万物可爱</p></blockquote><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在 React 中为我们提供了一些生命周期钩子函数，让我们能在 React 执行的重要阶段，在钩子函数中做一些事情。那么在 React 的生命周期中，有哪些钩子函数呢，我们来总结一下</p><h2 id="react-生命周期" tabindex="-1">React 生命周期 <a class="header-anchor" href="#react-生命周期" aria-label="Permalink to &quot;React 生命周期&quot;">​</a></h2><p>React 生命周期主要包括三个阶段：初始化阶段，更新阶段，销毁阶段</p><h3 id="初始化阶段" tabindex="-1">初始化阶段 <a class="header-anchor" href="#初始化阶段" aria-label="Permalink to &quot;初始化阶段&quot;">​</a></h3><h4 id="_1-constructor-执行" tabindex="-1">1. constructor 执行 <a class="header-anchor" href="#_1-constructor-执行" aria-label="Permalink to &quot;1. constructor 执行&quot;">​</a></h4><p><code>constructor</code> 在组件初始化的时候只会执行一次</p><p>通常它用于做这两件事</p><ol><li>初始化函数内部 <code>state</code></li><li>绑定函数</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">constructor</span><span style="color:#A6ACCD;">(props) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">进入构造器</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>现在我们通常不会使用 <code>constructor</code> 属性，而是改用类加箭头函数的方法，来替代 <code>constructor</code></p><p>例如，我们可以这样初始化 <code>state</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h4 id="_2-static-getderivedstatefromprops-执行-新钩子" tabindex="-1">2. static getDerivedStateFromProps 执行 （新钩子） <a class="header-anchor" href="#_2-static-getderivedstatefromprops-执行-新钩子" aria-label="Permalink to &quot;2. static getDerivedStateFromProps 执行 （新钩子）&quot;">​</a></h4><p>这个是 React 新版本中新增的2个钩子之一，据说很少用。</p><p><code>getDerivedStateFromProps</code> 在初始化和更新中都会被调用，并且在 <code>render</code> 方法之前调用，它返回一个对象用来更新 <code>state</code></p><p><code>getDerivedStateFromProps</code> 是类上直接绑定的静态（<code>static</code>）方法，它接收两个参数 <code>props</code> 和 <code>state</code></p><p><code>props</code> 是即将要替代 <code>state</code> 的值，而 <code>state</code> 是当前未替代前的值</p><blockquote><p>注意：<code>state</code> 的值在任何时候都取决于传入的 <code>props</code> ，不会再改变</p></blockquote><p>如下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">static </span><span style="color:#82AAFF;">getDerivedStateFromProps</span><span style="color:#A6ACCD;">(props) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">props</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Count</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">count</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">109</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;,</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span></code></pre></div><p><code>count</code> 的值不会改变，一直是 109</p><h4 id="_2-componentwillmount-执行-即将废弃" tabindex="-1">2. componentWillMount 执行（即将废弃） <a class="header-anchor" href="#_2-componentwillmount-执行-即将废弃" aria-label="Permalink to &quot;2. componentWillMount 执行（即将废弃）&quot;">​</a></h4><blockquote><p>如果存在 <code>getDerivedStateFromProps</code> 和 <code>getSnapshotBeforeUpdate</code> 就不会执行生命周期<code>componentWillMount</code>。</p></blockquote><p>该方法只在挂载的时候调用一次，表示组件将要被挂载，并且在 <code>render</code> 方法之前调用。</p><p>这个方法在 React 18版本中将要被废弃，官方解释是在 React 异步机制下，如果滥用这个钩子可能会有 Bug</p><h4 id="_3-render-执行" tabindex="-1">3. render 执行 <a class="header-anchor" href="#_3-render-执行" aria-label="Permalink to &quot;3. render 执行&quot;">​</a></h4><p><code>render()</code> 方法是组件中必须实现的方法，用于渲染 DOM ，但是它不会真正的操作 DOM，它的作用是把需要的东西返回出去。</p><p>实现渲染 DOM 操作的是 <code>ReactDOM.render()</code></p><blockquote><p>注意：避免在 <code>render</code> 中使用 <code>setState</code> ，否则会死循环</p></blockquote><h4 id="_4-componentdidmount-执行" tabindex="-1">4. componentDidMount 执行 <a class="header-anchor" href="#_4-componentdidmount-执行" aria-label="Permalink to &quot;4. componentDidMount 执行&quot;">​</a></h4><p><code>componentDidMount</code> 的执行意味着初始化挂载操作已经基本完成，它主要用于组件挂载完成后做某些操作</p><p>这个挂载完成指的是：组件插入 DOM tree</p><h4 id="初始化阶段总结" tabindex="-1">初始化阶段总结 <a class="header-anchor" href="#初始化阶段总结" aria-label="Permalink to &quot;初始化阶段总结&quot;">​</a></h4><p>执行顺序 <code>constructor</code> -&gt; <code>getDerivedStateFromProps</code> 或者 <code>componentWillMount</code> -&gt; <code>render</code> -&gt; <code>componentDidMount</code></p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210821102153009.png" alt="image-20210821102153009" data-fancybox="gallery"></p><h3 id="更新阶段" tabindex="-1">更新阶段 <a class="header-anchor" href="#更新阶段" aria-label="Permalink to &quot;更新阶段&quot;">​</a></h3><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210821102622645.png" alt="image-20210821102622645" data-fancybox="gallery"></p><p>这里记录新生命周期的流程</p><h4 id="_1-getderivedstatefromprops-执行" tabindex="-1">1. getDerivedStateFromProps 执行 <a class="header-anchor" href="#_1-getderivedstatefromprops-执行" aria-label="Permalink to &quot;1. getDerivedStateFromProps 执行&quot;">​</a></h4><p>执行生命周期<code>getDerivedStateFromProps</code>， 返回的值用于合并 <code>state</code>，生成新的<code>state</code>。</p><h4 id="_2-shouldcomponentupdat-执行" tabindex="-1">2. shouldComponentUpdat 执行 <a class="header-anchor" href="#_2-shouldcomponentupdat-执行" aria-label="Permalink to &quot;2. shouldComponentUpdat 执行&quot;">​</a></h4><p><code>shouldComponentUpdate()</code> 在组件更新之前调用，可以通过返回值来控制组件是否更新，允许更新返回 <code>true</code> ，反之不更新</p><h4 id="_3-render-执行-1" tabindex="-1">3. render 执行 <a class="header-anchor" href="#_3-render-执行-1" aria-label="Permalink to &quot;3. render 执行&quot;">​</a></h4><p>在控制是否更新的函数中，如果返回 <code>true</code> 才会执行 <code>render</code> ,得到最新的 <code>React element</code></p><h4 id="_4-getsnapshotbeforeupdate-执行" tabindex="-1">4. getSnapshotBeforeUpdate 执行 <a class="header-anchor" href="#_4-getsnapshotbeforeupdate-执行" aria-label="Permalink to &quot;4. getSnapshotBeforeUpdate 执行&quot;">​</a></h4><p>在最近一次的渲染输出之前被提交之前调用，也就是即将挂载时调用</p><p>相当于淘宝购物的快照，会保留下单前的商品内容，在 React 中就相当于是 即将更新前的状态</p><blockquote><p>它可以使组件在 DOM 真正更新之前捕获一些信息（例如滚动位置），此生命周期返回的任何值都会作为参数传递给 <code>componentDidUpdate()</code>。如不需要传递任何值，那么请返回 null</p></blockquote><h4 id="_5-componentdidupdate-执行" tabindex="-1">5. componentDidUpdate 执行 <a class="header-anchor" href="#_5-componentdidupdate-执行" aria-label="Permalink to &quot;5. componentDidUpdate 执行&quot;">​</a></h4><p>组件在更新完毕后会立即被调用，首次渲染不会调用</p><hr><p>到此更新阶段就结束了，在 React 旧版本中有两个与更新有关的钩子函数 <code>componentWillReceiveProps</code> 和 <code>componentWillUpdate</code> 都即将废弃</p><p><code>componentWillReceiveProps</code> 我不太懂</p><p><code>componentWillUpdate</code> 在 <code>render</code> 之前执行，表示组件将要更新</p><h3 id="销毁阶段" tabindex="-1">销毁阶段 <a class="header-anchor" href="#销毁阶段" aria-label="Permalink to &quot;销毁阶段&quot;">​</a></h3><h4 id="componentwillunmount-执行" tabindex="-1">componentWillUnmount 执行 <a class="header-anchor" href="#componentwillunmount-执行" aria-label="Permalink to &quot;componentWillUnmount  执行&quot;">​</a></h4><p>在组件即将被卸载或销毁时进行调用。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><strong>初始化</strong></p><ul><li>constructor()</li><li>static getDerivedStateFromProps()</li><li>render()</li><li>componentDidMount()</li></ul><p><strong>更新</strong></p><ul><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate()</li><li>componentDidUpdate()</li></ul><p><strong>销毁</strong></p><ul><li>componentWillUnmount()</li></ul><hr><blockquote><p>初学 React ，对生命周期还没有深入的理解，只能大概知道在什么时候触发哪个钩子，希望各位大佬多多指教，有什么建议可以提一提 🙏</p></blockquote>`,69),p=[n];function c(l,r,d,i,u,h){return a(),o("div",null,p)}const y=e(s,[["render",c]]);export{D as __pageData,y as default};
