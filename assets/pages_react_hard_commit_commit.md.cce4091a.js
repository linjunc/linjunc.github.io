import{_ as s,c as n,o as a,V as o}from"./chunks/framework.3d11d069.js";const C=JSON.parse('{"title":"commit 阶段流程概览","description":"","frontmatter":{},"headers":[],"relativePath":"pages/react/hard/commit/commit.md","filePath":"pages/react/hard/commit/commit.md","lastUpdated":1690466832000}'),l={name:"pages/react/hard/commit/commit.md"},p=o(`<h1 id="commit-阶段流程概览" tabindex="-1">commit 阶段流程概览 <a class="header-anchor" href="#commit-阶段流程概览" aria-label="Permalink to &quot;commit 阶段流程概览&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>随着 <code>render</code> 阶段的完成，也意味着在内存中<strong>构建 <code>workInProgress Fiber</code> 树</strong>的所有工作都已经完成，这其中包括了对 Fiber 节点的 <code>update</code>、<code>diff</code>、<code>flags 标记</code>、<code>subtreeFlags</code>（effectList） 的收集等操作<br>我们知道，在 <code>render</code> 阶段，会将需要更新的节点<strong>标记上</strong> <code>flags</code> （effectTag），在 <code>completeWork</code> 阶段会<strong>形成</strong> <code>effectList</code> 链表，<strong>连接所有需要被更新的节点</strong>。</p><p>为了将这些需要更新的节点应用到真实 DOM 上却不需要<strong>遍历整棵树</strong>，在 <code>commit</code> 阶段，会通过<strong>遍历这条 <code>EffectList</code> 链表</strong>，执行对应的操作，来完成对真实 DOM 的更新，这也叫做 <code>mutation</code>，即 <strong>DOM 节点的增删改操作</strong>。</p><blockquote><p>在新版本中不再需要 effectList 链表了，而是通过 rootFiber 自下而上调和的方式处理这些标志，执行对应的操作，来完成对真实 DOM 的更新</p></blockquote><p>接下来我们带着<strong>以下的问题</strong>一起去思考 commit 阶段的工作！</p><ul><li>commit 阶段分为几个子阶段，都做了什么事情？</li><li>如何执行生命周期和 hooks 钩子的回调及销毁函数？</li><li>commit 阶段是如何更新 DOM 节点的？</li><li>useEffect 钩子是如何被调度的？</li></ul><hr><p><code>commit</code> 阶段会做以下这些事情</p><ul><li>对一些<strong>生命周期和副作用钩子的处理</strong>，比如 类组件的 <code>componentDidMount</code> 、<code>componentDidUpdate</code>，函数组件的 <code>useEffect</code>、<code>useLayoutEffect</code> 、<code>useInsertionEffect</code> 等</li><li>另一方面，在一次 Update 中，进行添加节点（<code>Placement</code>）、更新节点（<code>Update</code>）、删除节点（<code>Deletion</code>）、同时有对 <code>ref</code> 的处理等。</li></ul><p><code>commit</code> 阶段的<strong>入口在 <code>commitRoot</code> 函数</strong>，在这里会发起一个最高优先级的调度任务，然后调用 <code>commitRootImpl</code> 函数来处理副作用，将最新的 Fiber 树同步到 DOM 上</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">commitRoot</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">previousUpdateLanePriority</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getCurrentUpdatePriority</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prevTransition</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ReactCurrentBatchConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">transition</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ReactCurrentBatchConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">transition</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setCurrentUpdatePriority</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">DiscreteEventPriority</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 最高优先级调度</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">commitRootImpl</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">previousUpdateLanePriority</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// commit 主流程</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 重置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ReactCurrentBatchConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">transition</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prevTransition</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setCurrentUpdatePriority</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">previousUpdateLanePriority</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="流程概览" tabindex="-1">流程概览 <a class="header-anchor" href="#流程概览" aria-label="Permalink to &quot;流程概览&quot;">​</a></h2><p><code>commit</code>阶段主要针对 <code>rootFiber</code>上的 <code>effectList</code>进行处理，根据对 DOM 的操作时机可以<strong>分为三个子阶段</strong></p><ul><li><code>Before mutation</code>阶段（执行 DOM 操作前）：读取组件变更前的状态 <ul><li>对于 CC 而言，会执行 <code>getSnapshotBeforeUpdate</code>，获取 DOM <strong>更新前</strong>的组件实例信息（更新前）</li><li>对于 FC 而言，会异步调度 <code>useEffect</code> 钩子</li></ul></li><li><code>mutation</code> 阶段（执行 DOM 操作）： <ul><li>对于 <code>HostComponent</code> 会执行相应的 DOM 操作</li><li>对于 CC 会调用 <code>componentWillUnmount</code></li><li>对于 FC 会执行 <code>useLayoutEffect</code> 的<strong>销毁函数</strong></li></ul></li><li><code>layout</code> 阶段（执行 DOM 操作后）：在 DOM 操作完成后，读取当前组件的状态（更新后） <ul><li>对于 CC ，会调用 <code>componentDidMount</code> 和 <code>componentDidUpdate</code> 以及 <code>setState</code> 的回调函数</li><li>对于 FC ，会执行 <code>useLayoutEffect</code> 的回调函数</li></ul></li></ul><p>在这当中，需要注意的是，在 <code>mutation</code> 阶段结束后，<code>layout</code> 开始之前，<code>workInProgress</code> 树会切换成 <code>current</code> 树。这样做是为了</p><ul><li>在 <code>mutation</code> 阶段调用类组件的 <code>componentWillUnmount</code>的时候， 可以获取到<strong>卸载前</strong>的组件信息</li><li>在 <code>layout</code>阶段调用 <code>componentDidMount/Update</code> 时，获取的组件信息是组件<strong>更新后</strong>的。</li></ul><p><code>commit</code> 阶段的主流程在 <code>commitRootImpl</code> 这个函数中，可以明确的看到三个子阶段的执行</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">commitRootImpl</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">renderPriorityLevel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// NOTE： 采用 do while 的作用是，在 useEffect 内部可能会触发新的更新，新的更新可能会触发新的副作用 ，因此需要不断的循环，直到 为 null</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">flushPassiveEffects</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">rootWithPendingPassiveEffects</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// Note：这一步是为了看看还有没有没有执行的 useEffect， 有的话先执行他们</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 当前的 rootFiber</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lanes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">finishedLanes</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 优先级相关</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">finishedLanes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NoLanes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 绑定 scheduler 的回调函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callbackNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callbackPriority</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NoLane</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">remainingLanes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">mergeLanes</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lanes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">childLanes</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">markRootFinished</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">remainingLanes</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Note：处理光标，重置一些 render 阶段使用的变量</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 子树是否有更新</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">subtreeHasEffects</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">    (</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">subtreeFlags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#F07178;">      (</span><span style="color:#A6ACCD;">BeforeMutationMask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MutationMask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">LayoutMask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PassiveMask</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">!==</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NoFlags</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rootHasEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">    (</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">flags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#F07178;">      (</span><span style="color:#A6ACCD;">BeforeMutationMask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MutationMask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">LayoutMask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PassiveMask</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">!==</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">NoFlags</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">subtreeHasEffects</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rootHasEffect</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 存在副作用，处理 Fiber 上的副作用</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 第一个阶段是 before mutation ，在这个阶段可以读取改变之前的的 state</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 生命周期函数 getSnapshotBeforeUpdate 的调用</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shouldFireAfterActiveInstanceBlur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">commitBeforeMutationEffects</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//  mutation 阶段，可以在这个阶段 改变 host tree</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">commitMutationEffects</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lanes</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 交换 workInProgress</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 执行 layout</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">commitLayoutEffects</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lanes</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">requestPaint</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 重置执行栈环境</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">executionContext</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prevExecutionContext</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 将优先级重置为之前的 非同步优先级</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setCurrentUpdatePriority</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">previousPriority</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ReactCurrentBatchConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">transition</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prevTransition</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// No effects.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Note：commit 阶段结尾，可能会在 commit 阶段产生新的更新，因此在 commit 阶段的结尾会重新调度一次</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">ensureRootIsScheduled</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Note：react 中会将同步任务放在 flushSync 队列中，执行这个函数会执行它里面的同步任务</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Note：默认 react 中开启的是 legacy 模式，这种模式下的更新都是 同步的 更新，未来会开启 concurrent 模式（并发模式），会出现不同优先级的更新</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">flushSyncCallbacks</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>接下来我们去看看每个阶段都分别做了哪些工作！</p><br>`,21),e=[p];function t(c,r,y,F,i,D){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{C as __pageData,d as default};
