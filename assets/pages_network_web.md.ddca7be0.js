import{_ as a,c as e,o as l,U as o}from"./chunks/framework.4d5e0f31.js";const t="/assets/web-1.977458ee.png",i="/assets/web-2.1d97a3b9.png",b=JSON.parse('{"title":"网络层","description":"","frontmatter":{},"headers":[],"relativePath":"pages/network/web.md","lastUpdated":1687077803000}'),r={name:"pages/network/web.md"},s=o('<h1 id="网络层" tabindex="-1">网络层 <a class="header-anchor" href="#网络层" aria-label="Permalink to &quot;网络层&quot;">​</a></h1><p>主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。</p><p>网络层传输单位是<strong>数据报</strong>。</p><ul><li>功能一：路由选择与分组转发</li><li>功能二：异构网络互联</li><li>功能三：拥塞控制</li></ul><h2 id="路由算法" tabindex="-1">路由算法 <a class="header-anchor" href="#路由算法" aria-label="Permalink to &quot;路由算法&quot;">​</a></h2><h3 id="静态路由算法-非自适应路由算法" tabindex="-1">静态路由算法（非自适应路由算法） <a class="header-anchor" href="#静态路由算法-非自适应路由算法" aria-label="Permalink to &quot;静态路由算法（非自适应路由算法）&quot;">​</a></h3><p>管理员手工配置路由信息</p><p>简便、可靠，在负荷稳定、拓扑变化不大的网络中运行效果很好，广泛用于高度安全性的军事网络和较小的商业网络。</p><p>路由更新慢，不适用大型网络</p><h3 id="动态路由算法-自适应路由算法" tabindex="-1">动态路由算法（自适应路由算法） <a class="header-anchor" href="#动态路由算法-自适应路由算法" aria-label="Permalink to &quot;动态路由算法（自适应路由算法）&quot;">​</a></h3><p>路由器间彼此交换信息，按照路由算法优化出路由表项。</p><p>路由更新快，适用大型网络，及时响应链路费用或网络拓扑变化。</p><p>算法复杂，增加网络负担。</p><p><img src="'+t+'" alt="web-1" data-fancybox="gallery"></p><h3 id="分层次的路由选择协议" tabindex="-1">分层次的路由选择协议 <a class="header-anchor" href="#分层次的路由选择协议" aria-label="Permalink to &quot;分层次的路由选择协议&quot;">​</a></h3><p>因特网将整个互联网划分为许多较小的自治系统</p><p><strong>自治系统AS</strong>：在单一的技术管理下的一组路由器，而这些路由器使用一种AS内部的路由选择协议和共同的度量以确定分组在该AS内的路由，同时还使用一种AS之间的路由协议以确定在AS之间的路由。 一个AS内的所有网络都属于一个行政单位来管辖，一个自治系统的所有路由器在本自治系统内都必须连通。</p><h2 id="路由选择协议" tabindex="-1">路由选择协议 <a class="header-anchor" href="#路由选择协议" aria-label="Permalink to &quot;路由选择协议&quot;">​</a></h2><p>路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。</p><p>互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。</p><p>可以把路由选择协议划分为两大类：</p><ul><li>自治系统内部的路由选择：RIP 和 <code>OSPF</code></li><li>自治系统间的路由选择：BGP</li></ul><h3 id="_1-内部网关协议-rip" tabindex="-1">1. 内部网关协议 RIP <a class="header-anchor" href="#_1-内部网关协议-rip" aria-label="Permalink to &quot;1. 内部网关协议 RIP&quot;">​</a></h3><p>RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</p><p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。</p><p>距离向量算法：</p><ul><li>对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；</li><li>对修改后的 RIP 报文中的每一个项目，进行以下步骤：</li><li>若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；</li><li>否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。</li><li>若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。</li></ul><p>RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。</p><h3 id="_2-内部网关协议-ospf" tabindex="-1">2. 内部网关协议 <code>OSPF</code> <a class="header-anchor" href="#_2-内部网关协议-ospf" aria-label="Permalink to &quot;2. 内部网关协议 `OSPF`&quot;">​</a></h3><p>开放最短路径优先 <code>OSPF</code>，是为了克服 <code>RIP</code> 的缺点而开发出来的。</p><p>开放表示 <code>OSPF</code> 不受某一家厂商控制，而是公开发表的；</p><p>最短路径优先表示使用了 Dijkstra 提出的<strong>最短路径算法 SPF</strong>。</p><p><code>OSPF</code> 具有以下特点：</p><ul><li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法。</li><li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</li><li>只有当链路状态发生变化时，路由器才会发送信息。</li></ul><p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，<code>OSPF</code> 的更新过程收敛的很快。</p><h3 id="_3-外部网关协议-bgp" tabindex="-1">3. 外部网关协议 BGP <a class="header-anchor" href="#_3-外部网关协议-bgp" aria-label="Permalink to &quot;3. 外部网关协议 BGP&quot;">​</a></h3><p>BGP（Border Gateway Protocol，边界网关协议）</p><p>AS 之间的路由选择很困难，主要是由于：</p><ul><li>互联网规模很大；</li><li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li><li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。</li></ul><p>BGP 只能寻找一条比较好的路由，而不是最佳路由。</p><p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p><p><img src="'+i+'" alt="web-2" data-fancybox="gallery"></p><h2 id="ip-数据报格式" tabindex="-1">IP 数据报格式 <a class="header-anchor" href="#ip-数据报格式" aria-label="Permalink to &quot;IP 数据报格式&quot;">​</a></h2><ul><li><strong>版本</strong> : 有 4（IPv4）和 6（IPv6）两个值；</li><li><strong>首部长度</strong> : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</li><li><strong>区分服务</strong> : 用来获得更好的服务，一般情况下不使用。</li><li><strong>总长度</strong> : 包括首部长度和数据部分长度。</li><li><strong>生存时间</strong> ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</li><li><strong>协议</strong> ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</li><li><strong>首部检验和</strong> ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</li><li><strong>标识</strong> : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</li><li><strong>片偏移</strong> : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。</li></ul>',44),p=[s];function n(d,c,h,P,u,_){return l(),e("div",null,p)}const S=a(r,[["render",n]]);export{b as __pageData,S as default};
