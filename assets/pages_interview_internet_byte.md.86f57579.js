import{_ as s,c as a,o as n,V as p}from"./chunks/framework.3d11d069.js";const d=JSON.parse('{"title":"字节","description":"","frontmatter":{},"headers":[],"relativePath":"pages/interview/internet/byte.md","filePath":"pages/interview/internet/byte.md","lastUpdated":1692979255000}'),e={name:"pages/interview/internet/byte.md"},l=p(`<h1 id="字节" tabindex="-1">字节 <a class="header-anchor" href="#字节" aria-label="Permalink to &quot;字节&quot;">​</a></h1><h2 id="问下面这一段放在浏览器执行-会怎么样" tabindex="-1">问下面这一段放在浏览器执行，会怎么样？ <a class="header-anchor" href="#问下面这一段放在浏览器执行-会怎么样" aria-label="Permalink to &quot;问下面这一段放在浏览器执行，会怎么样？&quot;">​</a></h2><p>当浏览器执行这段代码时，<code>fn()</code> 会持续地将自身加入到任务队列中，以便在当前执行栈为空时尽快执行。由于 setTimeout 的延迟时间设置为 0，这会导致大量的 fn() 调用被累积在任务队列中，不断地消耗浏览器的资源。</p><p>然而，这并不会导致浏览器崩溃或卡死，因为 JavaScript 是单线程的，事件循环会确保每次只执行一个任务。在执行下一个 fn() 之前，浏览器会有机会处理其他任务，如用户交互、渲染更新等。但是，这段代码会导致浏览器的 CPU 使用率较高，影响性能和响应速度。在实际应用中，应避免使用这种递归调用模式。</p><p>不断的加入任务队列，但是浏览器不会卡丝，因为宏任务之前会有机会执行其他任务</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;},</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>那如果执行这个呢</p><p>这段代码不端的将自己加入到微任务队列中，会有大量的 fn 任务积累在微任务队列，这会导致浏览器卡顿</p><p>在执行栈为空时，浏览器会先处理微任务队列任务，直到为空，因此浏览器可能无法处理其他任务</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,10),o=[l];function t(c,r,F,i,y,D){return n(),a("div",null,o)}const C=s(e,[["render",t]]);export{d as __pageData,C as default};
