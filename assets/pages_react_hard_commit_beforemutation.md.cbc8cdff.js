import{_ as s,c as n,o as a,V as o}from"./chunks/framework.3d11d069.js";const l="/assets/beforemutation.f7f3333a.png",A=JSON.parse('{"title":"before mutation 阶段","description":"","frontmatter":{},"headers":[],"relativePath":"pages/react/hard/commit/beforemutation.md","filePath":"pages/react/hard/commit/beforemutation.md","lastUpdated":1687532684000}'),p={name:"pages/react/hard/commit/beforemutation.md"},e=o('<h1 id="before-mutation-阶段" tabindex="-1">before mutation 阶段 <a class="header-anchor" href="#before-mutation-阶段" aria-label="Permalink to &quot;before mutation 阶段&quot;">​</a></h1><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h2><p>首先是 before mutation 阶段，在 before mutation 阶段，会执行 <code>commitBeforeMutationEffects</code> 函数，因为此时还没有对真实 DOM 进行修改，因此是<strong>获取 DOM 快照的最佳时期</strong>，同时也会在此异步调用 <code>useEffect</code></p><ul><li>执行 <code>commitBeforeMutationEffectsOnFiber</code> 函数 <ul><li>DOM 组件的 <code>blur</code> 和 <code>focus</code> 事件相关</li><li>对于类组件，执行 <code>getSnapshotBeforeUpdate</code> 生命周期函数</li></ul></li><li>如果 FC 中使用到的 <code>useEffect</code> ，会通过 <code>scheduleCallback</code> 来调度 <code>passiveEffect</code> 异步执行</li></ul><blockquote><p>passiveEffect 就是 useEffect 对应的 effectTag</p></blockquote><p><code>beforemutation</code> 阶段的主要控制函数在于 <code>commitBeforeMutationEffects</code>，主要做的事情就是初始化全局变量 <code>nextEffect</code> 以及 <code>focusedInstanceHandle</code>，然后调用 <code>commitBeforeMutationEffects_begin</code> 来处理副作用<br><img src="'+l+`" alt="image.png" data-fancybox="gallery"></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">commitBeforeMutationEffects</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FiberRoot</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">firstChild</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">focusedInstanceHandle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">prepareForCommit</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">containerInfo</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">nextEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">firstChild</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// NOTE：开始执行，</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">commitBeforeMutationEffects_begin</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 不再跟踪fiber节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shouldFire</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shouldFireAfterActiveInstanceBlur</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">shouldFireAfterActiveInstanceBlur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">focusedInstanceHandle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shouldFire</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="prepareforcommit" tabindex="-1">prepareForCommit <a class="header-anchor" href="#prepareforcommit" aria-label="Permalink to &quot;prepareForCommit&quot;">​</a></h2><p>首先会执行 <code>prepareForCommit</code> 函数，调用 <code>getClosestInstanceFromNode</code> 方法，获取当前节点最近的 <code>HostComponent</code> 或 <code>HostText</code> 类型对应的 Fiber 节点，来<strong>初始化全局变量</strong> <code>focusedInstanceHandle</code>，用来处理 focus 状态</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prepareForCommit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">containerInfo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">eventsEnabled</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ReactBrowserEventEmitterIsEnabled</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">selectionInformation</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getSelectionInformation</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">activeInstance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">enableCreateEventHandleAPI</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">focusedElem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">selectionInformation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">focusedElem</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">focusedElem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">activeInstance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getClosestInstanceFromNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">focusedElem</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">ReactBrowserEventEmitterSetEnabled</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">activeInstance</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="commitbeforemutationeffects-begin" tabindex="-1">commitBeforeMutationEffects_begin <a class="header-anchor" href="#commitbeforemutationeffects-begin" aria-label="Permalink to &quot;commitBeforeMutationEffects_begin&quot;">​</a></h2><p>在 <code>commitBeforeMutationEffects_begin</code> 函数中会从上往下遍历，找到最底部并且有标记了 before mutation 的 fiber 节点，调用 <code>commitBeforeMutationEffects_complete</code> 函数来<strong>更新 props 和 state</strong><br>如果当前的 Fiber 节点上的 <code>deletions</code> 字段被标记了值，意味着节点即将被删除，会调用 <code>commitBeforeMutationEffectsDeletion</code> 来<strong>创建 blur 事件并进行派发</strong></p><p>因此可以知道 begin 流程主要做了两件事</p><ul><li>如果子代 Fiber 树上有 before mutation 标记，会把 nextEffect 赋值给子 Fiber，也就是向下递归找到有标记 before mutation 的 Fiber</li><li>找到后，执行 <code>commitBeforeMutationEffects_complete</code> 函数</li></ul><p>从 <code>commitBeforeMutationEffects_begin</code> 的执行上，我们可以知道：<strong>commit 阶段执行的生命周期以及钩子函数是子先后父的</strong></p><p>这是因为，如果在子组件中的生命周期内改变 DOM 状态，并且还要在父组件生命周期中同步状态，就需要子先后父之行生命周期</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">commitBeforeMutationEffects_begin</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">nextEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fiber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextEffect</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// This phase is only used for beforeActiveInstanceBlur.</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Let&#39;s skip the whole loop if it&#39;s off.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">enableCreateEventHandleAPI</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deletions</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">deletions</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">deletions</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deletions</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deletion</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deletions</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 调用 dispatchBeforeDetachedBlur() 来创建 blur 事件并派发</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">commitBeforeMutationEffectsDeletion</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">deletion</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">child</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      (</span><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">subtreeFlags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BeforeMutationMask</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NoFlags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">child</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">    ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">ensureCorrectReturnPointer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fiber</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">nextEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 更新fiber节点的 props 和 state</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">commitBeforeMutationEffects_complete</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="commitbeforemutationeffectsonfiber" tabindex="-1">commitBeforeMutationEffectsOnFiber <a class="header-anchor" href="#commitbeforemutationeffectsonfiber" aria-label="Permalink to &quot;commitBeforeMutationEffectsOnFiber&quot;">​</a></h2><p>在 <code>commitBeforeMutationEffects_begin</code> 中会调用 <code>commitBeforeMutationEffects_complete</code> 函数，在 <code>commitBeforeMutationEffects_complete</code> 中会从下到上归并，（sibling 到 parent）执行 <code>commitBeforeMutationEffectsOnFiber</code>函数，这也是 <code>before_mutation</code>的<strong>核心逻辑</strong></p><ul><li><strong>首先会处理 blur 和 focus 相关逻辑</strong></li><li><strong>其次会执行 getSnapshotBeforeUpdate 的生命周期函数</strong></li></ul><p>会根据 Fiber 节点 tag 的不同进入不同的处理逻辑，同时会根据 <code>current</code> 是否存在来<strong>判断是 mount 还是 update 阶段</strong>，进入不同的处理逻辑</p><p>对于 CC 而言，最重要的就是<strong>触发生命周期函数，获取当前 DOM 的数据信息</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">commitBeforeMutationEffectsOnFiber</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">finishedWork</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alternate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">flags</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ((</span><span style="color:#A6ACCD;">flags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Snapshot</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NoFlags</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">FunctionComponent</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ForwardRef</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SimpleMemoComponent</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ClassComponent</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 非首次渲染的情况</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 获取上一次的props</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prevProps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">memoizedProps</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 获取上一次的 state</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prevState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">memoizedState</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 获取当前 class组件实例</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stateNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 更新 props 和 state</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 调用 getSnapshotBeforeUpdate 生命周期方法</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">snapshot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSnapshotBeforeUpdate</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">elementType</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prevProps</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">resolveDefaultProps</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prevProps</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">prevState</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                     </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 将生成的 snapshot 保存到 instance.__reactInternalSnapshotBeforeUpdate 上</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 供 DidUpdate 生命周期使用</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__reactInternalSnapshotBeforeUpdate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">snapshot</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">             </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>从 React 16 版本开始，<code>componentWillXX</code> 生命周期函数加上了 <code>UNSAFE_ </code> 的前缀，这是因为 <code>Reconciler</code> 重构为 <strong><code>Fiber Reconciler</code></strong> 后，<code>render</code> 阶段执行的任务可能会因为某些特殊原因（有优先级更高任务）会被<strong>中断或者是重新开始</strong>，对应的组件在 <code>render</code> 阶段的生命周期钩子(即 <code>componentWillXX</code> )可能会有<strong>触发多次</strong>的情况，因此加上了 <code>UNSAFE_ </code> 前缀，减少使用 <br>而新增的 <strong><code>getSnapShotBeforeUpdate</code> 生命周期函数</strong>，它是在 <code>commit</code> 阶段内的 <code>before mutation</code> 阶段调用的，由于 <code>commit</code> 阶段是<strong>同步执行的</strong>，所以不会遇到多次调用的情况。</p><h2 id="调度-useeffect" tabindex="-1">调度 useEffect <a class="header-anchor" href="#调度-useeffect" aria-label="Permalink to &quot;调度 useEffect&quot;">​</a></h2><blockquote><p>这一部分在 <code>commitBeforeMutationEffects</code> 函数执行之前，也属于 before mutation 阶段</p></blockquote><p>对于 <code>useEffect</code> ,会通过 <code>scheduler</code> 模块提供的 <code>scheduleCallback</code> 进行调度，用来<strong>以某个优先级异步调度一个回调函数。</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 调度 useEffect</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  (finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">subtreeFlags </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> PassiveMask) </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> NoFlags </span><span style="color:#89DDFF;">||</span></span>
<span class="line"><span style="color:#A6ACCD;">  (finishedWork</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">flags </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> PassiveMask) </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> NoFlags</span></span>
<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">rootDoesHavePassiveEffects</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">rootDoesHavePassiveEffects</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pendingPassiveEffectsRemainingLanes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">remainingLanes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">scheduleCallback</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">NormalSchedulerPriority</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 触发 useEffect</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">flushPassiveEffects</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在此处，被异步调度的回调函数就是触发 <code>useEffect</code> 的方法 <code>flushPassiveEffects</code>，这个回调函数会在调度后执行，<strong>相当于在这里注册了这个回调函数。</strong><br>所以整个 <code>useEffect</code> 异步调用分为三步：</p><ol><li>before mutation 阶段在 <code>scheduleCallback</code> 中调度 <code>flushPassiveEffects</code></li><li><code>layout</code> 阶段之后将 <code>effectList</code> 赋值给 <code>rootWithPendingPassiveEffects</code></li><li><code>scheduleCallback</code> 触发 <code>flushPassiveEffects</code>，<code>flushPassiveEffects</code>内部遍历<code>rootWithPendingPassiveEffects</code></li></ol><p><strong>在 React 官方文档中，也对 useEffect 的执行时机做出了解释</strong></p><blockquote><p>与 <code>componentDidMount</code>、<code>componentDidUpdate</code> 不同的是，传给 <code>useEffect</code> 的函数会<strong>在浏览器完成布局与绘制之后</strong>，在一个延迟事件中被调用。这使得它适用于许多常见的副作用场景，比如设置订阅和事件处理等情况，因为绝大多数操作不应阻塞浏览器对屏幕的更新。</p></blockquote><p>此外，从 React 18 开始，当它是离散的用户输入（如点击）的结果时，或者当它是由 <a href="https://zh-hans.reactjs.org/docs/react-dom.html#flushsync" target="_blank" rel="noreferrer">flushSync</a> 包装的更新结果时，传递给 <code>useEffect</code> 的函数将在<strong>屏幕布局和绘制之前同步执行</strong>。这种行为便于事件系统或 <a href="https://zh-hans.reactjs.org/docs/react-dom.html#flushsync" target="_blank" rel="noreferrer">flushSync</a> 的调用者观察该效果的结果。<strong>少用！！少用！！会影响性能</strong></p><hr><p>接下来我们来看看 mutation 阶段的工作</p>`,35),t=[e];function c(r,F,y,D,i,f){return a(),n("div",null,t)}const d=s(p,[["render",c]]);export{A as __pageData,d as default};
